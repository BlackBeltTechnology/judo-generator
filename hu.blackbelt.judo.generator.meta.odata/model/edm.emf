@GenModel(documentation="
      Entity Data Model part of the Common Schema Definition Language
    ")
@namespace(uri="http://docs.oasis-open.org/odata/ns/edm", prefix="edm")
package edm;

import "http://www.eclipse.org/emf/2003/XMLType";

@ExtendedMetaData(name="Annotation_._type", kind="elementOnly")
class AnnotationType {

  @ExtendedMetaData(kind="element", name="Annotation", namespace="##targetNamespace")
  !resolve val AnnotationType[*] annotation;

  @ExtendedMetaData(kind="element", name="Binary", namespace="##targetNamespace")
  !resolve val TBinaryConstantExpression Binary;

  @ExtendedMetaData(kind="element", name="Bool", namespace="##targetNamespace")
  !resolve val TBoolConstantExpression Bool;

  @ExtendedMetaData(kind="element", name="Date", namespace="##targetNamespace")
  !resolve val TDateConstantExpression Date;

  @ExtendedMetaData(kind="element", name="DateTimeOffset", namespace="##targetNamespace")
  !resolve val TDateTimeOffsetConstantExpression DateTimeOffset;

  @ExtendedMetaData(kind="element", name="Decimal", namespace="##targetNamespace")
  !resolve val TDecimalConstantExpression Decimal;

  @ExtendedMetaData(kind="element", name="Duration", namespace="##targetNamespace")
  !resolve val TDurationConstantExpression Duration;

  @ExtendedMetaData(kind="element", name="EnumMember", namespace="##targetNamespace")
  attr TEnumMemberList EnumMember;

  @ExtendedMetaData(kind="element", name="Float", namespace="##targetNamespace")
  !resolve val TFloatConstantExpression Float;

  @ExtendedMetaData(kind="element", name="Guid", namespace="##targetNamespace")
  !resolve val TGuidConstantExpression Guid;

  @ExtendedMetaData(kind="element", name="Int", namespace="##targetNamespace")
  !resolve val TIntConstantExpression Int;

  @ExtendedMetaData(kind="element", name="String", namespace="##targetNamespace")
  !resolve val TStringConstantExpression String;

  @ExtendedMetaData(kind="element", name="TimeOfDay", namespace="##targetNamespace")
  !resolve val TTimeOfDayConstantExpression TimeOfDay;

  @ExtendedMetaData(kind="element", name="AnnotationPath", namespace="##targetNamespace")
  !resolve val TPathExpression AnnotationPath;

  @ExtendedMetaData(kind="element", name="Apply", namespace="##targetNamespace")
  !resolve val TApplyExpression Apply;

  @ExtendedMetaData(kind="element", name="Cast", namespace="##targetNamespace")
  !resolve val TCastOrIsOfExpression Cast;

  @ExtendedMetaData(kind="element", name="Collection", namespace="##targetNamespace")
  !resolve val TCollectionExpression Collection;

  @ExtendedMetaData(kind="element", name="If", namespace="##targetNamespace")
  !resolve val TIfExpression If;

  @ExtendedMetaData(kind="element", name="Eq", namespace="##targetNamespace")
  !resolve val TTwoChildrenExpression Eq;

  @ExtendedMetaData(kind="element", name="Ne", namespace="##targetNamespace")
  !resolve val TTwoChildrenExpression Ne;

  @ExtendedMetaData(kind="element", name="Ge", namespace="##targetNamespace")
  !resolve val TTwoChildrenExpression Ge;

  @ExtendedMetaData(kind="element", name="Gt", namespace="##targetNamespace")
  !resolve val TTwoChildrenExpression Gt;

  @ExtendedMetaData(kind="element", name="Le", namespace="##targetNamespace")
  !resolve val TTwoChildrenExpression Le;

  @ExtendedMetaData(kind="element", name="Lt", namespace="##targetNamespace")
  !resolve val TTwoChildrenExpression Lt;

  @ExtendedMetaData(kind="element", name="And", namespace="##targetNamespace")
  !resolve val TTwoChildrenExpression And;

  @ExtendedMetaData(kind="element", name="Or", namespace="##targetNamespace")
  !resolve val TTwoChildrenExpression Or;

  @ExtendedMetaData(kind="element", name="Not", namespace="##targetNamespace")
  !resolve val TOneChildExpression Not;

  @ExtendedMetaData(kind="element", name="IsOf", namespace="##targetNamespace")
  !resolve val TCastOrIsOfExpression IsOf;

  @ExtendedMetaData(kind="element", name="LabeledElement", namespace="##targetNamespace")
  !resolve val TLabeledElementExpression LabeledElement;

  @ExtendedMetaData(kind="element", name="LabeledElementReference", namespace="##targetNamespace")
  !resolve val TLabeledElementReferenceExpression LabeledElementReference;

  @ExtendedMetaData(kind="element", name="Null", namespace="##targetNamespace")
  !resolve val TNullExpression Null;

  @ExtendedMetaData(kind="element", name="NavigationPropertyPath", namespace="##targetNamespace")
  !resolve val TPathExpression NavigationPropertyPath;

  @ExtendedMetaData(kind="element", name="Path", namespace="##targetNamespace")
  !resolve val TPathExpression Path;

  @ExtendedMetaData(kind="element", name="PropertyPath", namespace="##targetNamespace")
  !resolve val TPathExpression PropertyPath;

  @ExtendedMetaData(kind="element", name="Record", namespace="##targetNamespace")
  !resolve val TRecordExpression Record;

  @ExtendedMetaData(kind="element", name="UrlRef", namespace="##targetNamespace")
  !resolve val TOneChildExpression UrlRef;

  @ExtendedMetaData(kind="attribute", name="AnnotationPath")
  attr TPathWithTermSegments annotationPath1;

  @ExtendedMetaData(kind="attribute", name="Binary")
  attr Binary binary1;

  @ExtendedMetaData(kind="attribute", name="Bool")
  unsettable attr Boolean bool1;

  @ExtendedMetaData(kind="attribute", name="Date")
  attr Date date1;

  @ExtendedMetaData(kind="attribute", name="DateTimeOffset")
  attr DateTimeStamp dateTimeOffset1;

  @ExtendedMetaData(kind="attribute", name="Decimal")
  attr type.Decimal decimal1;

  @ExtendedMetaData(kind="attribute", name="Duration")
  attr DayTimeDuration duration1;

  @ExtendedMetaData(kind="attribute", name="EnumMember")
  attr TEnumMemberList enumMember1;

  @ExtendedMetaData(kind="attribute", name="Float")
  unsettable attr type.Double float1;

  @ExtendedMetaData(kind="attribute", name="Guid")
  attr TGuidLiteral guid1;

  @ExtendedMetaData(kind="attribute", name="Int")
  attr type.Integer int1;

  @ExtendedMetaData(kind="attribute", name="NavigationPropertyPath")
  attr TPathWithTermSegments navigationPropertyPath1;

  @ExtendedMetaData(kind="attribute", name="Path")
  attr TPathWithTermSegments path1;

  @ExtendedMetaData(kind="attribute", name="PropertyPath")
  attr TPathWithTermSegments propertyPath1;

  @ExtendedMetaData(kind="attribute", name="Qualifier")
  attr TSimpleIdentifier qualifier;

  @ExtendedMetaData(kind="attribute", name="String")
  attr type.String string1;

  @ExtendedMetaData(kind="attribute", name="Term")
  attr TQualifiedName[1] term;

  @ExtendedMetaData(kind="attribute", name="TimeOfDay")
  attr Time timeOfDay1;

  @ExtendedMetaData(kind="attribute", name="UrlRef")
  attr type.AnyURI urlRef1;
}

@ExtendedMetaData(name="binary", baseType="http://www.eclipse.org/emf/2003/XMLType#string", pattern="([A-Za-z0-9_\-]{4})*([A-Za-z0-9_\-]{3}[A-Za-z0-9_\-]|[A-Za-z0-9_\-]{2}[AEIMQUYcgkosw048]=?|[A-Za-z0-9_\-][AQgw](==)?)?")
datatype Binary : java.lang.String;

@ExtendedMetaData(name="boolean", baseType="http://www.eclipse.org/emf/2003/XMLType#boolean", pattern="true|false")
datatype Boolean : boolean;

@ExtendedMetaData(name="boolean:Object", baseType="boolean")
datatype BooleanObject : java.lang.Boolean;

@ExtendedMetaData(name="date", baseType="http://www.eclipse.org/emf/2003/XMLType#date", pattern="[0-9][0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9]")
datatype Date : javax.xml.datatype.XMLGregorianCalendar;

@ExtendedMetaData(name="dateTimeStamp", baseType="http://www.eclipse.org/emf/2003/XMLType#dateTime", pattern=".*([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\.[0-9]{1,12})?(Z|(\+|-)[0-9][0-9]:[0-9][0-9])")
datatype DateTimeStamp : javax.xml.datatype.XMLGregorianCalendar;

@ExtendedMetaData(name="dayTimeDuration", baseType="http://www.eclipse.org/emf/2003/XMLType#duration", pattern="[^YM]*[DT].*")
datatype DayTimeDuration : javax.xml.datatype.Duration;

@ExtendedMetaData(name="", kind="mixed")
class DocumentRoot {

  @ExtendedMetaData(kind="elementWildcard", name=":mixed")
  !unique attr ecore.EFeatureMapEntry[*] Mixed;

  @ExtendedMetaData(kind="attribute", name="xmlns:prefix")
  transient !resolve val ecore.EStringToStringMapEntry[*] XMLNSPrefixMap;

  @ExtendedMetaData(kind="attribute", name="xsi:schemaLocation")
  transient !resolve val ecore.EStringToStringMapEntry[*] XSISchemaLocation;

  @ExtendedMetaData(kind="element", name="Annotation", namespace="##targetNamespace")
  volatile transient derived !resolve val AnnotationType[0..?] Annotation;

  @ExtendedMetaData(kind="element", name="Schema", namespace="##targetNamespace")
  volatile transient derived !resolve val SchemaType[0..?] Schema;
}

@ExtendedMetaData(name="Schema_._type", kind="elementOnly")
class SchemaType {

  @ExtendedMetaData(kind="group", name="group:0")
  !unique attr ecore.EFeatureMapEntry[*] Group;

  @ExtendedMetaData(kind="element", name="ComplexType", namespace="##targetNamespace", group="#group:0")
  volatile transient derived !resolve val TComplexType[*] ComplexType;

  @ExtendedMetaData(kind="element", name="EntityType", namespace="##targetNamespace", group="#group:0")
  volatile transient derived !resolve val TEntityType[*] EntityType;

  @ExtendedMetaData(kind="element", name="TypeDefinition", namespace="##targetNamespace", group="#group:0")
  volatile transient derived !resolve val TTypeDefinition[*] TypeDefinition;

  @ExtendedMetaData(kind="element", name="EnumType", namespace="##targetNamespace", group="#group:0")
  volatile transient derived !resolve val TEnumType[*] EnumType;

  @ExtendedMetaData(kind="element", name="Action", namespace="##targetNamespace", group="#group:0")
  volatile transient derived !resolve val TAction[*] Action;

  @ExtendedMetaData(kind="element", name="Function", namespace="##targetNamespace", group="#group:0")
  volatile transient derived !resolve val TFunction[*] Function;

  @ExtendedMetaData(kind="element", name="Term", namespace="##targetNamespace", group="#group:0")
  volatile transient derived !resolve val TTerm[*] Term;

  @ExtendedMetaData(kind="element", name="Annotations", namespace="##targetNamespace", group="#group:0")
  volatile transient derived !resolve val TAnnotations[*] Annotations;

  @ExtendedMetaData(kind="element", name="EntityContainer", namespace="##targetNamespace", group="#group:0")
  volatile transient derived !resolve val TEntityContainer[*] EntityContainer;

  @ExtendedMetaData(kind="element", name="Annotation", namespace="##targetNamespace", group="#group:0")
  volatile transient derived !resolve val AnnotationType[*] Annotation;

  @ExtendedMetaData(kind="attribute", name="Alias")
  attr TSimpleIdentifier Alias;

  @ExtendedMetaData(kind="attribute", name="Namespace")
  attr TNamespaceName[1] Namespace;
}

@ExtendedMetaData(name="TAbstractType")
enum TAbstractType {
  EdmComplexType = 0;
  EdmEntityType = 1;
  EdmPrimitiveType = 2;
  EdmGeography = 3;
  EdmGeometry = 4;
  EdmAnnotationPath = 5;
  EdmNavigationPropertyPath = 6;
  EdmPropertyPath = 7;
  CollectionEdmComplexType = 8;
  CollectionEdmEntityType = 9;
  CollectionEdmPrimitiveType = 10;
  CollectionEdmGeography = 11;
  CollectionEdmGeometry = 12;
  CollectionEdmAnnotationPath = 13;
  CollectionEdmNavigationPropertyPath = 14;
  CollectionEdmPropertyPath = 15;
}

@ExtendedMetaData(name="TAbstractType:Object", baseType="TAbstractType")
datatype TAbstractTypeObject : org.eclipse.emf.common.util.Enumerator;

@ExtendedMetaData(name="TAction", kind="elementOnly")
class TAction {

  @ExtendedMetaData(kind="group", name="group:0")
  !unique attr ecore.EFeatureMapEntry[*] Group;

  @ExtendedMetaData(kind="element", name="Parameter", namespace="##targetNamespace", group="#group:0")
  volatile transient derived !resolve val TActionFunctionParameter[*] Parameter;

  @ExtendedMetaData(kind="element", name="Annotation", namespace="##targetNamespace", group="#group:0")
  volatile transient derived !resolve val AnnotationType[*] Annotation;

  @ExtendedMetaData(kind="element", name="ReturnType", namespace="##targetNamespace")
  !resolve val TActionFunctionReturnType ReturnType;

  @ExtendedMetaData(kind="attribute", name="EntitySetPath")
  attr TPath EntitySetPath;

  @ExtendedMetaData(kind="attribute", name="IsBound")
  unsettable attr type.Boolean IsBound = "false";

  @ExtendedMetaData(kind="attribute", name="Name")
  attr TSimpleIdentifier[1] Name;
}

@ExtendedMetaData(name="TActionFunctionParameter", kind="elementOnly")
class TActionFunctionParameter {

  @ExtendedMetaData(kind="element", name="Annotation", namespace="##targetNamespace")
  !resolve val AnnotationType[*] Annotation;

  @ExtendedMetaData(kind="attribute", name="MaxLength")
  attr TMaxLengthFacet MaxLength;

  @ExtendedMetaData(kind="attribute", name="Name")
  attr TSimpleIdentifier[1] Name;

  @ExtendedMetaData(kind="attribute", name="Nullable")
  unsettable attr type.Boolean Nullable;

  @ExtendedMetaData(kind="attribute", name="Precision")
  attr TPrecisionFacet Precision;

  @ExtendedMetaData(kind="attribute", name="Scale")
  attr TScaleFacet Scale;

  @ExtendedMetaData(kind="attribute", name="SRID")
  attr TSridFacet SRID;

  @ExtendedMetaData(kind="attribute", name="Type")
  attr TTypeName[1] Type;
}

@ExtendedMetaData(name="TActionFunctionReturnType", kind="empty")
class TActionFunctionReturnType {

  @ExtendedMetaData(kind="attribute", name="MaxLength")
  attr TMaxLengthFacet MaxLength;

  @ExtendedMetaData(kind="attribute", name="Nullable")
  unsettable attr type.Boolean Nullable;

  @ExtendedMetaData(kind="attribute", name="Precision")
  attr TPrecisionFacet Precision;

  @ExtendedMetaData(kind="attribute", name="Scale")
  attr TScaleFacet Scale;

  @ExtendedMetaData(kind="attribute", name="SRID")
  attr TSridFacet SRID;

  @ExtendedMetaData(kind="attribute", name="Type")
  attr TTypeName[1] Type;
}

@ExtendedMetaData(name="TActionImport", kind="elementOnly")
class TActionImport {

  @ExtendedMetaData(kind="element", name="Annotation", namespace="##targetNamespace")
  !resolve val AnnotationType[*] Annotation;

  @ExtendedMetaData(kind="attribute", name="Action")
  attr TQualifiedName[1] Action;

  @ExtendedMetaData(kind="attribute", name="EntitySet")
  attr TPath EntitySet;

  @ExtendedMetaData(kind="attribute", name="IncludeInServiceDocument")
  unsettable attr type.Boolean IncludeInServiceDocument = "false";

  @ExtendedMetaData(kind="attribute", name="Name")
  attr TSimpleIdentifier[1] Name;
}

@ExtendedMetaData(name="TAnnotations", kind="elementOnly")
class TAnnotations {

  @ExtendedMetaData(kind="element", name="Annotation", namespace="##targetNamespace")
  !resolve val AnnotationType[+] Annotation;

  @ExtendedMetaData(kind="attribute", name="Qualifier")
  attr TSimpleIdentifier Qualifier;

  @ExtendedMetaData(kind="attribute", name="Target")
  attr TPath[1] Target;
}

@ExtendedMetaData(name="TAppliesTo", itemType="TAppliesTo_._item")
datatype TAppliesTo : java.util.List;

@ExtendedMetaData(name="TAppliesTo_._item")
enum TAppliesToItem {
  Action = 0;
  ActionImport = 1;
  Annotation = 2;
  Apply = 3;
  Cast = 4;
  ComplexType = 5;
  EntityContainer = 6;
  EntitySet = 7;
  EntityType = 8;
  EnumType = 9;
  Function = 10;
  FunctionImport = 11;
  If = 12;
  IsOf = 13;
  LabeledElement = 14;
  Member = 15;
  NavigationProperty = 16;
  Null = 17;
  OnDelete = 18;
  Parameter = 19;
  Property = 20;
  PropertyValue = 21;
  Record = 22;
  Reference = 23;
  ReferentialConstraint = 24;
  Schema = 25;
  Singleton = 26;
  Term = 27;
  TypeDefinition = 28;
  UrlRef = 29;
}

@ExtendedMetaData(name="TAppliesTo_._item:Object", baseType="TAppliesTo_._item")
datatype TAppliesToItemObject : org.eclipse.emf.common.util.Enumerator;

@ExtendedMetaData(name="TApplyExpression", kind="elementOnly")
class TApplyExpression {

  @ExtendedMetaData(kind="element", name="Annotation", namespace="##targetNamespace")
  !resolve val AnnotationType[*] Annotation;

  @ExtendedMetaData(kind="group", name="GExpression:1")
  !unique attr ecore.EFeatureMapEntry[*] GExpression;

  @ExtendedMetaData(kind="element", name="Binary", namespace="##targetNamespace", group="#GExpression:1")
  volatile transient derived !resolve val TBinaryConstantExpression[*] Binary;

  @ExtendedMetaData(kind="element", name="Bool", namespace="##targetNamespace", group="#GExpression:1")
  volatile transient derived !resolve val TBoolConstantExpression[*] Bool;

  @ExtendedMetaData(kind="element", name="Date", namespace="##targetNamespace", group="#GExpression:1")
  volatile transient derived !resolve val TDateConstantExpression[*] Date;

  @ExtendedMetaData(kind="element", name="DateTimeOffset", namespace="##targetNamespace", group="#GExpression:1")
  volatile transient derived !resolve val TDateTimeOffsetConstantExpression[*] DateTimeOffset;

  @ExtendedMetaData(kind="element", name="Decimal", namespace="##targetNamespace", group="#GExpression:1")
  volatile transient derived !resolve val TDecimalConstantExpression[*] Decimal;

  @ExtendedMetaData(kind="element", name="Duration", namespace="##targetNamespace", group="#GExpression:1")
  volatile transient derived !resolve val TDurationConstantExpression[*] Duration;

  @ExtendedMetaData(kind="element", name="EnumMember", namespace="##targetNamespace", group="#GExpression:1")
  !unique volatile transient derived attr TEnumMemberList[*] EnumMember;

  @ExtendedMetaData(kind="element", name="Float", namespace="##targetNamespace", group="#GExpression:1")
  volatile transient derived !resolve val TFloatConstantExpression[*] Float;

  @ExtendedMetaData(kind="element", name="Guid", namespace="##targetNamespace", group="#GExpression:1")
  volatile transient derived !resolve val TGuidConstantExpression[*] Guid;

  @ExtendedMetaData(kind="element", name="Int", namespace="##targetNamespace", group="#GExpression:1")
  volatile transient derived !resolve val TIntConstantExpression[*] Int;

  @ExtendedMetaData(kind="element", name="String", namespace="##targetNamespace", group="#GExpression:1")
  volatile transient derived !resolve val TStringConstantExpression[*] String;

  @ExtendedMetaData(kind="element", name="TimeOfDay", namespace="##targetNamespace", group="#GExpression:1")
  volatile transient derived !resolve val TTimeOfDayConstantExpression[*] TimeOfDay;

  @ExtendedMetaData(kind="element", name="AnnotationPath", namespace="##targetNamespace", group="#GExpression:1")
  volatile transient derived !resolve val TPathExpression[*] AnnotationPath;

  @ExtendedMetaData(kind="element", name="Apply", namespace="##targetNamespace", group="#GExpression:1")
  volatile transient derived !resolve val TApplyExpression[*] Apply;

  @ExtendedMetaData(kind="element", name="Cast", namespace="##targetNamespace", group="#GExpression:1")
  volatile transient derived !resolve val TCastOrIsOfExpression[*] Cast;

  @ExtendedMetaData(kind="element", name="Collection", namespace="##targetNamespace", group="#GExpression:1")
  volatile transient derived !resolve val TCollectionExpression[*] Collection;

  @ExtendedMetaData(kind="element", name="If", namespace="##targetNamespace", group="#GExpression:1")
  volatile transient derived !resolve val TIfExpression[*] If;

  @ExtendedMetaData(kind="element", name="Eq", namespace="##targetNamespace", group="#GExpression:1")
  volatile transient derived !resolve val TTwoChildrenExpression[*] Eq;

  @ExtendedMetaData(kind="element", name="Ne", namespace="##targetNamespace", group="#GExpression:1")
  volatile transient derived !resolve val TTwoChildrenExpression[*] Ne;

  @ExtendedMetaData(kind="element", name="Ge", namespace="##targetNamespace", group="#GExpression:1")
  volatile transient derived !resolve val TTwoChildrenExpression[*] Ge;

  @ExtendedMetaData(kind="element", name="Gt", namespace="##targetNamespace", group="#GExpression:1")
  volatile transient derived !resolve val TTwoChildrenExpression[*] Gt;

  @ExtendedMetaData(kind="element", name="Le", namespace="##targetNamespace", group="#GExpression:1")
  volatile transient derived !resolve val TTwoChildrenExpression[*] Le;

  @ExtendedMetaData(kind="element", name="Lt", namespace="##targetNamespace", group="#GExpression:1")
  volatile transient derived !resolve val TTwoChildrenExpression[*] Lt;

  @ExtendedMetaData(kind="element", name="And", namespace="##targetNamespace", group="#GExpression:1")
  volatile transient derived !resolve val TTwoChildrenExpression[*] And;

  @ExtendedMetaData(kind="element", name="Or", namespace="##targetNamespace", group="#GExpression:1")
  volatile transient derived !resolve val TTwoChildrenExpression[*] Or;

  @ExtendedMetaData(kind="element", name="Not", namespace="##targetNamespace", group="#GExpression:1")
  volatile transient derived !resolve val TOneChildExpression[*] Not;

  @ExtendedMetaData(kind="element", name="IsOf", namespace="##targetNamespace", group="#GExpression:1")
  volatile transient derived !resolve val TCastOrIsOfExpression[*] IsOf;

  @ExtendedMetaData(kind="element", name="LabeledElement", namespace="##targetNamespace", group="#GExpression:1")
  volatile transient derived !resolve val TLabeledElementExpression[*] LabeledElement;

  @ExtendedMetaData(kind="element", name="LabeledElementReference", namespace="##targetNamespace", group="#GExpression:1")
  volatile transient derived !resolve val TLabeledElementReferenceExpression[*] LabeledElementReference;

  @ExtendedMetaData(kind="element", name="Null", namespace="##targetNamespace", group="#GExpression:1")
  volatile transient derived !resolve val TNullExpression[*] Null;

  @ExtendedMetaData(kind="element", name="NavigationPropertyPath", namespace="##targetNamespace", group="#GExpression:1")
  volatile transient derived !resolve val TPathExpression[*] NavigationPropertyPath;

  @ExtendedMetaData(kind="element", name="Path", namespace="##targetNamespace", group="#GExpression:1")
  volatile transient derived !resolve val TPathExpression[*] Path;

  @ExtendedMetaData(kind="element", name="PropertyPath", namespace="##targetNamespace", group="#GExpression:1")
  volatile transient derived !resolve val TPathExpression[*] PropertyPath;

  @ExtendedMetaData(kind="element", name="Record", namespace="##targetNamespace", group="#GExpression:1")
  volatile transient derived !resolve val TRecordExpression[*] Record;

  @ExtendedMetaData(kind="element", name="UrlRef", namespace="##targetNamespace", group="#GExpression:1")
  volatile transient derived !resolve val TOneChildExpression[*] UrlRef;

  @ExtendedMetaData(kind="attribute", name="Function")
  attr TClientFunction Function;
}

@ExtendedMetaData(name="TBinaryConstantExpression", kind="simple")
class TBinaryConstantExpression {

  @ExtendedMetaData(name=":0", kind="simple")
  attr Binary Value;
}

@ExtendedMetaData(name="TBoolConstantExpression", kind="simple")
class TBoolConstantExpression {

  @ExtendedMetaData(name=":0", kind="simple")
  unsettable attr Boolean Value;
}

@ExtendedMetaData(name="TCastOrIsOfExpression", kind="elementOnly")
class TCastOrIsOfExpression {

  @ExtendedMetaData(kind="element", name="Annotation", namespace="##targetNamespace")
  !resolve val AnnotationType[*] Annotation;

  @ExtendedMetaData(kind="element", name="Binary", namespace="##targetNamespace")
  !resolve val TBinaryConstantExpression Binary;

  @ExtendedMetaData(kind="element", name="Bool", namespace="##targetNamespace")
  !resolve val TBoolConstantExpression Bool;

  @ExtendedMetaData(kind="element", name="Date", namespace="##targetNamespace")
  !resolve val TDateConstantExpression Date;

  @ExtendedMetaData(kind="element", name="DateTimeOffset", namespace="##targetNamespace")
  !resolve val TDateTimeOffsetConstantExpression DateTimeOffset;

  @ExtendedMetaData(kind="element", name="Decimal", namespace="##targetNamespace")
  !resolve val TDecimalConstantExpression Decimal;

  @ExtendedMetaData(kind="element", name="Duration", namespace="##targetNamespace")
  !resolve val TDurationConstantExpression Duration;

  @ExtendedMetaData(kind="element", name="EnumMember", namespace="##targetNamespace")
  attr TEnumMemberList EnumMember;

  @ExtendedMetaData(kind="element", name="Float", namespace="##targetNamespace")
  !resolve val TFloatConstantExpression Float;

  @ExtendedMetaData(kind="element", name="Guid", namespace="##targetNamespace")
  !resolve val TGuidConstantExpression Guid;

  @ExtendedMetaData(kind="element", name="Int", namespace="##targetNamespace")
  !resolve val TIntConstantExpression Int;

  @ExtendedMetaData(kind="element", name="String", namespace="##targetNamespace")
  !resolve val TStringConstantExpression String;

  @ExtendedMetaData(kind="element", name="TimeOfDay", namespace="##targetNamespace")
  !resolve val TTimeOfDayConstantExpression TimeOfDay;

  @ExtendedMetaData(kind="element", name="AnnotationPath", namespace="##targetNamespace")
  !resolve val TPathExpression AnnotationPath;

  @ExtendedMetaData(kind="element", name="Apply", namespace="##targetNamespace")
  !resolve val TApplyExpression Apply;

  @ExtendedMetaData(kind="element", name="Cast", namespace="##targetNamespace")
  !resolve val TCastOrIsOfExpression Cast;

  @ExtendedMetaData(kind="element", name="Collection", namespace="##targetNamespace")
  !resolve val TCollectionExpression Collection;

  @ExtendedMetaData(kind="element", name="If", namespace="##targetNamespace")
  !resolve val TIfExpression If;

  @ExtendedMetaData(kind="element", name="Eq", namespace="##targetNamespace")
  !resolve val TTwoChildrenExpression Eq;

  @ExtendedMetaData(kind="element", name="Ne", namespace="##targetNamespace")
  !resolve val TTwoChildrenExpression Ne;

  @ExtendedMetaData(kind="element", name="Ge", namespace="##targetNamespace")
  !resolve val TTwoChildrenExpression Ge;

  @ExtendedMetaData(kind="element", name="Gt", namespace="##targetNamespace")
  !resolve val TTwoChildrenExpression Gt;

  @ExtendedMetaData(kind="element", name="Le", namespace="##targetNamespace")
  !resolve val TTwoChildrenExpression Le;

  @ExtendedMetaData(kind="element", name="Lt", namespace="##targetNamespace")
  !resolve val TTwoChildrenExpression Lt;

  @ExtendedMetaData(kind="element", name="And", namespace="##targetNamespace")
  !resolve val TTwoChildrenExpression And;

  @ExtendedMetaData(kind="element", name="Or", namespace="##targetNamespace")
  !resolve val TTwoChildrenExpression Or;

  @ExtendedMetaData(kind="element", name="Not", namespace="##targetNamespace")
  !resolve val TOneChildExpression Not;

  @ExtendedMetaData(kind="element", name="IsOf", namespace="##targetNamespace")
  !resolve val TCastOrIsOfExpression IsOf;

  @ExtendedMetaData(kind="element", name="LabeledElement", namespace="##targetNamespace")
  !resolve val TLabeledElementExpression LabeledElement;

  @ExtendedMetaData(kind="element", name="LabeledElementReference", namespace="##targetNamespace")
  !resolve val TLabeledElementReferenceExpression LabeledElementReference;

  @ExtendedMetaData(kind="element", name="Null", namespace="##targetNamespace")
  !resolve val TNullExpression Null;

  @ExtendedMetaData(kind="element", name="NavigationPropertyPath", namespace="##targetNamespace")
  !resolve val TPathExpression NavigationPropertyPath;

  @ExtendedMetaData(kind="element", name="Path", namespace="##targetNamespace")
  !resolve val TPathExpression Path;

  @ExtendedMetaData(kind="element", name="PropertyPath", namespace="##targetNamespace")
  !resolve val TPathExpression PropertyPath;

  @ExtendedMetaData(kind="element", name="Record", namespace="##targetNamespace")
  !resolve val TRecordExpression Record;

  @ExtendedMetaData(kind="element", name="UrlRef", namespace="##targetNamespace")
  !resolve val TOneChildExpression UrlRef;

  @ExtendedMetaData(kind="attribute", name="MaxLength")
  attr TMaxLengthFacet MaxLength;

  @ExtendedMetaData(kind="attribute", name="Precision")
  attr TPrecisionFacet Precision;

  @ExtendedMetaData(kind="attribute", name="Scale")
  attr TScaleFacet Scale;

  @ExtendedMetaData(kind="attribute", name="SRID")
  attr TSridFacet SRID;

  @ExtendedMetaData(kind="attribute", name="Type")
  attr TTypeName Type;
}

@ExtendedMetaData(name="TClientFunction", memberTypes="TQualifiedName TClientFunction_._member_._1")
datatype TClientFunction : java.lang.Object;

@ExtendedMetaData(name="TClientFunction_._member_._1")
enum TClientFunctionMember1 {
  odataConcat = 0;
  odataFillUriTemplate = 1;
  odataUriEncode = 2;
}

@ExtendedMetaData(name="TClientFunction_._member_._1:Object", baseType="TClientFunction_._member_._1")
datatype TClientFunctionMember1Object : org.eclipse.emf.common.util.Enumerator;

@ExtendedMetaData(name="TCollectionExpression", kind="elementOnly")
class TCollectionExpression {

  @ExtendedMetaData(kind="group", name="GExpression:0")
  !unique attr ecore.EFeatureMapEntry[*] gExpression;

  @ExtendedMetaData(kind="element", name="Binary", namespace="##targetNamespace", group="#GExpression:0")
  volatile transient derived !resolve val TBinaryConstantExpression[*] binary;

  @ExtendedMetaData(kind="element", name="Bool", namespace="##targetNamespace", group="#GExpression:0")
  volatile transient derived !resolve val TBoolConstantExpression[*] bool;

  @ExtendedMetaData(kind="element", name="Date", namespace="##targetNamespace", group="#GExpression:0")
  volatile transient derived !resolve val TDateConstantExpression[*] date;

  @ExtendedMetaData(kind="element", name="DateTimeOffset", namespace="##targetNamespace", group="#GExpression:0")
  volatile transient derived !resolve val TDateTimeOffsetConstantExpression[*] dateTimeOffset;

  @ExtendedMetaData(kind="element", name="Decimal", namespace="##targetNamespace", group="#GExpression:0")
  volatile transient derived !resolve val TDecimalConstantExpression[*] decimal;

  @ExtendedMetaData(kind="element", name="Duration", namespace="##targetNamespace", group="#GExpression:0")
  volatile transient derived !resolve val TDurationConstantExpression[*] duration;

  @ExtendedMetaData(kind="element", name="EnumMember", namespace="##targetNamespace", group="#GExpression:0")
  !unique volatile transient derived attr TEnumMemberList[*] enumMember;

  @ExtendedMetaData(kind="element", name="Float", namespace="##targetNamespace", group="#GExpression:0")
  volatile transient derived !resolve val TFloatConstantExpression[*] float;

  @ExtendedMetaData(kind="element", name="Guid", namespace="##targetNamespace", group="#GExpression:0")
  volatile transient derived !resolve val TGuidConstantExpression[*] guid;

  @ExtendedMetaData(kind="element", name="Int", namespace="##targetNamespace", group="#GExpression:0")
  volatile transient derived !resolve val TIntConstantExpression[*] int;

  @ExtendedMetaData(kind="element", name="String", namespace="##targetNamespace", group="#GExpression:0")
  volatile transient derived !resolve val TStringConstantExpression[*] string;

  @ExtendedMetaData(kind="element", name="TimeOfDay", namespace="##targetNamespace", group="#GExpression:0")
  volatile transient derived !resolve val TTimeOfDayConstantExpression[*] timeOfDay;

  @ExtendedMetaData(kind="element", name="AnnotationPath", namespace="##targetNamespace", group="#GExpression:0")
  volatile transient derived !resolve val TPathExpression[*] annotationPath;

  @ExtendedMetaData(kind="element", name="Apply", namespace="##targetNamespace", group="#GExpression:0")
  volatile transient derived !resolve val TApplyExpression[*] apply;

  @ExtendedMetaData(kind="element", name="Cast", namespace="##targetNamespace", group="#GExpression:0")
  volatile transient derived !resolve val TCastOrIsOfExpression[*] cast;

  @ExtendedMetaData(kind="element", name="Collection", namespace="##targetNamespace", group="#GExpression:0")
  volatile transient derived !resolve val TCollectionExpression[*] collection;

  @ExtendedMetaData(kind="element", name="If", namespace="##targetNamespace", group="#GExpression:0")
  volatile transient derived !resolve val TIfExpression[*] if;

  @ExtendedMetaData(kind="element", name="Eq", namespace="##targetNamespace", group="#GExpression:0")
  volatile transient derived !resolve val TTwoChildrenExpression[*] eq;

  @ExtendedMetaData(kind="element", name="Ne", namespace="##targetNamespace", group="#GExpression:0")
  volatile transient derived !resolve val TTwoChildrenExpression[*] ne;

  @ExtendedMetaData(kind="element", name="Ge", namespace="##targetNamespace", group="#GExpression:0")
  volatile transient derived !resolve val TTwoChildrenExpression[*] ge;

  @ExtendedMetaData(kind="element", name="Gt", namespace="##targetNamespace", group="#GExpression:0")
  volatile transient derived !resolve val TTwoChildrenExpression[*] gt;

  @ExtendedMetaData(kind="element", name="Le", namespace="##targetNamespace", group="#GExpression:0")
  volatile transient derived !resolve val TTwoChildrenExpression[*] le;

  @ExtendedMetaData(kind="element", name="Lt", namespace="##targetNamespace", group="#GExpression:0")
  volatile transient derived !resolve val TTwoChildrenExpression[*] lt;

  @ExtendedMetaData(kind="element", name="And", namespace="##targetNamespace", group="#GExpression:0")
  volatile transient derived !resolve val TTwoChildrenExpression[*] and;

  @ExtendedMetaData(kind="element", name="Or", namespace="##targetNamespace", group="#GExpression:0")
  volatile transient derived !resolve val TTwoChildrenExpression[*] or;

  @ExtendedMetaData(kind="element", name="Not", namespace="##targetNamespace", group="#GExpression:0")
  volatile transient derived !resolve val TOneChildExpression[*] not;

  @ExtendedMetaData(kind="element", name="IsOf", namespace="##targetNamespace", group="#GExpression:0")
  volatile transient derived !resolve val TCastOrIsOfExpression[*] isOf;

  @ExtendedMetaData(kind="element", name="LabeledElement", namespace="##targetNamespace", group="#GExpression:0")
  volatile transient derived !resolve val TLabeledElementExpression[*] labeledElement;

  @ExtendedMetaData(kind="element", name="LabeledElementReference", namespace="##targetNamespace", group="#GExpression:0")
  volatile transient derived !resolve val TLabeledElementReferenceExpression[*] labeledElementReference;

  @ExtendedMetaData(kind="element", name="Null", namespace="##targetNamespace", group="#GExpression:0")
  volatile transient derived !resolve val TNullExpression[*] null;

  @ExtendedMetaData(kind="element", name="NavigationPropertyPath", namespace="##targetNamespace", group="#GExpression:0")
  volatile transient derived !resolve val TPathExpression[*] navigationPropertyPath;

  @ExtendedMetaData(kind="element", name="Path", namespace="##targetNamespace", group="#GExpression:0")
  volatile transient derived !resolve val TPathExpression[*] path;

  @ExtendedMetaData(kind="element", name="PropertyPath", namespace="##targetNamespace", group="#GExpression:0")
  volatile transient derived !resolve val TPathExpression[*] propertyPath;

  @ExtendedMetaData(kind="element", name="Record", namespace="##targetNamespace", group="#GExpression:0")
  volatile transient derived !resolve val TRecordExpression[*] record;

  @ExtendedMetaData(kind="element", name="UrlRef", namespace="##targetNamespace", group="#GExpression:0")
  volatile transient derived !resolve val TOneChildExpression[*] urlRef;
}

@ExtendedMetaData(name="TComplexType", kind="elementOnly")
class TComplexType {

  @ExtendedMetaData(kind="group", name="group:0")
  !unique attr ecore.EFeatureMapEntry[*] Group;

  @ExtendedMetaData(kind="element", name="Property", namespace="##targetNamespace", group="#group:0")
  volatile transient derived !resolve val TProperty[*] Property;

  @ExtendedMetaData(kind="element", name="NavigationProperty", namespace="##targetNamespace", group="#group:0")
  volatile transient derived !resolve val TNavigationProperty[*] NavigationProperty;

  @ExtendedMetaData(kind="element", name="Annotation", namespace="##targetNamespace", group="#group:0")
  volatile transient derived !resolve val AnnotationType[*] Annotation;

  @ExtendedMetaData(kind="attribute", name="Abstract")
  unsettable attr type.Boolean Abstract = "false";

  @ExtendedMetaData(kind="attribute", name="BaseType")
  attr TQualifiedName BaseType;

  @ExtendedMetaData(kind="attribute", name="Name")
  attr TSimpleIdentifier[1] Name;

  @ExtendedMetaData(kind="attribute", name="OpenType")
  unsettable attr type.Boolean OpenType = "false";
}

@ExtendedMetaData(name="TDateConstantExpression", kind="simple")
class TDateConstantExpression {

  @ExtendedMetaData(name=":0", kind="simple")
  attr Date value;
}

@ExtendedMetaData(name="TDateTimeOffsetConstantExpression", kind="simple")
class TDateTimeOffsetConstantExpression {

  @ExtendedMetaData(name=":0", kind="simple")
  attr DateTimeStamp value;
}

@ExtendedMetaData(name="TDecimalConstantExpression", kind="simple")
class TDecimalConstantExpression {

  @ExtendedMetaData(name=":0", kind="simple")
  attr type.Decimal value;
}

@ExtendedMetaData(name="TDurationConstantExpression", kind="simple")
class TDurationConstantExpression {

  @ExtendedMetaData(name=":0", kind="simple")
  attr DayTimeDuration value;
}

@ExtendedMetaData(name="TEntityContainer", kind="elementOnly")
class TEntityContainer {

  @ExtendedMetaData(kind="group", name="group:0")
  !unique attr ecore.EFeatureMapEntry[*] Group;

  @ExtendedMetaData(kind="element", name="EntitySet", namespace="##targetNamespace", group="#group:0")
  volatile transient derived !resolve val TEntitySet[*] EntitySet;

  @ExtendedMetaData(kind="element", name="ActionImport", namespace="##targetNamespace", group="#group:0")
  volatile transient derived !resolve val TActionImport[*] ActionImport;

  @ExtendedMetaData(kind="element", name="FunctionImport", namespace="##targetNamespace", group="#group:0")
  volatile transient derived !resolve val TFunctionImport[*] FunctionImport;

  @ExtendedMetaData(kind="element", name="Singleton", namespace="##targetNamespace", group="#group:0")
  volatile transient derived !resolve val TSingleton[*] Singleton;

  @ExtendedMetaData(kind="element", name="Annotation", namespace="##targetNamespace", group="#group:0")
  volatile transient derived !resolve val AnnotationType[*] Annotation;

  @ExtendedMetaData(kind="attribute", name="Extends")
  attr TQualifiedName Extends;

  @ExtendedMetaData(kind="attribute", name="Name")
  attr TSimpleIdentifier[1] Name;
}

@ExtendedMetaData(name="TEntityKeyElement", kind="elementOnly")
class TEntityKeyElement {

  @ExtendedMetaData(kind="element", name="PropertyRef", namespace="##targetNamespace")
  !resolve val TPropertyRef[+] PropertyRef;
}

@ExtendedMetaData(name="TEntitySet", kind="elementOnly")
class TEntitySet {

  @ExtendedMetaData(kind="group", name="group:0")
  !unique attr ecore.EFeatureMapEntry[*] Group;

  @ExtendedMetaData(kind="element", name="NavigationPropertyBinding", namespace="##targetNamespace", group="#group:0")
  volatile transient derived !resolve val TNavigationPropertyBinding[*] NavigationPropertyBinding;

  @ExtendedMetaData(kind="element", name="Annotation", namespace="##targetNamespace", group="#group:0")
  volatile transient derived !resolve val AnnotationType[*] Annotation;

  @ExtendedMetaData(kind="attribute", name="EntityType")
  attr TQualifiedName[1] EntityType;

  @ExtendedMetaData(kind="attribute", name="IncludeInServiceDocument")
  unsettable attr type.Boolean IncludeInServiceDocument = "true";

  @ExtendedMetaData(kind="attribute", name="Name")
  attr TSimpleIdentifier[1] Name;
}

@ExtendedMetaData(name="TEntityType", kind="elementOnly")
class TEntityType {

  @ExtendedMetaData(kind="group", name="group:0")
  !unique attr ecore.EFeatureMapEntry[*] Group;

  @ExtendedMetaData(kind="element", name="Key", namespace="##targetNamespace", group="#group:0")
  volatile transient derived !resolve val TEntityKeyElement[*] Key;

  @ExtendedMetaData(kind="element", name="Property", namespace="##targetNamespace", group="#group:0")
  volatile transient derived !resolve val TProperty[*] Property;

  @ExtendedMetaData(kind="element", name="NavigationProperty", namespace="##targetNamespace", group="#group:0")
  volatile transient derived !resolve val TNavigationProperty[*] NavigationProperty;

  @ExtendedMetaData(kind="element", name="Annotation", namespace="##targetNamespace", group="#group:0")
  volatile transient derived !resolve val AnnotationType[*] Annotation;

  @ExtendedMetaData(kind="attribute", name="Abstract")
  unsettable attr type.Boolean Abstract = "false";

  @ExtendedMetaData(kind="attribute", name="BaseType")
  attr TQualifiedName BaseType;

  @ExtendedMetaData(kind="attribute", name="HasStream")
  unsettable attr type.Boolean HasStream = "false";

  @ExtendedMetaData(kind="attribute", name="Name")
  attr TSimpleIdentifier[1] Name;

  @ExtendedMetaData(kind="attribute", name="OpenType")
  unsettable attr type.Boolean OpenType = "false";
}

@ExtendedMetaData(name="TEnumMemberList", itemType="TPath")
datatype TEnumMemberList : java.util.List;

@ExtendedMetaData(name="TEnumType", kind="elementOnly")
class TEnumType {

  @ExtendedMetaData(kind="group", name="group:0")
  !unique attr ecore.EFeatureMapEntry[*] Group;

  @ExtendedMetaData(kind="element", name="Member", namespace="##targetNamespace", group="#group:0")
  volatile transient derived !resolve val TEnumTypeMember[*] Member;

  @ExtendedMetaData(kind="element", name="Annotation", namespace="##targetNamespace", group="#group:0")
  volatile transient derived !resolve val AnnotationType[*] Annotation;

  @ExtendedMetaData(kind="attribute", name="IsFlags")
  unsettable attr type.Boolean IsFlags;

  @ExtendedMetaData(kind="attribute", name="Name")
  attr TSimpleIdentifier[1] Name;

  @ExtendedMetaData(kind="attribute", name="UnderlyingType")
  attr TTypeName UnderlyingType;
}

@ExtendedMetaData(name="TEnumTypeMember", kind="elementOnly")
class TEnumTypeMember {

  @ExtendedMetaData(kind="element", name="Annotation", namespace="##targetNamespace")
  !resolve val AnnotationType[*] Annotation;

  @ExtendedMetaData(kind="attribute", name="Name")
  attr TSimpleIdentifier[1] Name;

  @ExtendedMetaData(kind="attribute", name="Value")
  unsettable attr type.Long Value;
}

@ExtendedMetaData(name="TFloatConstantExpression", kind="simple")
class TFloatConstantExpression {

  @ExtendedMetaData(name=":0", kind="simple")
  unsettable attr type.Double value;
}

@ExtendedMetaData(name="TFunction", kind="elementOnly")
class TFunction {

  @ExtendedMetaData(kind="group", name="group:0")
  !unique attr ecore.EFeatureMapEntry[*] Group;

  @ExtendedMetaData(kind="element", name="Parameter", namespace="##targetNamespace", group="#group:0")
  volatile transient derived !resolve val TActionFunctionParameter[*] Parameter;

  @ExtendedMetaData(kind="element", name="Annotation", namespace="##targetNamespace", group="#group:0")
  volatile transient derived !resolve val AnnotationType[*] Annotation;

  @ExtendedMetaData(kind="element", name="ReturnType", namespace="##targetNamespace")
  !resolve val TActionFunctionReturnType[1] ReturnType;

  @ExtendedMetaData(kind="attribute", name="EntitySetPath")
  attr TPath EntitySetPath;

  @ExtendedMetaData(kind="attribute", name="IsBound")
  unsettable attr type.Boolean IsBound = "false";

  @ExtendedMetaData(kind="attribute", name="IsComposable")
  unsettable attr type.Boolean IsComposable = "false";

  @ExtendedMetaData(kind="attribute", name="Name")
  attr TSimpleIdentifier[1] Name;
}

@ExtendedMetaData(name="TFunctionImport", kind="elementOnly")
class TFunctionImport {

  @ExtendedMetaData(kind="element", name="Annotation", namespace="##targetNamespace")
  !resolve val AnnotationType[*] Annotation;

  @ExtendedMetaData(kind="attribute", name="EntitySet")
  attr TPath EntitySet;

  @ExtendedMetaData(kind="attribute", name="Function")
  attr TQualifiedName[1] Function;

  @ExtendedMetaData(kind="attribute", name="IncludeInServiceDocument")
  unsettable attr type.Boolean IncludeInServiceDocument = "false";

  @ExtendedMetaData(kind="attribute", name="Name")
  attr TSimpleIdentifier[1] Name;
}

@ExtendedMetaData(name="TGuidConstantExpression", kind="simple")
class TGuidConstantExpression {

  @ExtendedMetaData(name=":0", kind="simple")
  attr TGuidLiteral value;
}

@ExtendedMetaData(name="TGuidLiteral", baseType="http://www.eclipse.org/emf/2003/XMLType#string", pattern="[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}")
datatype TGuidLiteral : java.lang.String;

@ExtendedMetaData(name="TIfExpression", kind="elementOnly")
class TIfExpression {

  @ExtendedMetaData(kind="element", name="Annotation", namespace="##targetNamespace")
  !resolve val AnnotationType[*] annotation;

  @ExtendedMetaData(kind="group", name="GExpression:1")
  !unique attr ecore.EFeatureMapEntry[*] gExpression;

  @ExtendedMetaData(kind="element", name="Binary", namespace="##targetNamespace", group="#GExpression:1")
  volatile transient derived !resolve val TBinaryConstantExpression[0..3] binary;

  @ExtendedMetaData(kind="element", name="Bool", namespace="##targetNamespace", group="#GExpression:1")
  volatile transient derived !resolve val TBoolConstantExpression[0..3] bool;

  @ExtendedMetaData(kind="element", name="Date", namespace="##targetNamespace", group="#GExpression:1")
  volatile transient derived !resolve val TDateConstantExpression[0..3] date;

  @ExtendedMetaData(kind="element", name="DateTimeOffset", namespace="##targetNamespace", group="#GExpression:1")
  volatile transient derived !resolve val TDateTimeOffsetConstantExpression[0..3] dateTimeOffset;

  @ExtendedMetaData(kind="element", name="Decimal", namespace="##targetNamespace", group="#GExpression:1")
  volatile transient derived !resolve val TDecimalConstantExpression[0..3] decimal;

  @ExtendedMetaData(kind="element", name="Duration", namespace="##targetNamespace", group="#GExpression:1")
  volatile transient derived !resolve val TDurationConstantExpression[0..3] duration;

  @ExtendedMetaData(kind="element", name="EnumMember", namespace="##targetNamespace", group="#GExpression:1")
  !unique volatile transient derived attr TEnumMemberList[0..3] enumMember;

  @ExtendedMetaData(kind="element", name="Float", namespace="##targetNamespace", group="#GExpression:1")
  volatile transient derived !resolve val TFloatConstantExpression[0..3] float;

  @ExtendedMetaData(kind="element", name="Guid", namespace="##targetNamespace", group="#GExpression:1")
  volatile transient derived !resolve val TGuidConstantExpression[0..3] guid;

  @ExtendedMetaData(kind="element", name="Int", namespace="##targetNamespace", group="#GExpression:1")
  volatile transient derived !resolve val TIntConstantExpression[0..3] int;

  @ExtendedMetaData(kind="element", name="String", namespace="##targetNamespace", group="#GExpression:1")
  volatile transient derived !resolve val TStringConstantExpression[0..3] string;

  @ExtendedMetaData(kind="element", name="TimeOfDay", namespace="##targetNamespace", group="#GExpression:1")
  volatile transient derived !resolve val TTimeOfDayConstantExpression[0..3] timeOfDay;

  @ExtendedMetaData(kind="element", name="AnnotationPath", namespace="##targetNamespace", group="#GExpression:1")
  volatile transient derived !resolve val TPathExpression[0..3] annotationPath;

  @ExtendedMetaData(kind="element", name="Apply", namespace="##targetNamespace", group="#GExpression:1")
  volatile transient derived !resolve val TApplyExpression[0..3] apply;

  @ExtendedMetaData(kind="element", name="Cast", namespace="##targetNamespace", group="#GExpression:1")
  volatile transient derived !resolve val TCastOrIsOfExpression[0..3] cast;

  @ExtendedMetaData(kind="element", name="Collection", namespace="##targetNamespace", group="#GExpression:1")
  volatile transient derived !resolve val TCollectionExpression[0..3] collection;

  @ExtendedMetaData(kind="element", name="If", namespace="##targetNamespace", group="#GExpression:1")
  volatile transient derived !resolve val TIfExpression[0..3] if;

  @ExtendedMetaData(kind="element", name="Eq", namespace="##targetNamespace", group="#GExpression:1")
  volatile transient derived !resolve val TTwoChildrenExpression[0..3] eq;

  @ExtendedMetaData(kind="element", name="Ne", namespace="##targetNamespace", group="#GExpression:1")
  volatile transient derived !resolve val TTwoChildrenExpression[0..3] ne;

  @ExtendedMetaData(kind="element", name="Ge", namespace="##targetNamespace", group="#GExpression:1")
  volatile transient derived !resolve val TTwoChildrenExpression[0..3] ge;

  @ExtendedMetaData(kind="element", name="Gt", namespace="##targetNamespace", group="#GExpression:1")
  volatile transient derived !resolve val TTwoChildrenExpression[0..3] gt;

  @ExtendedMetaData(kind="element", name="Le", namespace="##targetNamespace", group="#GExpression:1")
  volatile transient derived !resolve val TTwoChildrenExpression[0..3] le;

  @ExtendedMetaData(kind="element", name="Lt", namespace="##targetNamespace", group="#GExpression:1")
  volatile transient derived !resolve val TTwoChildrenExpression[0..3] lt;

  @ExtendedMetaData(kind="element", name="And", namespace="##targetNamespace", group="#GExpression:1")
  volatile transient derived !resolve val TTwoChildrenExpression[0..3] and;

  @ExtendedMetaData(kind="element", name="Or", namespace="##targetNamespace", group="#GExpression:1")
  volatile transient derived !resolve val TTwoChildrenExpression[0..3] or;

  @ExtendedMetaData(kind="element", name="Not", namespace="##targetNamespace", group="#GExpression:1")
  volatile transient derived !resolve val TOneChildExpression[0..3] not;

  @ExtendedMetaData(kind="element", name="IsOf", namespace="##targetNamespace", group="#GExpression:1")
  volatile transient derived !resolve val TCastOrIsOfExpression[0..3] isOf;

  @ExtendedMetaData(kind="element", name="LabeledElement", namespace="##targetNamespace", group="#GExpression:1")
  volatile transient derived !resolve val TLabeledElementExpression[0..3] labeledElement;

  @ExtendedMetaData(kind="element", name="LabeledElementReference", namespace="##targetNamespace", group="#GExpression:1")
  volatile transient derived !resolve val TLabeledElementReferenceExpression[0..3] labeledElementReference;

  @ExtendedMetaData(kind="element", name="Null", namespace="##targetNamespace", group="#GExpression:1")
  volatile transient derived !resolve val TNullExpression[0..3] null;

  @ExtendedMetaData(kind="element", name="NavigationPropertyPath", namespace="##targetNamespace", group="#GExpression:1")
  volatile transient derived !resolve val TPathExpression[0..3] navigationPropertyPath;

  @ExtendedMetaData(kind="element", name="Path", namespace="##targetNamespace", group="#GExpression:1")
  volatile transient derived !resolve val TPathExpression[0..3] path;

  @ExtendedMetaData(kind="element", name="PropertyPath", namespace="##targetNamespace", group="#GExpression:1")
  volatile transient derived !resolve val TPathExpression[0..3] propertyPath;

  @ExtendedMetaData(kind="element", name="Record", namespace="##targetNamespace", group="#GExpression:1")
  volatile transient derived !resolve val TRecordExpression[0..3] record;

  @ExtendedMetaData(kind="element", name="UrlRef", namespace="##targetNamespace", group="#GExpression:1")
  volatile transient derived !resolve val TOneChildExpression[0..3] urlRef;
}

@ExtendedMetaData(name="time", baseType="http://www.eclipse.org/emf/2003/XMLType#time", pattern="([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\.[0-9]{1,12})?")
datatype Time : javax.xml.datatype.XMLGregorianCalendar;

@ExtendedMetaData(name="TIntConstantExpression", kind="simple")
class TIntConstantExpression {

  @ExtendedMetaData(name=":0", kind="simple")
  attr type.Integer value;
}

@ExtendedMetaData(name="TLabeledElementExpression", kind="elementOnly")
class TLabeledElementExpression {

  @ExtendedMetaData(kind="element", name="Annotation", namespace="##targetNamespace")
  !resolve val AnnotationType[*] annotation;

  @ExtendedMetaData(kind="element", name="Binary", namespace="##targetNamespace")
  !resolve val TBinaryConstantExpression binary;

  @ExtendedMetaData(kind="element", name="Bool", namespace="##targetNamespace")
  !resolve val TBoolConstantExpression bool;

  @ExtendedMetaData(kind="element", name="Date", namespace="##targetNamespace")
  !resolve val TDateConstantExpression date;

  @ExtendedMetaData(kind="element", name="DateTimeOffset", namespace="##targetNamespace")
  !resolve val TDateTimeOffsetConstantExpression dateTimeOffset;

  @ExtendedMetaData(kind="element", name="Decimal", namespace="##targetNamespace")
  !resolve val TDecimalConstantExpression decimal;

  @ExtendedMetaData(kind="element", name="Duration", namespace="##targetNamespace")
  !resolve val TDurationConstantExpression duration;

  @ExtendedMetaData(kind="element", name="EnumMember", namespace="##targetNamespace")
  attr TEnumMemberList enumMember;

  @ExtendedMetaData(kind="element", name="Float", namespace="##targetNamespace")
  !resolve val TFloatConstantExpression float;

  @ExtendedMetaData(kind="element", name="Guid", namespace="##targetNamespace")
  !resolve val TGuidConstantExpression guid;

  @ExtendedMetaData(kind="element", name="Int", namespace="##targetNamespace")
  !resolve val TIntConstantExpression int;

  @ExtendedMetaData(kind="element", name="String", namespace="##targetNamespace")
  !resolve val TStringConstantExpression string;

  @ExtendedMetaData(kind="element", name="TimeOfDay", namespace="##targetNamespace")
  !resolve val TTimeOfDayConstantExpression timeOfDay;

  @ExtendedMetaData(kind="element", name="AnnotationPath", namespace="##targetNamespace")
  !resolve val TPathExpression annotationPath;

  @ExtendedMetaData(kind="element", name="Apply", namespace="##targetNamespace")
  !resolve val TApplyExpression apply;

  @ExtendedMetaData(kind="element", name="Cast", namespace="##targetNamespace")
  !resolve val TCastOrIsOfExpression cast;

  @ExtendedMetaData(kind="element", name="Collection", namespace="##targetNamespace")
  !resolve val TCollectionExpression collection;

  @ExtendedMetaData(kind="element", name="If", namespace="##targetNamespace")
  !resolve val TIfExpression if;

  @ExtendedMetaData(kind="element", name="Eq", namespace="##targetNamespace")
  !resolve val TTwoChildrenExpression eq;

  @ExtendedMetaData(kind="element", name="Ne", namespace="##targetNamespace")
  !resolve val TTwoChildrenExpression ne;

  @ExtendedMetaData(kind="element", name="Ge", namespace="##targetNamespace")
  !resolve val TTwoChildrenExpression ge;

  @ExtendedMetaData(kind="element", name="Gt", namespace="##targetNamespace")
  !resolve val TTwoChildrenExpression gt;

  @ExtendedMetaData(kind="element", name="Le", namespace="##targetNamespace")
  !resolve val TTwoChildrenExpression le;

  @ExtendedMetaData(kind="element", name="Lt", namespace="##targetNamespace")
  !resolve val TTwoChildrenExpression lt;

  @ExtendedMetaData(kind="element", name="And", namespace="##targetNamespace")
  !resolve val TTwoChildrenExpression and;

  @ExtendedMetaData(kind="element", name="Or", namespace="##targetNamespace")
  !resolve val TTwoChildrenExpression or;

  @ExtendedMetaData(kind="element", name="Not", namespace="##targetNamespace")
  !resolve val TOneChildExpression not;

  @ExtendedMetaData(kind="element", name="IsOf", namespace="##targetNamespace")
  !resolve val TCastOrIsOfExpression isOf;

  @ExtendedMetaData(kind="element", name="LabeledElement", namespace="##targetNamespace")
  !resolve val TLabeledElementExpression labeledElement;

  @ExtendedMetaData(kind="element", name="LabeledElementReference", namespace="##targetNamespace")
  !resolve val TLabeledElementReferenceExpression labeledElementReference;

  @ExtendedMetaData(kind="element", name="Null", namespace="##targetNamespace")
  !resolve val TNullExpression null;

  @ExtendedMetaData(kind="element", name="NavigationPropertyPath", namespace="##targetNamespace")
  !resolve val TPathExpression navigationPropertyPath;

  @ExtendedMetaData(kind="element", name="Path", namespace="##targetNamespace")
  !resolve val TPathExpression path;

  @ExtendedMetaData(kind="element", name="PropertyPath", namespace="##targetNamespace")
  !resolve val TPathExpression propertyPath;

  @ExtendedMetaData(kind="element", name="Record", namespace="##targetNamespace")
  !resolve val TRecordExpression record;

  @ExtendedMetaData(kind="element", name="UrlRef", namespace="##targetNamespace")
  !resolve val TOneChildExpression urlRef;

  @ExtendedMetaData(kind="attribute", name="AnnotationPath")
  attr TPathWithTermSegments annotationPath1;

  @ExtendedMetaData(kind="attribute", name="Binary")
  attr Binary binary1;

  @ExtendedMetaData(kind="attribute", name="Bool")
  unsettable attr Boolean bool1;

  @ExtendedMetaData(kind="attribute", name="Date")
  attr Date date1;

  @ExtendedMetaData(kind="attribute", name="DateTimeOffset")
  attr DateTimeStamp dateTimeOffset1;

  @ExtendedMetaData(kind="attribute", name="Decimal")
  attr type.Decimal decimal1;

  @ExtendedMetaData(kind="attribute", name="Duration")
  attr DayTimeDuration duration1;

  @ExtendedMetaData(kind="attribute", name="EnumMember")
  attr TEnumMemberList enumMember1;

  @ExtendedMetaData(kind="attribute", name="Float")
  unsettable attr type.Double float1;

  @ExtendedMetaData(kind="attribute", name="Guid")
  attr TGuidLiteral guid1;

  @ExtendedMetaData(kind="attribute", name="Int")
  attr type.Integer int1;

  @ExtendedMetaData(kind="attribute", name="Name")
  attr TSimpleIdentifier[1] name;

  @ExtendedMetaData(kind="attribute", name="NavigationPropertyPath")
  attr TPathWithTermSegments navigationPropertyPath1;

  @ExtendedMetaData(kind="attribute", name="Path")
  attr TPathWithTermSegments path1;

  @ExtendedMetaData(kind="attribute", name="PropertyPath")
  attr TPathWithTermSegments propertyPath1;

  @ExtendedMetaData(kind="attribute", name="String")
  attr type.String string1;

  @ExtendedMetaData(kind="attribute", name="TimeOfDay")
  attr Time timeOfDay1;

  @ExtendedMetaData(kind="attribute", name="UrlRef")
  attr type.AnyURI urlRef1;
}

@ExtendedMetaData(name="TLabeledElementReferenceExpression", kind="simple")
class TLabeledElementReferenceExpression {

  @ExtendedMetaData(name=":0", kind="simple")
  attr TQualifiedName value;
}

@ExtendedMetaData(name="TMax")
enum TMax {
  max = 0;
}

@ExtendedMetaData(name="TMaxLengthFacet", memberTypes="TMax http://www.eclipse.org/emf/2003/XMLType#nonNegativeInteger")
datatype TMaxLengthFacet : java.lang.Object;

@ExtendedMetaData(name="TMax:Object", baseType="TMax")
datatype TMaxObject : org.eclipse.emf.common.util.Enumerator;

@ExtendedMetaData(name="TNamespaceName", baseType="http://www.eclipse.org/emf/2003/XMLType#NCName", maxLength="511", pattern="[\p{L}\p{Nl}_][\p{L}\p{Nl}\p{Nd}\p{Mn}\p{Mc}\p{Pc}\p{Cf}]{0,}(\.[\p{L}\p{Nl}_][\p{L}\p{Nl}\p{Nd}\p{Mn}\p{Mc}\p{Pc}\p{Cf}]{0,}){0,}")
datatype TNamespaceName : java.lang.String;

@ExtendedMetaData(name="TNavigationProperty", kind="elementOnly")
class TNavigationProperty {

  @ExtendedMetaData(kind="group", name="group:0")
  !unique attr ecore.EFeatureMapEntry[*] Group;

  @ExtendedMetaData(kind="element", name="ReferentialConstraint", namespace="##targetNamespace", group="#group:0")
  volatile transient derived !resolve val TReferentialConstraint[*] ReferentialConstraint;

  @ExtendedMetaData(kind="element", name="OnDelete", namespace="##targetNamespace", group="#group:0")
  volatile transient derived !resolve val TOnDelete[*] OnDelete;

  @ExtendedMetaData(kind="element", name="Annotation", namespace="##targetNamespace", group="#group:0")
  volatile transient derived !resolve val AnnotationType[*] Annotation;

  @ExtendedMetaData(kind="attribute", name="ContainsTarget")
  unsettable attr type.Boolean ContainsTarget;

  @ExtendedMetaData(kind="attribute", name="Name")
  attr TSimpleIdentifier[1] Name;

  @ExtendedMetaData(kind="attribute", name="Nullable")
  unsettable attr type.Boolean Nullable;

  @ExtendedMetaData(kind="attribute", name="Partner")
  attr TPath Partner;

  @ExtendedMetaData(kind="attribute", name="Type")
  attr TTypeName[1] Type;
}

@ExtendedMetaData(name="TNavigationPropertyBinding", kind="empty")
class TNavigationPropertyBinding {

  @ExtendedMetaData(kind="attribute", name="Path")
  attr TPath[1] Path;

  @ExtendedMetaData(kind="attribute", name="Target")
  attr TPath[1] Target;
}

@ExtendedMetaData(name="TNullExpression", kind="elementOnly")
class TNullExpression {

  @ExtendedMetaData(kind="element", name="Annotation", namespace="##targetNamespace")
  !resolve val AnnotationType[*] Annotation;
}

@ExtendedMetaData(name="TOnDelete", kind="elementOnly")
class TOnDelete {

  @ExtendedMetaData(kind="element", name="Annotation", namespace="##targetNamespace")
  !resolve val AnnotationType[*] Annotation;

  @ExtendedMetaData(kind="attribute", name="Action")
  unsettable attr TOnDeleteAction[1] Action;
}

@ExtendedMetaData(name="TOnDeleteAction")
enum TOnDeleteAction {
  Cascade = 0;
  None = 1;
  SetDefault = 2;
  SetNull = 3;
}

@ExtendedMetaData(name="TOnDeleteAction:Object", baseType="TOnDeleteAction")
datatype TOnDeleteActionObject : org.eclipse.emf.common.util.Enumerator;

@ExtendedMetaData(name="TOneChildExpression", kind="elementOnly")
class TOneChildExpression {

  @ExtendedMetaData(kind="element", name="Annotation", namespace="##targetNamespace")
  !resolve val AnnotationType[*] annotation;

  @ExtendedMetaData(kind="element", name="Binary", namespace="##targetNamespace")
  !resolve val TBinaryConstantExpression binary;

  @ExtendedMetaData(kind="element", name="Bool", namespace="##targetNamespace")
  !resolve val TBoolConstantExpression bool;

  @ExtendedMetaData(kind="element", name="Date", namespace="##targetNamespace")
  !resolve val TDateConstantExpression date;

  @ExtendedMetaData(kind="element", name="DateTimeOffset", namespace="##targetNamespace")
  !resolve val TDateTimeOffsetConstantExpression dateTimeOffset;

  @ExtendedMetaData(kind="element", name="Decimal", namespace="##targetNamespace")
  !resolve val TDecimalConstantExpression decimal;

  @ExtendedMetaData(kind="element", name="Duration", namespace="##targetNamespace")
  !resolve val TDurationConstantExpression duration;

  @ExtendedMetaData(kind="element", name="EnumMember", namespace="##targetNamespace")
  attr TEnumMemberList enumMember;

  @ExtendedMetaData(kind="element", name="Float", namespace="##targetNamespace")
  !resolve val TFloatConstantExpression float;

  @ExtendedMetaData(kind="element", name="Guid", namespace="##targetNamespace")
  !resolve val TGuidConstantExpression guid;

  @ExtendedMetaData(kind="element", name="Int", namespace="##targetNamespace")
  !resolve val TIntConstantExpression int;

  @ExtendedMetaData(kind="element", name="String", namespace="##targetNamespace")
  !resolve val TStringConstantExpression string;

  @ExtendedMetaData(kind="element", name="TimeOfDay", namespace="##targetNamespace")
  !resolve val TTimeOfDayConstantExpression timeOfDay;

  @ExtendedMetaData(kind="element", name="AnnotationPath", namespace="##targetNamespace")
  !resolve val TPathExpression annotationPath;

  @ExtendedMetaData(kind="element", name="Apply", namespace="##targetNamespace")
  !resolve val TApplyExpression apply;

  @ExtendedMetaData(kind="element", name="Cast", namespace="##targetNamespace")
  !resolve val TCastOrIsOfExpression cast;

  @ExtendedMetaData(kind="element", name="Collection", namespace="##targetNamespace")
  !resolve val TCollectionExpression collection;

  @ExtendedMetaData(kind="element", name="If", namespace="##targetNamespace")
  !resolve val TIfExpression if;

  @ExtendedMetaData(kind="element", name="Eq", namespace="##targetNamespace")
  !resolve val TTwoChildrenExpression eq;

  @ExtendedMetaData(kind="element", name="Ne", namespace="##targetNamespace")
  !resolve val TTwoChildrenExpression ne;

  @ExtendedMetaData(kind="element", name="Ge", namespace="##targetNamespace")
  !resolve val TTwoChildrenExpression ge;

  @ExtendedMetaData(kind="element", name="Gt", namespace="##targetNamespace")
  !resolve val TTwoChildrenExpression gt;

  @ExtendedMetaData(kind="element", name="Le", namespace="##targetNamespace")
  !resolve val TTwoChildrenExpression le;

  @ExtendedMetaData(kind="element", name="Lt", namespace="##targetNamespace")
  !resolve val TTwoChildrenExpression lt;

  @ExtendedMetaData(kind="element", name="And", namespace="##targetNamespace")
  !resolve val TTwoChildrenExpression and;

  @ExtendedMetaData(kind="element", name="Or", namespace="##targetNamespace")
  !resolve val TTwoChildrenExpression or;

  @ExtendedMetaData(kind="element", name="Not", namespace="##targetNamespace")
  !resolve val TOneChildExpression not;

  @ExtendedMetaData(kind="element", name="IsOf", namespace="##targetNamespace")
  !resolve val TCastOrIsOfExpression isOf;

  @ExtendedMetaData(kind="element", name="LabeledElement", namespace="##targetNamespace")
  !resolve val TLabeledElementExpression labeledElement;

  @ExtendedMetaData(kind="element", name="LabeledElementReference", namespace="##targetNamespace")
  !resolve val TLabeledElementReferenceExpression labeledElementReference;

  @ExtendedMetaData(kind="element", name="Null", namespace="##targetNamespace")
  !resolve val TNullExpression null;

  @ExtendedMetaData(kind="element", name="NavigationPropertyPath", namespace="##targetNamespace")
  !resolve val TPathExpression navigationPropertyPath;

  @ExtendedMetaData(kind="element", name="Path", namespace="##targetNamespace")
  !resolve val TPathExpression path;

  @ExtendedMetaData(kind="element", name="PropertyPath", namespace="##targetNamespace")
  !resolve val TPathExpression propertyPath;

  @ExtendedMetaData(kind="element", name="Record", namespace="##targetNamespace")
  !resolve val TRecordExpression record;

  @ExtendedMetaData(kind="element", name="UrlRef", namespace="##targetNamespace")
  !resolve val TOneChildExpression urlRef;
}

@ExtendedMetaData(name="TPath", baseType="http://www.eclipse.org/emf/2003/XMLType#string", pattern="[\p{L}\p{Nl}_][\p{L}\p{Nl}\p{Nd}\p{Mn}\p{Mc}\p{Pc}\p{Cf}]{0,}([\./][\p{L}\p{Nl}_][\p{L}\p{Nl}\p{Nd}\p{Mn}\p{Mc}\p{Pc}\p{Cf}]{0,}){0,}")
datatype TPath : java.lang.String;

@ExtendedMetaData(name="TPathExpression", kind="simple")
class TPathExpression {

  @ExtendedMetaData(name=":0", kind="simple")
  attr TPathWithTermSegments value;
}

@ExtendedMetaData(name="TPathWithTermSegments", baseType="http://www.eclipse.org/emf/2003/XMLType#string", pattern="@?[\p{L}\p{Nl}_][\p{L}\p{Nl}\p{Nd}\p{Mn}\p{Mc}\p{Pc}\p{Cf}]{0,}(([\./#@]|/@)[\p{L}\p{Nl}_][\p{L}\p{Nl}\p{Nd}\p{Mn}\p{Mc}\p{Pc}\p{Cf}]{0,}){0,}(/$count)?")
datatype TPathWithTermSegments : java.lang.String;

@ExtendedMetaData(name="TPrecisionFacet", baseType="http://www.eclipse.org/emf/2003/XMLType#nonNegativeInteger")
datatype TPrecisionFacet : java.math.BigInteger;

@ExtendedMetaData(name="TPrimitiveType", memberTypes="TPrimitiveType_._member_._0 TPrimitiveType_._member_._1")
datatype TPrimitiveType : java.lang.Object;

@ExtendedMetaData(name="TPrimitiveType_._member_._0")
enum TPrimitiveTypeMember0 {
  EdmBinary = 0;
  EdmBoolean = 1;
  EdmByte = 2;
  EdmDate = 3;
  EdmDateTimeOffset = 4;
  EdmDuration = 5;
  EdmTimeOfDay = 6;
  EdmDecimal = 7;
  EdmDouble = 8;
  EdmSingle = 9;
  EdmGeographyPoint = 10;
  EdmGeographyLineString = 11;
  EdmGeographyPolygon = 12;
  EdmGeographyMultiPoint = 13;
  EdmGeographyMultiLineString = 14;
  EdmGeographyMultiPolygon = 15;
  EdmGeographyCollection = 16;
  EdmGeometryPoint = 17;
  EdmGeometryLineString = 18;
  EdmGeometryPolygon = 19;
  EdmGeometryMultiPoint = 20;
  EdmGeometryMultiLineString = 21;
  EdmGeometryMultiPolygon = 22;
  EdmGeometryCollection = 23;
  EdmGuid = 24;
  EdmInt16 = 25;
  EdmInt32 = 26;
  EdmInt64 = 27;
  EdmString = 28;
  EdmSByte = 29;
  CollectionEdmBinary = 30;
  CollectionEdmBoolean = 31;
  CollectionEdmByte = 32;
  CollectionEdmDate = 33;
  CollectionEdmDateTimeOffset = 34;
  CollectionEdmDuration = 35;
  CollectionEdmTimeOfDay = 36;
  CollectionEdmDecimal = 37;
  CollectionEdmDouble = 38;
  CollectionEdmSingle = 39;
  CollectionEdmGeographyPoint = 40;
  CollectionEdmGeographyLineString = 41;
  CollectionEdmGeographyPolygon = 42;
  CollectionEdmGeographyMultiPoint = 43;
  CollectionEdmGeographyMultiLineString = 44;
  CollectionEdmGeographyMultiPolygon = 45;
  CollectionEdmGeographyCollection = 46;
  CollectionEdmGeometryPoint = 47;
  CollectionEdmGeometryLineString = 48;
  CollectionEdmGeometryPolygon = 49;
  CollectionEdmGeometryMultiPoint = 50;
  CollectionEdmGeometryMultiLineString = 51;
  CollectionEdmGeometryMultiPolygon = 52;
  CollectionEdmGeometryCollection = 53;
  CollectionEdmGuid = 54;
  CollectionEdmInt16 = 55;
  CollectionEdmInt32 = 56;
  CollectionEdmInt64 = 57;
  CollectionEdmString = 58;
  CollectionEdmSByte = 59;
}

@ExtendedMetaData(name="TPrimitiveType_._member_._0:Object", baseType="TPrimitiveType_._member_._0")
datatype TPrimitiveTypeMember0Object : org.eclipse.emf.common.util.Enumerator;

@ExtendedMetaData(name="TPrimitiveType_._member_._1", baseType="http://www.eclipse.org/emf/2003/XMLType#token", pattern="Edm\..+")
datatype TPrimitiveTypeMember1 : java.lang.String;

@ExtendedMetaData(name="TProperty", kind="elementOnly")
class TProperty {

  @ExtendedMetaData(kind="element", name="Annotation", namespace="##targetNamespace")
  !resolve val AnnotationType[*] annotation;

  @ExtendedMetaData(kind="attribute", name="DefaultValue")
  attr type.String DefaultValue;

  @ExtendedMetaData(kind="attribute", name="MaxLength")
  attr TMaxLengthFacet MaxLength;

  @ExtendedMetaData(kind="attribute", name="Name")
  attr TSimpleIdentifier[1] Name;

  @ExtendedMetaData(kind="attribute", name="Nullable")
  unsettable attr type.Boolean Nullable = "true";

  @ExtendedMetaData(kind="attribute", name="Precision")
  attr TPrecisionFacet Precision;

  @ExtendedMetaData(kind="attribute", name="Scale")
  attr TScaleFacet Scale;

  @ExtendedMetaData(kind="attribute", name="SRID")
  attr TSridFacet SRID;

  @ExtendedMetaData(kind="attribute", name="Type")
  attr TTypeName[1] Type;

  @ExtendedMetaData(kind="attribute", name="Unicode")
  unsettable attr TUnicodeFacet Unicode;
}

@ExtendedMetaData(name="TPropertyRef", kind="empty")
class TPropertyRef {

  @ExtendedMetaData(kind="attribute", name="Alias")
  attr TSimpleIdentifier Alias;

  @ExtendedMetaData(kind="attribute", name="Name")
  attr TPath[1] Name;
}

@ExtendedMetaData(name="TPropertyValue", kind="elementOnly")
class TPropertyValue {

  @ExtendedMetaData(kind="element", name="Annotation", namespace="##targetNamespace")
  !resolve val AnnotationType[*] annotation;

  @ExtendedMetaData(kind="element", name="Binary", namespace="##targetNamespace")
  !resolve val TBinaryConstantExpression binary;

  @ExtendedMetaData(kind="element", name="Bool", namespace="##targetNamespace")
  !resolve val TBoolConstantExpression bool;

  @ExtendedMetaData(kind="element", name="Date", namespace="##targetNamespace")
  !resolve val TDateConstantExpression date;

  @ExtendedMetaData(kind="element", name="DateTimeOffset", namespace="##targetNamespace")
  !resolve val TDateTimeOffsetConstantExpression dateTimeOffset;

  @ExtendedMetaData(kind="element", name="Decimal", namespace="##targetNamespace")
  !resolve val TDecimalConstantExpression decimal;

  @ExtendedMetaData(kind="element", name="Duration", namespace="##targetNamespace")
  !resolve val TDurationConstantExpression duration;

  @ExtendedMetaData(kind="element", name="EnumMember", namespace="##targetNamespace")
  attr TEnumMemberList enumMember;

  @ExtendedMetaData(kind="element", name="Float", namespace="##targetNamespace")
  !resolve val TFloatConstantExpression float;

  @ExtendedMetaData(kind="element", name="Guid", namespace="##targetNamespace")
  !resolve val TGuidConstantExpression guid;

  @ExtendedMetaData(kind="element", name="Int", namespace="##targetNamespace")
  !resolve val TIntConstantExpression int;

  @ExtendedMetaData(kind="element", name="String", namespace="##targetNamespace")
  !resolve val TStringConstantExpression string;

  @ExtendedMetaData(kind="element", name="TimeOfDay", namespace="##targetNamespace")
  !resolve val TTimeOfDayConstantExpression timeOfDay;

  @ExtendedMetaData(kind="element", name="AnnotationPath", namespace="##targetNamespace")
  !resolve val TPathExpression annotationPath;

  @ExtendedMetaData(kind="element", name="Apply", namespace="##targetNamespace")
  !resolve val TApplyExpression apply;

  @ExtendedMetaData(kind="element", name="Cast", namespace="##targetNamespace")
  !resolve val TCastOrIsOfExpression cast;

  @ExtendedMetaData(kind="element", name="Collection", namespace="##targetNamespace")
  !resolve val TCollectionExpression collection;

  @ExtendedMetaData(kind="element", name="If", namespace="##targetNamespace")
  !resolve val TIfExpression if;

  @ExtendedMetaData(kind="element", name="Eq", namespace="##targetNamespace")
  !resolve val TTwoChildrenExpression eq;

  @ExtendedMetaData(kind="element", name="Ne", namespace="##targetNamespace")
  !resolve val TTwoChildrenExpression ne;

  @ExtendedMetaData(kind="element", name="Ge", namespace="##targetNamespace")
  !resolve val TTwoChildrenExpression ge;

  @ExtendedMetaData(kind="element", name="Gt", namespace="##targetNamespace")
  !resolve val TTwoChildrenExpression gt;

  @ExtendedMetaData(kind="element", name="Le", namespace="##targetNamespace")
  !resolve val TTwoChildrenExpression le;

  @ExtendedMetaData(kind="element", name="Lt", namespace="##targetNamespace")
  !resolve val TTwoChildrenExpression lt;

  @ExtendedMetaData(kind="element", name="And", namespace="##targetNamespace")
  !resolve val TTwoChildrenExpression and;

  @ExtendedMetaData(kind="element", name="Or", namespace="##targetNamespace")
  !resolve val TTwoChildrenExpression or;

  @ExtendedMetaData(kind="element", name="Not", namespace="##targetNamespace")
  !resolve val TOneChildExpression not;

  @ExtendedMetaData(kind="element", name="IsOf", namespace="##targetNamespace")
  !resolve val TCastOrIsOfExpression isOf;

  @ExtendedMetaData(kind="element", name="LabeledElement", namespace="##targetNamespace")
  !resolve val TLabeledElementExpression labeledElement;

  @ExtendedMetaData(kind="element", name="LabeledElementReference", namespace="##targetNamespace")
  !resolve val TLabeledElementReferenceExpression labeledElementReference;

  @ExtendedMetaData(kind="element", name="Null", namespace="##targetNamespace")
  !resolve val TNullExpression null;

  @ExtendedMetaData(kind="element", name="NavigationPropertyPath", namespace="##targetNamespace")
  !resolve val TPathExpression navigationPropertyPath;

  @ExtendedMetaData(kind="element", name="Path", namespace="##targetNamespace")
  !resolve val TPathExpression path;

  @ExtendedMetaData(kind="element", name="PropertyPath", namespace="##targetNamespace")
  !resolve val TPathExpression propertyPath;

  @ExtendedMetaData(kind="element", name="Record", namespace="##targetNamespace")
  !resolve val TRecordExpression record;

  @ExtendedMetaData(kind="element", name="UrlRef", namespace="##targetNamespace")
  !resolve val TOneChildExpression urlRef;

  @ExtendedMetaData(kind="attribute", name="AnnotationPath")
  attr TPathWithTermSegments annotationPath1;

  @ExtendedMetaData(kind="attribute", name="Binary")
  attr Binary binary1;

  @ExtendedMetaData(kind="attribute", name="Bool")
  unsettable attr Boolean bool1;

  @ExtendedMetaData(kind="attribute", name="Date")
  attr Date date1;

  @ExtendedMetaData(kind="attribute", name="DateTimeOffset")
  attr DateTimeStamp dateTimeOffset1;

  @ExtendedMetaData(kind="attribute", name="Decimal")
  attr type.Decimal decimal1;

  @ExtendedMetaData(kind="attribute", name="Duration")
  attr DayTimeDuration duration1;

  @ExtendedMetaData(kind="attribute", name="EnumMember")
  attr TEnumMemberList enumMember1;

  @ExtendedMetaData(kind="attribute", name="Float")
  unsettable attr type.Double float1;

  @ExtendedMetaData(kind="attribute", name="Guid")
  attr TGuidLiteral guid1;

  @ExtendedMetaData(kind="attribute", name="Int")
  attr type.Integer int1;

  @ExtendedMetaData(kind="attribute", name="NavigationPropertyPath")
  attr TPathWithTermSegments navigationPropertyPath1;

  @ExtendedMetaData(kind="attribute", name="Path")
  attr TPathWithTermSegments path1;

  @ExtendedMetaData(kind="attribute", name="Property")
  attr TSimpleIdentifier[1] property;

  @ExtendedMetaData(kind="attribute", name="PropertyPath")
  attr TPathWithTermSegments propertyPath1;

  @ExtendedMetaData(kind="attribute", name="String")
  attr type.String string1;

  @ExtendedMetaData(kind="attribute", name="TimeOfDay")
  attr Time timeOfDay1;

  @ExtendedMetaData(kind="attribute", name="UrlRef")
  attr type.AnyURI urlRef1;
}

@ExtendedMetaData(name="TQualifiedName", baseType="http://www.eclipse.org/emf/2003/XMLType#NCName", pattern="[\p{L}\p{Nl}_][\p{L}\p{Nl}\p{Nd}\p{Mn}\p{Mc}\p{Pc}\p{Cf}]{0,}(\.[\p{L}\p{Nl}_][\p{L}\p{Nl}\p{Nd}\p{Mn}\p{Mc}\p{Pc}\p{Cf}]{0,}){1,}")
datatype TQualifiedName : java.lang.String;

@ExtendedMetaData(name="TRecordExpression", kind="elementOnly")
class TRecordExpression {

  @ExtendedMetaData(kind="group", name="group:0")
  !unique attr ecore.EFeatureMapEntry[*] group;

  @ExtendedMetaData(kind="element", name="PropertyValue", namespace="##targetNamespace", group="#group:0")
  volatile transient derived !resolve val TPropertyValue[*] propertyValue;

  @ExtendedMetaData(kind="element", name="Annotation", namespace="##targetNamespace", group="#group:0")
  volatile transient derived !resolve val AnnotationType[*] annotation;

  @ExtendedMetaData(kind="attribute", name="Type")
  attr TQualifiedName type;
}

@ExtendedMetaData(name="TReferentialConstraint", kind="elementOnly")
class TReferentialConstraint {

  @ExtendedMetaData(kind="element", name="Annotation", namespace="##targetNamespace")
  !resolve val AnnotationType[*] Annotation;

  @ExtendedMetaData(kind="attribute", name="Property")
  attr TPath[1] Property;

  @ExtendedMetaData(kind="attribute", name="ReferencedProperty")
  attr TPath[1] ReferencedProperty;
}

@ExtendedMetaData(name="TScaleFacet", memberTypes="TVariable http://www.eclipse.org/emf/2003/XMLType#nonNegativeInteger")
datatype TScaleFacet : java.lang.Object;

@ExtendedMetaData(name="TSimpleIdentifier", baseType="http://www.eclipse.org/emf/2003/XMLType#NCName", maxLength="128", pattern="[\p{L}\p{Nl}_][\p{L}\p{Nl}\p{Nd}\p{Mn}\p{Mc}\p{Pc}\p{Cf}]{0,}")
datatype TSimpleIdentifier : java.lang.String;

@ExtendedMetaData(name="TSingleton", kind="elementOnly")
class TSingleton {

  @ExtendedMetaData(kind="group", name="group:0")
  !unique attr ecore.EFeatureMapEntry[*] Group;

  @ExtendedMetaData(kind="element", name="NavigationPropertyBinding", namespace="##targetNamespace", group="#group:0")
  volatile transient derived !resolve val TNavigationPropertyBinding[*] NavigationPropertyBinding;

  @ExtendedMetaData(kind="element", name="Annotation", namespace="##targetNamespace", group="#group:0")
  volatile transient derived !resolve val AnnotationType[*] Annotation;

  @ExtendedMetaData(kind="attribute", name="Name")
  attr TSimpleIdentifier[1] Name;

  @ExtendedMetaData(kind="attribute", name="Type")
  attr TQualifiedName[1] Type;
}

@ExtendedMetaData(name="TSridFacet", memberTypes="TVariable http://www.eclipse.org/emf/2003/XMLType#nonNegativeInteger")
datatype TSridFacet : java.lang.Object;

@ExtendedMetaData(name="TStringConstantExpression", kind="simple")
class TStringConstantExpression {

  @ExtendedMetaData(name=":0", kind="simple")
  attr type.String value;
}

@ExtendedMetaData(name="TTerm", kind="elementOnly")
class TTerm {

  @ExtendedMetaData(kind="element", name="Annotation", namespace="##targetNamespace")
  !resolve val AnnotationType[*] Annotation;

  @ExtendedMetaData(kind="attribute", name="AppliesTo")
  attr TAppliesTo AppliesTo;

  @ExtendedMetaData(kind="attribute", name="BaseTerm")
  attr TQualifiedName BaseTerm;

  @ExtendedMetaData(kind="attribute", name="DefaultValue")
  attr type.String DefaultValue;

  @ExtendedMetaData(kind="attribute", name="MaxLength")
  attr TMaxLengthFacet MaxLength;

  @ExtendedMetaData(kind="attribute", name="Name")
  attr TSimpleIdentifier[1] Name;

  @ExtendedMetaData(kind="attribute", name="Nullable")
  unsettable attr type.Boolean Nullable;

  @ExtendedMetaData(kind="attribute", name="Precision")
  attr TPrecisionFacet Precision;

  @ExtendedMetaData(kind="attribute", name="Scale")
  attr TScaleFacet Scale;

  @ExtendedMetaData(kind="attribute", name="SRID")
  attr TSridFacet SRID;

  @ExtendedMetaData(kind="attribute", name="Type")
  attr TTypeName[1] Type;
}

@ExtendedMetaData(name="TTimeOfDayConstantExpression", kind="simple")
class TTimeOfDayConstantExpression {

  @ExtendedMetaData(name=":0", kind="simple")
  attr Time value;
}

@ExtendedMetaData(name="TTwoChildrenExpression", kind="elementOnly")
class TTwoChildrenExpression {

  @ExtendedMetaData(kind="element", name="Annotation", namespace="##targetNamespace")
  !resolve val AnnotationType[*] annotation;

  @ExtendedMetaData(kind="group", name="GExpression:1")
  !unique attr ecore.EFeatureMapEntry[*] gExpression;

  @ExtendedMetaData(kind="element", name="Binary", namespace="##targetNamespace", group="#GExpression:1")
  volatile transient derived !resolve val TBinaryConstantExpression[0..2] binary;

  @ExtendedMetaData(kind="element", name="Bool", namespace="##targetNamespace", group="#GExpression:1")
  volatile transient derived !resolve val TBoolConstantExpression[0..2] bool;

  @ExtendedMetaData(kind="element", name="Date", namespace="##targetNamespace", group="#GExpression:1")
  volatile transient derived !resolve val TDateConstantExpression[0..2] date;

  @ExtendedMetaData(kind="element", name="DateTimeOffset", namespace="##targetNamespace", group="#GExpression:1")
  volatile transient derived !resolve val TDateTimeOffsetConstantExpression[0..2] dateTimeOffset;

  @ExtendedMetaData(kind="element", name="Decimal", namespace="##targetNamespace", group="#GExpression:1")
  volatile transient derived !resolve val TDecimalConstantExpression[0..2] decimal;

  @ExtendedMetaData(kind="element", name="Duration", namespace="##targetNamespace", group="#GExpression:1")
  volatile transient derived !resolve val TDurationConstantExpression[0..2] duration;

  @ExtendedMetaData(kind="element", name="EnumMember", namespace="##targetNamespace", group="#GExpression:1")
  !unique volatile transient derived attr TEnumMemberList[0..2] enumMember;

  @ExtendedMetaData(kind="element", name="Float", namespace="##targetNamespace", group="#GExpression:1")
  volatile transient derived !resolve val TFloatConstantExpression[0..2] float;

  @ExtendedMetaData(kind="element", name="Guid", namespace="##targetNamespace", group="#GExpression:1")
  volatile transient derived !resolve val TGuidConstantExpression[0..2] guid;

  @ExtendedMetaData(kind="element", name="Int", namespace="##targetNamespace", group="#GExpression:1")
  volatile transient derived !resolve val TIntConstantExpression[0..2] int;

  @ExtendedMetaData(kind="element", name="String", namespace="##targetNamespace", group="#GExpression:1")
  volatile transient derived !resolve val TStringConstantExpression[0..2] string;

  @ExtendedMetaData(kind="element", name="TimeOfDay", namespace="##targetNamespace", group="#GExpression:1")
  volatile transient derived !resolve val TTimeOfDayConstantExpression[0..2] timeOfDay;

  @ExtendedMetaData(kind="element", name="AnnotationPath", namespace="##targetNamespace", group="#GExpression:1")
  volatile transient derived !resolve val TPathExpression[0..2] annotationPath;

  @ExtendedMetaData(kind="element", name="Apply", namespace="##targetNamespace", group="#GExpression:1")
  volatile transient derived !resolve val TApplyExpression[0..2] apply;

  @ExtendedMetaData(kind="element", name="Cast", namespace="##targetNamespace", group="#GExpression:1")
  volatile transient derived !resolve val TCastOrIsOfExpression[0..2] cast;

  @ExtendedMetaData(kind="element", name="Collection", namespace="##targetNamespace", group="#GExpression:1")
  volatile transient derived !resolve val TCollectionExpression[0..2] collection;

  @ExtendedMetaData(kind="element", name="If", namespace="##targetNamespace", group="#GExpression:1")
  volatile transient derived !resolve val TIfExpression[0..2] if;

  @ExtendedMetaData(kind="element", name="Eq", namespace="##targetNamespace", group="#GExpression:1")
  volatile transient derived !resolve val TTwoChildrenExpression[0..2] eq;

  @ExtendedMetaData(kind="element", name="Ne", namespace="##targetNamespace", group="#GExpression:1")
  volatile transient derived !resolve val TTwoChildrenExpression[0..2] ne;

  @ExtendedMetaData(kind="element", name="Ge", namespace="##targetNamespace", group="#GExpression:1")
  volatile transient derived !resolve val TTwoChildrenExpression[0..2] ge;

  @ExtendedMetaData(kind="element", name="Gt", namespace="##targetNamespace", group="#GExpression:1")
  volatile transient derived !resolve val TTwoChildrenExpression[0..2] gt;

  @ExtendedMetaData(kind="element", name="Le", namespace="##targetNamespace", group="#GExpression:1")
  volatile transient derived !resolve val TTwoChildrenExpression[0..2] le;

  @ExtendedMetaData(kind="element", name="Lt", namespace="##targetNamespace", group="#GExpression:1")
  volatile transient derived !resolve val TTwoChildrenExpression[0..2] lt;

  @ExtendedMetaData(kind="element", name="And", namespace="##targetNamespace", group="#GExpression:1")
  volatile transient derived !resolve val TTwoChildrenExpression[0..2] and;

  @ExtendedMetaData(kind="element", name="Or", namespace="##targetNamespace", group="#GExpression:1")
  volatile transient derived !resolve val TTwoChildrenExpression[0..2] or;

  @ExtendedMetaData(kind="element", name="Not", namespace="##targetNamespace", group="#GExpression:1")
  volatile transient derived !resolve val TOneChildExpression[0..2] not;

  @ExtendedMetaData(kind="element", name="IsOf", namespace="##targetNamespace", group="#GExpression:1")
  volatile transient derived !resolve val TCastOrIsOfExpression[0..2] isOf;

  @ExtendedMetaData(kind="element", name="LabeledElement", namespace="##targetNamespace", group="#GExpression:1")
  volatile transient derived !resolve val TLabeledElementExpression[0..2] labeledElement;

  @ExtendedMetaData(kind="element", name="LabeledElementReference", namespace="##targetNamespace", group="#GExpression:1")
  volatile transient derived !resolve val TLabeledElementReferenceExpression[0..2] labeledElementReference;

  @ExtendedMetaData(kind="element", name="Null", namespace="##targetNamespace", group="#GExpression:1")
  volatile transient derived !resolve val TNullExpression[0..2] null;

  @ExtendedMetaData(kind="element", name="NavigationPropertyPath", namespace="##targetNamespace", group="#GExpression:1")
  volatile transient derived !resolve val TPathExpression[0..2] navigationPropertyPath;

  @ExtendedMetaData(kind="element", name="Path", namespace="##targetNamespace", group="#GExpression:1")
  volatile transient derived !resolve val TPathExpression[0..2] path;

  @ExtendedMetaData(kind="element", name="PropertyPath", namespace="##targetNamespace", group="#GExpression:1")
  volatile transient derived !resolve val TPathExpression[0..2] propertyPath;

  @ExtendedMetaData(kind="element", name="Record", namespace="##targetNamespace", group="#GExpression:1")
  volatile transient derived !resolve val TRecordExpression[0..2] record;

  @ExtendedMetaData(kind="element", name="UrlRef", namespace="##targetNamespace", group="#GExpression:1")
  volatile transient derived !resolve val TOneChildExpression[0..2] urlRef;
}

@ExtendedMetaData(name="TTypeDefinition", kind="elementOnly")
class TTypeDefinition {

  @ExtendedMetaData(kind="element", name="Annotation", namespace="##targetNamespace")
  !resolve val AnnotationType[*] Annotation;

  @ExtendedMetaData(kind="attribute", name="MaxLength")
  attr TMaxLengthFacet MaxLength;

  @ExtendedMetaData(kind="attribute", name="Name")
  attr TSimpleIdentifier[1] Name;

  @ExtendedMetaData(kind="attribute", name="Precision")
  attr TPrecisionFacet Precision;

  @ExtendedMetaData(kind="attribute", name="Scale")
  attr TScaleFacet Scale;

  @ExtendedMetaData(kind="attribute", name="SRID")
  attr TSridFacet SRID;

  @ExtendedMetaData(kind="attribute", name="UnderlyingType")
  attr TPrimitiveType[1] UnderlyingType;

  @ExtendedMetaData(kind="attribute", name="Unicode")
  unsettable attr TUnicodeFacet Unicode;
}

@ExtendedMetaData(name="TTypeName", memberTypes="TPrimitiveType TAbstractType TQualifiedName TTypeName_._member_._3")
datatype TTypeName : java.lang.Object;

@ExtendedMetaData(name="TTypeName_._member_._3", baseType="http://www.eclipse.org/emf/2003/XMLType#token", pattern="Collection\([\p{L}\p{Nl}_][\p{L}\p{Nl}\p{Nd}\p{Mn}\p{Mc}\p{Pc}\p{Cf}]{0,}(\.[\p{L}\p{Nl}_][\p{L}\p{Nl}\p{Nd}\p{Mn}\p{Mc}\p{Pc}\p{Cf}]{0,}){1,}\)")
datatype TTypeNameMember3 : java.lang.String;

@ExtendedMetaData(name="TUnicodeFacet", baseType="http://www.eclipse.org/emf/2003/XMLType#boolean")
datatype TUnicodeFacet : boolean;

@ExtendedMetaData(name="TUnicodeFacet:Object", baseType="TUnicodeFacet")
datatype TUnicodeFacetObject : java.lang.Boolean;

@ExtendedMetaData(name="TVariable")
enum TVariable {
  variable = 0;
}

@ExtendedMetaData(name="TVariable:Object", baseType="TVariable")
datatype TVariableObject : org.eclipse.emf.common.util.Enumerator;

