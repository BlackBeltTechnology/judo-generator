@cached
operation RDBMS!RdbmsView updatableParentAliases (): Collection {
	return self.tables.select(t | t.table.parent.isUndefined() and t <> self.primaryTable and t.table.allInheritedIdentifier().size() > 0);
}

@cached
operation RDBMS!RdbmsView updatableAliasFields (tableAlias : RDBMS!RdbmsTableAlias) : Collection {
	return self.fields.select(f | f.isKindOf(RDBMS!RdbmsViewAliasField) and f.`alias` == tableAlias);
}

@cached
operation RDBMS!RdbmsView updatableAliasFieldsWithoutPrimaryKeys (tableAlias : RDBMS!RdbmsTableAlias) : Collection {
	return self.updatableAliasFields(tableAlias).select(f | not f.tableField.isPrimary());
}


@cached
operation RDBMS!RdbmsView updateableAliases () : Collection {
	return self.tables.select(t | (t = self.primaryTable or self.primaryTable.table.allSupertypes().selectOne(t2 | t.table == t2).isDefined()) and self.updatableAliasFields(t).size() > 0).sortBy(t | t.table.parent.isDefined());
}

/*
    @property
    def before_update(self):
        for f in self.savefields:
            if f.notupdate:
                return True

        return not self.general

    @property
    def after_update(self):
        for f in self.savefields:
            if f.watch:
                return True

        return False

    @property
    def before_insert(self):
        return not self.general

    @property
    def after_insert(self):
        return self.watch

    @property
    def after_delete(self):
        return self.watch
*/