
@cached
operation RDBMS!RdbmsTable hasReadonlyForeignKey () : Boolean {
	for (fk : RDBMS!RdbmsField in self.fields.select(t | t.isKinfOf(RDBMS!ForeignKey))) {
		if (fk.readOnly) {
			return true;
		}
	}
	return false;
}


@cached
operation RDBMS!RdbmsTable allDescandences() : Collection {
	var ret : Sequence = new Sequence();
	for (c : RDBMS!RdbmsTable in RDBMS!RdbmsTable.all.select( c | c.parent = self)) {
		ret.add(c);
		ret.addAll(c.allDescandences());
	}
	return ret;
}

@cached
operation RDBMS!RdbmsTable allInheritedIdentifier() : Collection {
	var ret : Sequence = new Sequence();
	if (self.parent.isUndefined()) {
		for (inh in self.fields.select(f | f.isKindOf(RDBMS!RdbmsForeignKey) and f.inheritenceBased)) {
			ret.add(inh);
		}
	}
	return ret;
}
	
	
@cached
operation RDBMS!RdbmsTable allSupertypes() : Collection {
	var ret : Sequence = new Sequence();
	if (self.parent.isDefined()) {
		ret.add(self.parent);
		ret.addAll(self.parent.allSupertypes());
	}
	return ret;
}


/*
    @property
    def before_update(self):
        for f in self.savefields:
            if f.notupdate:
                return True

        return not self.general

    @property
    def after_update(self):
        for f in self.savefields:
            if f.watch:
                return True

        return False

    @property
    def before_insert(self):
        return not self.general

    @property
    def after_insert(self):
        return self.watch

    @property
    def after_delete(self):
        return self.watch
*/