[%
  import "../../operations/_importAll.eol";
  out.setContentType("Java");
%]
--liquibase formatted sql

[% for (view in RDBMS!RdbmsView.all) { %]

[* ------------------------------------- *]
[* ORACLE                                *]
[* ------------------------------------- *]
[% if (dialect() == 'Oracle') { %]
--changeset generator:CREATE_TRIGGER_INSTEAD_OF_DELETE_[%= view.sqlName %]#[%= version() %] dbms:oracle logicalFilePath:[%= scriptName %] stripComments:true endDelimiter:\n/\s*\n|\n/\s*$
-- [%= view.name %] [%= view.primaryTable.table.uuid %]
CREATE TRIGGER DEL_[%= view.sqlName %] INSTEAD OF DELETE ON [%= view.sqlName %]
    FOR EACH ROW
    BEGIN
        DELETE FROM [%= view.primaryTable.table.sqlName %] WHERE ID = :OLD.ID;
    END;
/

--changeset generator:RECOMPILE_TRIGGER_INSTEAD_OF_DELETE_[%= view.sqlName %]#[%= version() %] stripComments:true
alter trigger DEL_[%= view.sqlName %] compile;
select is_trigger_valid('DEL_[%= view.sqlName %]') from DUAL;
[% } %]

[* ------------------------------------- *]
[* HSQLDB                                *]
[* ------------------------------------- *]
[% if (dialect() == 'Hsqldb') { %]
--changeset generator:CREATE_FUNCTION_INSTEAD_OF_DELETE_[%= view.sqlName %]#[%= version() %] dbms:hsqldb logicalFilePath:[%= scriptName %] stripComments:true
-- [%= view.name %] [%= view.primaryTable.table.uuid %]
CREATE TRIGGER DEL_[%= view.sqlName %] INSTEAD OF DELETE ON [%= view.sqlName %]
    REFERENCING OLD AS OLD
    FOR EACH ROW
    BEGIN ATOMIC
        DELETE FROM [%= view.primaryTable.table.sqlName %] WHERE ID = OLD.ID;        
    END;
[% } %]

[* ------------------------------------- *]
[* POSTGRES                              *]
[* ------------------------------------- *]
[% if (dialect() == 'Postgres') { %]
--changeset generator:CREATE_TRIGGER_INSTEAD_OF_DELETE_[%= view.sqlName %]#[%= version() %] dbms:postgresql logicalFilePath:[%= scriptName %] stripComments:true
-- [%= view.name %] [%= view.primaryTable.table.uuid %]
CREATE FUNCTION DEL_[%= view.sqlName %]() RETURNS TRIGGER AS $DEL_[%= view.sqlName %]$
    BEGIN
        DELETE FROM [%= view.primaryTable.table.sqlName %] WHERE ID = OLD.ID;

        RETURN OLD;
    END;
$DEL_[%= view.sqlName %]$ LANGUAGE plpgsql;

--changeset generator:CREATE_TRIGGER_INSTEAD_OF_DELETE[%= view.sqlName %]#[%= version() %] dbms:postgresql logicalFilePath:[%= scriptName %] stripComments:true
CREATE TRIGGER DEL_[%= view.sqlName %]
    INSTEAD OF DELETE ON [%= view.sqlName %]
    FOR EACH ROW
    EXECUTE PROCEDURE DEL_[%= view.sqlName %]();

[% } %]

[% } %]
