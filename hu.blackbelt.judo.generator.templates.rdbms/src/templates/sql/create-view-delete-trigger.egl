[%
  import "../../operations/_importAll.eol";
  import "../../main.egl";
  
  out.setContentType("Java");
%]

-- --changeset generator:create_function_DEL_{{ view.name }}#{{ changesetversion }} {{ changesetextraargs }} {{ ddlmacro.DBMSTYPE }} logicalFilePath:triggersViewsConstraintCreate stripComments:true {{ ddlmacro.endDelimiter() }}
-- {{ ddlmacro.CREATE_TRIGGER('DEL_' + view.name, view.name, 'INSTEAD OF', 'DELETE') }}
--    {{ ddlmacro.BEGIN }}
--        DELETE FROM {{ view.roottable.name }} WHERE ID = {{ ddlmacro.OLD }}.ID;
--
--        {{ ddlmacro.RETURN_OLD }}
--    END;
--{{ ddlmacro.END_TRIGGER() }}

[% for (view in views) { %]

[* ------------------------------------- *]
[* ORACLE                                *]
[* ------------------------------------- *]
[% if (dialect() == 'Oracle') { %]
--changeset generator:create_function_DEL_[%= view.sqlName %]#[%= version() %] dbms:oracle logicalFilePath:deleteOnView stripComments:true endDelimiter:\n/\s*\n|\n/\s*$
-- [%= view.name %] [%= view.primaryTable.table.uuid %]
CREATE TRIGGER DEL_[%= view.sqlName %] INSTEAD OF DELETE ON [%= view.sqlName %]
    FOR EACH ROW
    BEGIN
        DELETE FROM [%= view.primaryTable.table.sqlName %] WHERE ID = :OLD.ID;
    END;
/

--changeset generator:recompile_trigger_[%= view.sqlName %]#[%= version() %] stripComments:true
alter trigger DEL_[%= view.sqlName %] compile;
select is_trigger_valid('DEL_[%= view.sqlName %]') from DUAL;
[% } %]

[* ------------------------------------- *]
[* HSQLDB                                *]
[* ------------------------------------- *]
[% if (dialect() == 'Hsqldb') { %]
--changeset generator:create_function_DEL_[%= view.sqlName %]#[%= version() %] dbms:hsqldb logicalFilePath:deleteOnView stripComments:true
-- [%= view.name %] [%= view.primaryTable.table.uuid %]
CREATE TRIGGER DEL_[%= view.sqlName %] INSTEAD OF DELETE ON [%= view.sqlName %]
    REFERENCING OLD AS OLD
    FOR EACH ROW
    BEGIN ATOMIC
        DELETE FROM [%= view.primaryTable.table.sqlName %] WHERE ID = OLD.ID;        
    END;
[% } %]

[* ------------------------------------- *]
[* POSTGRES                              *]
[* ------------------------------------- *]
[% if (dialect() == 'Postgres') { %]
--changeset generator:create_function_DEL_[%= view.sqlName %]#[%= version() %] dbms:postgresql logicalFilePath:deleteOnView stripComments:true
-- [%= view.name %] [%= view.primaryTable.table.uuid %]
CREATE FUNCTION DEL_[%= view.sqlName %]() RETURNS TRIGGER AS $DEL_[%= view.sqlName %]$
    BEGIN
        DELETE FROM [%= view.primaryTable.table.sqlName %] WHERE ID = OLD.ID;

        RETURN OLD;
    END;
$DEL_V_FRW_WORKFW$ LANGUAGE plpgsql;

--changeset generator:create_trigger_DEL_[%= view.sqlName %]#[%= version() %] dbms:postgresql logicalFilePath:deleteOnView stripComments:true
CREATE TRIGGER DEL_[%= view.sqlName %]
    INSTEAD OF DELETE ON [%= view.sqlName %]
    FOR EACH ROW
    EXECUTE PROCEDURE DEL_[%= view.sqlName %]();

[% } %]

[% } %]
