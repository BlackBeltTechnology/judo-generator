[%
  import "../../operations/_importAll.eol";
  import "../../main.egl";
  
  out.setContentType("Java");
%]


[%for (table in junctionTables) {%]

[* ------------------------------------- *]
[* ORACLE                                *]
[* ------------------------------------- *]
[% if (dialect() == 'Oracle') {%]
--changeset generator:create_trigger_BI_[%= table.sqlName %]#[%= version() %] dbms:oracle logicalFilePath:createJunctionBeforeInsertTrigger stripComments:true endDelimiter:\n/\s*\n|\n/\s*$
-- [%= table.name %] [%= table.uuid %]
CREATE TRIGGER CREATE_TRIGGER BI_[%= table.sqlName %] BEFORE INSERT ON [%= table.sqlName %]
    FOR EACH ROW
BEGIN
         IF (:NEW.ID IS NULL) THEN
             SELECT serial.NEXTVAL INTO :NEW.ID FROM dual;
         END IF;
END;
/

--changeset generator:recompile_trigger_BI_[%= table.sqlName %]#[%= version() %] dbms:oracle logicalFilePath:createJunctionBeforeInsertTrigger stripComments:true
 alter trigger BI_[%= table.sqlName %] compile;
 select is_trigger_valid('BI_[%= table.sqlName %]') from DUAL;
[% } %]

[* ------------------------------------- *]
[* HSQLDB                                *]
[* ------------------------------------- *]
[% if (dialect() == 'Hsqldb') { %]
--changeset generator:create_function_BI_[%= table.sqlName %]#[%= version() %] dbms:hsqldb logicalFilePath:createJunctionBeforeInsertTrigger stripComments:true splitStatements:false
-- [%= table.name %] [%= table.uuid %]
CREATE TRIGGER BI_[%= table.sqlName %] BEFORE INSERT ON [%= table.sqlName %]
    REFERENCING NEW AS NEW 
    FOR EACH ROW
    BEGIN ATOMIC
        IF (NEW.ID IS NULL) THEN
            SET NEW.ID = nextval('serial');
        END IF;
    END;
[% } %]

[* ------------------------------------- *]
[* POSTGRES                              *]
[* ------------------------------------- *]
[% if (dialect() == 'Postgres') {%]
--changeset generator:create_function_BI_[%= table.sqlName %]#[%= version() %] failOnError:false dbms:postgresql logicalFilePath:createJunctionBeforeInsertTrigger stripComments:true
-- [%= table.name %] [%= table.uuid %]
CREATE FUNCTION BI_[%= table.sqlName %]() RETURNS TRIGGER AS $BI_[%= table.sqlName %]$
    BEGIN
        IF (NEW.ID IS NULL) THEN
            NEW.ID = nextval('serial');
        END IF;

        RETURN NEW;
    END;
$BI_[%= table.sqlName %]$ LANGUAGE plpgsql;

--changeset generator:create_trigger_BI_[%= table.sqlName %]#[%= version() %] failOnError:false dbms:postgresql logicalFilePath:createJunctionBeforeInsertTrigger stripComments:true
CREATE TRIGGER BI_[%= table.sqlName %]
    BEFORE INSERT ON [%= table.sqlName %]
    FOR EACH ROW
    EXECUTE PROCEDURE BI_[%= table.sqlName %]();
   
[% } %]
[% } %]


