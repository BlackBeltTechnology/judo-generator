[%
  import "../../operations/_importAll.eol";
  import "../../main.egl";
  
  out.setContentType("Java");
%]
[* LATER *]

{%- if table.after_delete %}
-- --changeset generator:create_function_AD_{{ table.name }}#{{ changesetversion }} {{ changesetextraargs }} {{ ddlmacro.DBMSTYPE }} logicalFilePath:triggersViewsConstraintCreate stripComments:true {{ ddlmacro.endDelimiter() }}
-- {{ ddlmacro.CREATE_TRIGGER('AD_' + table.name, table.name, 'AFTER', 'DELETE') }}
--     {{ ddlmacro.DECLARE }}
--         {{ ddlmacro.DEFVAR('EVENT_GUID', 'INTEGER') }}
--     {{ ddlmacro.BEGIN }}
--         {{ ddlmacro.nextval( 'EVENT_GUID' ) }}
--         INSERT INTO V_FRW_EVENT (C_GUID,      C_ACT,         C_EVENT_TYPE, C_DOMAIN_NAME,                  C_CLASS_NAME,           C_OBJECT_ID)
--         VALUES                  (EVENT_GUID, {{ ddlmacro.TR_TIME }}, 'DELETE',     '{{ table.node.parent.name }}', '{{ table.umlname }}',  {{ ddlmacro.OLD }}.ID);
-- 
--         {{ ddlmacro.RETURN_OLD }}
--     END;
-- {{ ddlmacro.END_TRIGGER() }}
-- {%- endif %}
-- 
-- {%- macro CREATE_TRIGGER(name, table, timing, type) -%}
-- {%- set _ = glob.update({'CURRENT_TRIGGER_NAME':name}) -%}
-- CREATE TRIGGER {{ name }} {{ timing }} {{ type }} ON {{ table }}
--     FOR EACH ROW
-- {%- endmacro -%}
-- {%- endif %}

[% for (table in tables) { %]
[% if (dialect() == 'Oracle') { %]
-- --changeset generator:after_delete_event_trigger_create_[%= table.sqlName %]#[%= version() %] logicalFilePath:afterDeleteEventTableTriggerCreate stripComments:true
[% } %]

[% if (dialect() == 'Hsqldb') { %]
[% } %]

[% if (dialect() == 'Postgres') { %]
-- --changeset generator:create_function_AD_[%= table.sqlName %]#[%= version() %] failOnError:false dbms:postgresql logicalFilePath:afterDeleteEventTableTriggerCreate stripComments:true splitStatements:false
-- CREATE FUNCTION AD_[%= table.sqlName %]() RETURNS TRIGGER AS $AD_[%= table.sqlName %]$
--     DECLARE
--         EVENT_GUID INTEGER;
--     BEGIN
--         EVENT_GUID = nextval('serial');
--         INSERT INTO V_FRW_EVENT (C_GUID,      C_ACT,         C_EVENT_TYPE, C_DOMAIN_NAME,                  C_CLASS_NAME,           C_OBJECT_ID)
--         VALUES                  (EVENT_GUID, transaction_timestamp(), 'DELETE',     '[%= table.originalPackage %]', '[%= table.originalName %]',  OLD.ID);
-- 
--         RETURN OLD;
--     END;
-- $AD_[%= table.sqlName %]$ LANGUAGE plpgsql;
-- 
-- --changeset generator:create_trigger_AD_[%= table.sqlName %]#[%= version() %] failOnError:false dbms:postgresql logicalFilePath:afterDeleteEventTableTriggerCreate stripComments:true splitStatements:false
-- CREATE TRIGGER AD_[%= table.sqlName %]
--     AFTER DELETE ON [%= table.sqlName %]
--     FOR EACH ROW
--     EXECUTE PROCEDURE AD_[%= table.sqlName %]();
-- [% out.println("\n"); %]
[% } %]
[% } %]
