[%
import "operations/_importAll.eol";

genScript("database-initialize");
genScript("create-table-full");


genScript("create-foreignkey");
genScript("create-not-null-constraint");

genScript("create-unique-constraint");
genScript("create-index");
genScript("create-table-before-insert-trigger");
genScript("create-table-before-update-trigger");
// Events ignored and not implemented
// genScript("create-table-after-insert-event-trigger");
// genScript("create-table-after-update-event-trigger");
// genScript("create-table-after-delete-event-trigger");
genScript("create-junction-before-insert-trigger");

genScript("create-view");
genScript("create-view-insert-trigger");
genScript("create-view-update-trigger");
genScript("create-view-delete-trigger");

genScript("insert-view-records");
// ==============================
// DROP is in reverted order
// ==============================

genScript("drop-view-insert-trigger");
genScript("drop-view-update-trigger");
genScript("drop-view-delete-trigger");
genScript("drop-view");

genScript("drop-table-before-insert-trigger");
genScript("drop-table-before-update-trigger");
// Events ignored and not implemented
// genScript("drop-table-after-insert-event-trigger");
// genScript("drop-table-after-update-event-trigger");
// genScript("drop-table-after-delete-event-trigger");
genScript("drop-junction-before-insert-trigger");
genScript("drop-table-before-insert-trigger");
genScript("drop-table-before-update-trigger");
genScript("drop-index");
genScript("drop-unique-constraint");
genScript("drop-not-null-constraint");
genScript("drop-foreignkey");
// Do not use
genScript("drop-table-full");


operation genScript(scriptName : String) : Any {
    var tmpl : Template = getDdlTemplate(scriptName);
    tmpl.populate("scriptName", scriptName);
	tmpl.generate(getGenPath() + scriptName +".sql");
	tmpl.reset();
}


operation getDdlTemplate (templateName : String) : Template {
    // var formatter = new Native("hu.blackbelt.judo.generator.formatter.sql.SqlCreateTableFormatter");
	var tf = TemplateFactory.load("templates/sql/" + templateName + ".egl");
	// tf.setFormatter(formatter);
	return tf;
}

operation getGenPath() : String {
	return "sql/" + RDBMS!RdbmsConfiguration.all.first().dialect.toLowercase() + "/";
}

%]
