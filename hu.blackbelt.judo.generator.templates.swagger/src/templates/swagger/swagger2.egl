[%
  import "../../operations/_importAll.eol";
%]
swagger: "2.0"
tags:
[% for (dto in dtos) {%]
- name: "[%= dto.origin.restName() %]"
[% } %]
paths:
[% for (dto in dtos) {%]
  /rest/[%=dto.origin.restUri() %]:
    get:
      tags:
      - "[%= dto.origin.restName() %]"
      operationId: "list"
      parameters:
      - in: "query"
        name: "f"
        description: |
            Query graph. It is a simplified version of GraphQL to project the resutset.
            The base node is the [%= dto.origin.restName() %], the references can be used as edges. There is no filter can be used.
            Example:
            ```
            id,name, relation{id, name, {rel2: {id}}}
            ```            
        required: false
        schema:
          $ref: "#/definitions/String"
      - in: "query"
        name: "p"
        description: For paging it is the page number
        required: false
        schema:
          $ref: "#/definitions/String"
      - in: "query"
        name: "c"
        description: For paging it is the page size
        required: false
        schema:
          $ref: "#/definitions/String"
      - in: "query"
        name: "s"
        description: "Sorting parameter. The sort fields are separated with coma, the field name can have prefixed plus sign for ascending, minus sign for descending sort"
        required: false
        schema:
          $ref: "#/definitions/String"
      - in: "query"
        name: "q"
        description: |
           Filtering parameters. The attributes and single relation can be used for filtering the entities. The filtering parameters can be separated with whitespace, and the form
           is:
           ```attrname OPERATION value```
           The operations can be:
           - neq Not equal
           - eq Equal
           - notlike Not like (Value have to be String)
           - like Like (Value have to be String)
           - gt Greater
           - gte Greater or equal
           - lt Less
           - lte Less or equal
           - notin Not in (Value have to be list)
           - in In (Value have to be list)           
        required: false
        schema:
          $ref: "#/definitions/String"

      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/[%= dto.origin.restName() %]"

    post:
      tags:
      - "[%= dto.origin.restName() %]"
      operationId: "create new [%=dto.origin.name%]"
      parameters:
      - in: "body"
        name: "body"
        schema:
          $ref: "#/definitions/[%= dto.origin.restName() %]"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/[%= dto.origin.restName() %]"

  /rest/[%=dto.origin.restUri() %]/{id}:
    get:
      tags:
      - "[%= dto.origin.restName() %]"
      operationId: "read [%=dto.origin.name%]"
      parameters:
      - in: "path"
        name: "id"
        schema:
          $ref: "#/definitions/String"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/[%= dto.origin.restName() %]"

  /rest/[%=dto.origin.restUri() %]/{id}:
    put:
      tags:
      - "[%= dto.origin.restName() %]"
      operationId: "update [%=dto.origin.name%]"
      parameters:
      - in: "path"
        name: "id"
        schema:
          $ref: "#/definitions/String"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/[%= dto.origin.restName() %]"

  /rest/[%=dto.origin.restUri() %]/{id}:
    delete:
      tags:
      - "[%= dto.origin.restName() %]"
      operationId: "delete [%=dto.origin.name%]"
      parameters:
      - in: "path"
        name: "id"
        schema:
          $ref: "#/definitions/String"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/[%= dto.origin.restName() %]"

  {% for ref in dto.allrefs|sort(attribute = 'name') %}
  {%- if ref.navigable %}
  /rest/{{ dto.restPackage.module|replace(".","/") }}/{{ dto.name|lower }}/{id}/{{ ref.name }}:
    get:
      tags:
      - "{{ dto.name }}"
      operationId: "traverse{{ ref.name|upper_first }}"
      parameters:
      - in: "path"
        name: "id"
        schema:
          $ref: "#/definitions/String"
      - in: "query"
        name: "f"
        required: false
        schema:
          $ref: "#/definitions/String"
      - in: "query"
        name: "p"
        required: false
        schema:
          $ref: "#/definitions/String"
      - in: "query"
        name: "c"
        required: false
        schema:
          $ref: "#/definitions/String"
      - in: "query"
        name: "s"
        required: false
        schema:
          $ref: "#/definitions/String"
      - in: "query"
        name: "q"
        required: false
        schema:
          $ref: "#/definitions/String"
      responses:
        200:
          description: "successful operation"
          schema:
          {% if ref.type.collection %}
            type: "array"
            items:
              $ref: "#/definitions/{{ ref.type.name }}RestDto"
          {% else %}
            $ref: "#/definitions/{{ ref.type.name }}RestDto"
          {% endif %}
    options:
      tags:
      - "{{ dto.name }}"
      operationId: "available{{ ref.name }}"
      parameters:
      - in: "path"
        name: "id"
        schema:
          $ref: "#/definitions/String"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/{{ ref.type.name }}RestDto"
    post:
      tags:
      - "{{ dto.name }}"
      operationId: "attach{{ ref.name|upper_first }}"
      parameters:
      - in: "path"
        name: "id"
        schema:
          $ref: "#/definitions/String"
      - in: "body"
        name: "body"
        schema:
          $ref: "#/definitions/{{ ref.type.name }}RestDto"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/{{ ref.type.name }}RestDto"
    put:
      tags:
      - "{{ dto.name }}"
      operationId: "replace{{ ref.name|upper_first }}"
      parameters:
      - in: "path"
        name: "id"
        schema:
          $ref: "#/definitions/String"
      - in: "body"
        name: "body"
        schema:
          $ref: "#/definitions/{{ ref.type.name }}RestDto"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/{{ ref.type.name|upper_first }}RestDto"
    delete:
      tags:
      - "{{ dto.name }}"
      operationId: "detach{{ ref.name|upper_first }}"
      parameters:
      - in: "path"
        name: "id"
        schema:
          $ref: "#/definitions/String"
      - in: "body"
        name: "body"
        schema:
          $ref: "#/definitions/{{ ref.type.name }}RestDto"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/{{ ref.type.name }}RestDto"
  {% endif %}
  /rest/{{ dto.restPackage.module|replace(".","/") }}/{{ dto.name|lower }}/{{ ref.name }}:
    options:
      tags:
      - "{{ dto.name }}"
      operationId: "availableAll{{ ref.name }}"
      parameters:
      - in: "path"
        name: "id"
        schema:
          $ref: "#/definitions/String"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/{{ ref.type.name }}RestDto"
  {% endfor %}

  
  [% for (method in dto.origin.methods.select(m | m.isCustomBulk() or m.isQuery() or (m.isCustom() and m.classBased)).sortBy(m | m.name)) { %]
  /rest/[%= dto.origin.restUri() %]/[%= method.restUri() %]:
    post:
      tags:
      - "[%= dto.origin.restName() %]"
      summary: "[%= dto.origin.restName() %] custom operation: [%= method.restName() %]"
      operationId: "[%= method.restName() %]"
      consumes:
      - "application/json"
      parameters:
      - in: "body"
        name: "dto"
        schema:
          $ref: "#/definitions/Action[%= dto.origin.restName() %][%= method.restName() %]"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              {% if (method|operation_result_type(dto)).base %}
              type: "{{ (method|operation_result_type(dto)).name|lower_first }}"
              {% else %}
              $ref: "#/definitions/{{ (method|operation_result_type(dto)).name }}RestDto"
              {% endif %}
  [%}%]
[%}%]














definitions:
[% for (dto in dtos) {%]
  [% for (method in dto.origin.methods.select(m | m.isCustomBulk() or m.isQuery() or (m.isCustom() and m.classBased)).sortBy(m | m.name)) { %]
  Action[%= dto.origin.restName() %][%= method.restName() %]:
    type: "object"
    properties:
    {%- if not dto.abstract %}
      ids:
        type: "array"
        items:
          $ref: "#/definitions/String"
    {%- endif %}
  {%- for input in method.inputs %}
      {{ input.name }}:
        {%- if input.type.base -%}
        {% if input.type.collection %}
        type: "array"
        items:
          $ref: "#/definitions/{{ input.type.name }}"
        {% else %}
        $ref: "#/definitions/{{ input.type.name }}"
        {% endif %}
        {% else %}
          {% if input.type.collection %}
          type: "array"
          items:
            $ref: "#/definitions/{{ input.type.name }}RestDto"
          {% else %}
          $ref: "#/definitions/{{ input.type.name }}RestDto"
          {% endif %}
        {% endif %}
  {%- endfor %}
  [%}%]
  {%- endfor %}
  {{ dto.name }}RestDto:
    type: "{% if dto.hasSuper %}{{ dto.superclass.name }}{% else %}object{% endif %}"
    id: "{{ dto.name }}RestDto"
    {% if dto.hasSuper %}extends: "{{ dto.superclass.name }}RestDto"{% endif %}
    properties:
      id:
        $ref: "string"

    {% set superclass = dto %}

    {% for index in range(100) if superclass.superclass %}
    {%- for attr in superclass.attrs|sort(attribute = 'name') %}
      {{ attr.name }}:
        {% if attr.type.base %}
          {% if attr.type.collection %}
          type: "array"
          items:
            type: "{{ attr.type.name|lower_first }}"
          {% else %}
          type: "{{ attr.type.name|lower_first }}"
          {% endif %}
        {% else %}
          {% if attr.type.collection %}
          type: "array"
          items:
            $ref: "#/definitions/{{ attr.type.name }}RestDto"
          {% else %}
          $ref: "#/definitions/{{ attr.type.name }}RestDto"
          {% endif %}
        {% endif %}
    {% endfor%}

    {%- for ref in superclass.refs if ref.navigable %}
      {{ ref.name }}:
        {%- if ref.type.base %}
          {% if ref.type.collection %}
          type: "array"
          items:
            type: "{{ ref.type.name }}"
          {% else %}
          type: "{{ ref.type.name }}"
          {% endif %}
        {%- else %}
          {% if ref.type.collection %}
          type: "array"
          items:
            $ref: "#/definitions/{{ ref.type.name }}RestDto"
          {% else %}
          $ref: "#/definitions/{{ ref.type.name }}RestDto"
          {% endif %}
        {% endif %}
    {% endfor%}
    {% set superclass = superclass.superclass %}
    {% endfor %}
[%}%]
{%- endblock body %}