[%
  import "../../operations/_importAll.eol";
  import "../../main.egl";
  out.setContentType("Java");
%]

package [%=class.package.fqName()%];

import com.google.common.base.Optional;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

import com.google.common.collect.Lists;
import hu.blackbelt.judo.integration.rest.api.IdentifiableRestDto;
import hu.blackbelt.judo.common.rest.api.JudoPropertyBasedIdGenerator;
import hu.blackbelt.judo.common.rest.api.ResourceUrl;

import hu.blackbelt.judo.common.security.api.authz.ProtectedResource;
import hu.blackbelt.judo.common.security.api.authz.ProtectedAttribute;
import hu.blackbelt.judo.common.lang.api.meta.Metadata;
import com.fasterxml.jackson.annotation.JsonIdentityInfo;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.ObjectIdGenerators;

import [%=class.package.package.fqName()%].Namespace;
import [%=class.restOperation().fqName()%];

import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import lombok.SneakyThrows;

import javax.ws.rs.core.Link;
import javax.ws.rs.core.UriBuilder;
import java.net.URI;

import java.util.List;


@ApiModel
@Getter
@Setter
@NoArgsConstructor
@ProtectedResource
@ResourceUrl(href = Namespace.REST_BASE_URI + "/[%= class.origin.nameToRest() %]/{id}", rel = "self")
public class [%=class.name%] [% if (class.hasSuper()) { %] extends [%=class.supertype.fqName() %] [% } %] implements IdentifiableRestDto {

	private static final String APPLICATION_OCTET_STREAM = "application/octet-stream";

	[% for (attr in class.attributes()) { %]
		[% if (attr.name == 'xmiid') { %]
			@JsonProperty("xmiid")
		[%} else {%]
			[% if (attr.type.name <> 'URL') { %]
				@JsonProperty("[%=attr.name%]")
			[%}%]
		[%}%]
		@ProtectedAttribute
		@ApiModelProperty
		private [%=attr.type.fqName()%] [%=attr.name%];
	[%}%]

	[% for (ref in class.references()) { %]
		[% if (ref.navigable) { %]
			@JsonProperty("[%=ref.name%]")
			@JsonInclude(JsonInclude.Include.NON_EMPTY)
			private [%=ref.type.fqName()%] [%=ref.name%];
		[%}%]
	[%}%]

	[% for (attr in class.attributes()) { %]
		[% if (attr.type.name == 'URL') { %]
			@JsonProperty("[%=attr.name%]")
			@JsonInclude(JsonInclude.Include.NON_EMPTY)
			@ApiModelProperty
			public Link get[%=attr.name.firstToUpperCase()%]Link() {
				if (getId() == null) {
					return  null;
				}
				if (get[%=attr.name.firstToUpperCase()%]() == null) {
					return null;
				}
				String contentType = "application/octet-stream";
				Long contentLength = -1L;
				try {
					java.net.URLConnection urlConnection = get[%=attr.name.firstToUpperCase()%]().openConnection();
					contentType = urlConnection.getContentType();
					contentLength = urlConnection.getContentLengthLong();
				} catch (java.io.IOException e) {
				}
				return Link.fromUri(getUri([%=class.restOperation().fqName()%].class, "download[%=attr.name.firstToUpperCase()%]", getId().toString()))
						.type("GET")
						.rel("download[%=attr.name.firstToUpperCase()%]")
						.param("content-type", Optional.fromNullable(contentType).or(APPLICATION_OCTET_STREAM))
						.param("content-length", Long.toString(contentLength))
						.param("originalUrl", [%=attr.name%].toString())
						.build();
			}

			@JsonProperty("[%=attr.name%]")
			public void set[%=attr.name.firstToUpperCase()%](java.net.URL [%=attr.name%]) {
				this.[%=attr.name%] = [%=attr.name%];
			}

		[%}%]
	[%}%]

	@JsonIgnore
	private Metadata $judo$meta;

	@JsonIgnore
	@SneakyThrows(java.net.URISyntaxException.class)
	private URI getUri(Class clazz, String method, Object...params) {
		return new URI(UriBuilder.fromResource(clazz).build().toString() + UriBuilder.fromMethod(clazz, method).build(params).toString());
	}

}
