   /**
   * Force the act of login before the next action takes place. It can be useful when for exmple the roles of the user has been changed,
   * and the test needs to login to refresh the cached security credentials of the acting user.
   *
   */
   public [%=class.name%] forceLogin(){
        reqSpecBuilder.forceLogin(true);
        return this;
   }

   /**
   * Set the limit of the entities contained in the response of the next action.
   * Works in pair with page method.
   * NOTE that not all type of action currently obeys this parameter.
   */
   public [%=class.name%] limit(int count){
        reqSpecBuilder.count(count);
        return this;
   }

   /**
   * Set the page number must be returned for the next action.
   * Works in pair with limit method.
   * NOTE that not all type of action currently obeys this parameter.
   */
   public [%=class.name%] page(int page){
        reqSpecBuilder.page(page);
        return this;
   }
   
   
   public [%=class.name%] filterString(String filter){
        reqSpecBuilder.filter(filter);
        return this;
   }
   
   
   public [%=class.name%] orderString(String order){
        reqSpecBuilder.order(order);
        return this;
   }

   /**
   * <p>Set the members needs to be initialized as a plain string, or as a sequence of members.</p>
   * <p>Important: no syntactic check or member name check made on the provided string or sequence of strings</p>
   * <p>Examples:
   *  <ul>
   *     <li><code>wrapper.initialize("id")</code>
   *     <li><code>wrapper.initialize("id, attriburte1, association1")</code>
   *     <li><code>wrapper.initialize("id", "attriburte1",  "association1")</code>
   *  </ul>
   </p>
   */
   public [%=class.name%] initialize(String... members){
        if (members != null){
            for (String m : members) {
                qgBuilder.entry(QueryGraph.Entry.builder().field(m).build());;
            }

        }
        return this;
   }

   /**
   * <p>Set the suppress information as a builder.</p>
   * <p>Important: giving the code property for the suppresion is mandatory</p>
   * <p>For the suppression the following defaults apply:
   *  <ul>
   *     <li>ACTION: {@link hu.blackbelt.judo.common.context.api.RequestContextService.ValidationControl.Entry.Action#Force}
   *     <li>XMIID: on instanced based wrappers the xmiid of the wrapped instance, on static wrappers the xmiid of the entity the static wrapper represents
   *     <li>ID: the id of the wrapped instance Important: this default option works  only for the 'T' prefixed wrapper
   *  </ul>
   </p>
   <p>Examples (the shorthand methods from {@link RestTestBase} can be used to get the builder):
   *  <ul>
   *     <li><code>anyInstanceBasedWrapper.suppress(code(NOT_NULL))</code> Here all the above defaults are on
   *     <li><code>anyInstanceBasedWrapper.suppress(action(Skip).id(otherThanTheInstanceId).code(WARNING_CODE_1))</code>
   *     <li><code>anyNOTInstanceBasedWrapper.suppress(id(someId).code(NOT_NULL))</code> Here the id should be given as no reasonable default can be inferred from the wrapper
   *  </ul>
   </p>
   */
   public [%=class.name%] suppress(Suppressions.Entry.EntryBuilder builder){
        Suppressions.Entry entry = builder.build();
        Suppressions.Entry.EntryBuilder copy = Suppressions.Entry.builder();
        if (entry.getAction() == null) {
            copy.action(RequestContextService.ValidationControl.Entry.Action.Force);
        } else {
            copy.action(entry.getAction());
        }
        if (entry.getXmiid() == null) {
            copy.xmiid(XMIID);
        } else {
            copy.xmiid(entry.getXmiid());
        }
        if (entry.getId() == null) {
            [% if (instanceBased) { %]
                copy.id(this.getId());
            [%}%]
        } else {
            copy.id(entry.getId());
        }
        copy.code(entry.getCode());
        suppBuilder.entry(copy.build());
        return this;
   }

   /**
   * The next action will be performed as the given Login. If the user represented by this Login is not logged then the login takes place automatically.
   * If there is no login provided for the action then login information in the {@link AbstractRestTestBase} will be used.
   */
   public [%=class.name%] as(Login login){
        reqSpecBuilder.login(login);
        return this;
   }
