[%
  import "../../operations/_importAll.eol";
  
  out.setContentType("Java");
%]

package hu.blackbelt.judo.framework.api.service;

import hu.blackbelt.judo.business.bo.api.BoTypeResolver;
import hu.blackbelt.judo.business.bo.api.FrameworkEntity;
import hu.blackbelt.judo.business.bo.api.FrameworkEntityFactoryLocator;
import hu.blackbelt.judo.business.dao.api.EntityDao;
import hu.blackbelt.judo.business.service.api.CrudService;
import hu.blackbelt.judo.business.service.api.base.AbstractCrudService;
import hu.blackbelt.judo.business.service.api.tenant.TenantInfoService;

import lombok.Getter;
import org.apache.felix.scr.annotations.Component;
import org.apache.felix.scr.annotations.Reference;
import org.apache.felix.scr.annotations.ReferenceCardinality;
import org.apache.felix.scr.annotations.ReferencePolicy;
import org.apache.felix.scr.annotations.ReferencePolicyOption;
import org.apache.felix.scr.annotations.ReferenceStrategy;

@Component
@Getter
public abstract class AbstractFrameworkCrudService<T extends FrameworkEntity> extends AbstractCrudService<T>  {

    @Reference(
        policy = ReferencePolicy.DYNAMIC,
        cardinality = ReferenceCardinality.OPTIONAL_UNARY,
        policyOption = ReferencePolicyOption.GREEDY,
        strategy = ReferenceStrategy.EVENT
    )
    private BoTypeResolver boTypeResolver;

    @Reference(
        policy = ReferencePolicy.DYNAMIC,
        cardinality = ReferenceCardinality.OPTIONAL_UNARY,
        policyOption = ReferencePolicyOption.GREEDY,
        strategy = ReferenceStrategy.EVENT
    )
    private FrameworkEntityFactoryLocator frameworkEntityFactoryLocator;

    @Reference(
        policy = ReferencePolicy.DYNAMIC,
        cardinality = ReferenceCardinality.OPTIONAL_UNARY,
        policyOption = ReferencePolicyOption.GREEDY,
        strategy = ReferenceStrategy.EVENT
    )
    TenantInfoService tenantInfoService;

    [% for (class in JAVA!JvmInterface.all.select(c | c.coordinate = JAVA!JvmJudoCoordinate#BO_INTERFACE).sortBy(c | c.name)) {%]
	
    protected [%=class.bare().boFactoryInterface().fqName()%] get[%=class.name%]Factory() {
        return ([%=class.bare().boFactoryInterface().fqName()%]) frameworkEntityFactoryLocator.locate([%=class.bare().boInterface().fqName()%].class);
    }

    protected EntityDao<[%=class.bare().boInterface().fqName()%]> get[%=class.name%]EntityDao() {
        return (EntityDao<[%=class.bare().boInterface().fqName()%]>) getEntityDao(get[%=class.name%]Factory().getImplementationClass());
    }

    protected CrudService<[%=class.bare().boInterface().fqName()%]> get[%=class.name%]CrudService() {
        return (CrudService<[%=class.bare().boInterface().fqName()%]>) getCrudService(get[%=class.name%]Factory().getImplementationClass());
    }

    [%}%]
}