import "../../../operations/_importAll.eol";
import "element.etl";

rule JClassToRdbmsTable 
	transform s : PSM!JClass
	to t : RDBMS!RdbmsTable
	extends JElementToRdbmsElement {
	guard : s.participates(PSM!JLayer#PERSISTENCE)
	    t.sqlName = s.tableSqlName();
	    t.name = s.package.fqName() + "." + s.name;
	    t.originalName = s.name;
	    t.originalPackage = s.package.fqName();

		if (s.supertype.isDefined()) {
			t.parent = s.supertype.equivalent("JClassToRdbmsTable");
		}

	    t.description = s.name;
        for (c : PSM!JClass in s.allDescandences()) {
			t.fields.add(s.createForeginKey(c));
	    }
        /* TODO: Later implement it, now ignored
        for (c : PSM!JClass in s.allSupertypes()) {
        	t.fields.add(s.createForeginKey(c));
	    } */  
	    targetModel.rdbmsTables.add(t);
}

rule JClassToRdbmsView 
	transform s : PSM!JClass
	to v : RDBMS!RdbmsView
	extends JElementToRdbmsElement {
	guard : s.participates(PSM!JLayer#PERSISTENCE)
	    v.name = s.package.fqName() + "." + s.name;
	    v.sqlName = s.viewSqlName();
	    v.originUuid = s.uuid;
		v.uuid = generateUuid(v.uuid, "View", "_");
		
	    // Base alias is a reference for base table    
	    var baseAlias : RDBMS!RdbmsTableAlias = v.createBaseAlias(s);

		// Add this and all ancestor
		var superClass : PSM!JClass = s;
		while (superClass.isDefined()) {

			// Add primary key
		    for (a : PSM!JAttribute in superClass.attributes.select(a | a.isPrimaryKey())) {
		   		v.addPrimaryKeyField(s, a);	   		
		    }

			// Iterate all roles contained in base table and add as a field.
			for (r : PSM!JRole in superClass.roles.select(r | r.isForeign() and not r.ownerRelationship.isJunction())) {
				v.addOwnedRelationField(s, r);
			}
	
		    // Iterate all roles contained in the other table and add as a field.
			for (r : PSM!JRole in superClass.roles.select(r | not r.isForeign() and not r.ownerRelationship.derived and not r.ownerRelationship.isJunction())) {
				v.addForeignRelationField(s, r);
			}

	        // Convert attributes to be able to clone supertypes
		    for (a : PSM!JAttribute in superClass.attributes.select(a | not a.isPrimaryKey() and not a.derived)) {
		   		v.addValueField(s, a);	   		
		    }

			// Adding derived fields last, because the referenced fields have to be exists.
		    for (a : PSM!JAttribute in superClass.attributes.select(a | a.derived)) {
		   		v.addExpressionField(s, a);	   		
		    }
			superClass = superClass.supertype;
		}
        targetModel.rdbmsViews.add(v);
}

