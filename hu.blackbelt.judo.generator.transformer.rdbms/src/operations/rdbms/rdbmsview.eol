import "../psm/_importPsm.eol";


// Base alias is a reference for base table
operation RDBMS!RdbmsView createBaseAlias(class : PSM!JClass) {
    var baseAlias : RDBMS!RdbmsTableAlias = new RDBMS!RdbmsTableAlias();
    baseAlias.table = class.equivalent("JClassToRdbmsTable");
    baseAlias.name = "Base " + baseAlias.table.name;
    baseAlias.description = "Base " + baseAlias.table.name;
    baseAlias.sqlName = "BASE_" + baseAlias.table.sqlName;
	baseAlias.uuid = uuid3(class.uuid, self.name);

    self.tables.add(baseAlias);
    self.primaryTable = baseAlias;
}

operation RDBMS!RdbmsView addField(attribute : PSM!JAttribute) {
    var vf : RDBMS!RdbmsViewField;

	if (attribute.isPrimaryKey()) {
		vf = attribute.equivalent("JAttributeToViewIdField");
	   	vf.`alias` = self.primaryTable;
   	} else if (not attribute.derived) {
		vf = attribute.equivalent("JAttributeToViewValueField");
	   	vf.`alias` = self.primaryTable;
   	} else {
  		 
		vf = attribute.equivalent("JAttributeToViewExpressionField");
  		vf.uuid = uuid3(attribute.uuid, self.name);
   		vf.view = self;  		 
   		    		 
   		(attribute.ownerClass.name + "." + attribute.name).println("EXPRESSION FOUND: ");
   		
   		for (expr in parseDerivedExpression(attribute.value)) {
	    	if (expr.isExpressionLabelExpression()) {
	    		var labelExpression : RDBMS!RdbmsLabelExpression = new RDBMS!RdbmsLabelExpression();
	    		labelExpression.expression = expr.getLabelExpression().getText();
	    		vf.expressions.add(labelExpression);
	    	} else if (expr.isExpressionRelationExpression()) {
/*
				var currentRelartionExpression = new RDBMS!RdbmsRelationExpression();
				vf.expressions.add(currentRelartionExpression);

				var currentRelationExpression = expr.getRelationExpression();
				var currentClass = attribute.ownerClass;
				var currentBaseTable = currentClass.equivalent("JClassToRdbmsTable");
				var currentRelationName = "";

				var currentRelationIdentifierFieldName = attribute.name;
				var currentRelationIdentifierField : RDBMS!RdbmsViewIdentifierField = currentClass.id().equivalent("JAttributeToViewIdField");
						
				while (currentRelationExpression.isDefined()) {
					// Search for role.
					if (currentRelationExpression.hasChild()) {
						if (currentRelationName <> "") {
							currentRelationName += ".";
						} 
						currentRelationName += currentRelationExpression.getRelationName(); 
						("Role: " + currentRelationName + " " + currentRelationExpression.getRelationName()).println();
						// c.allRoles().println("Roles: ");
						// c.name.println(" Class:");
						// r.getRelationName().println(" Relation name: ");
						// for (r : PSM!JRole in c.allRoles()) {
						// 	(r.name + " " + r.ownerClass.name).println("    Role: ");
						// }
						
						var currentRole : PSM!JRole = currentClass.allRoles().select(sr | sr.name == currentRelationExpression.getRelationName()).first;
						//c.roles.select(sr | c.allRoles().contains(c.isKindOf(sr.ownerClass) and sr.name == r.getRelationName()).first;
						// ("Role: " +  relName + " " + role).println(); 

						
						var previousRelationIdentifierField : RDBMS!RdbmsViewIdentifierField = currentRelationIdentifierField;
						var currentRelationIdentifierFieldName = attribute.ownerClass.package.fqName() + "." + attribute.ownerClass.name + "." + attribute.name + "." + currentRelationName;
						var currentRelationIdentifierField : RDBMS!RdbmsViewRelationIdentifierField = self.fields.select(s | s.name == currentRelationIdentifierFieldName).first;
						if (currentRelationIdentifierField.isUndefined()) {
							currentRelationIdentifierField = new RDBMS!RdbmsViewRelationIdentifierField();
							currentRelationIdentifierField.name = currentRelationIdentifierFieldName;
							currentRelationIdentifierField.sqlName = "REL_" + currentClass.tableSqlName() + "_ID";
							currentRelationIdentifierField.uuid = uuid3(currentRole.uuid, self.name + "." + currentRelationIdentifierFieldName);
							
							// Find alias
							var aliasName =  currentRole.roleAliasName(); // currentRole.opposite().ownerClass.package.fqName() +  currentRole.opposite().ownerClass.name + "." + currentRole.opposite().name;
							var currentAlias : RDBMS!RdbmsTableAlias = self.fields.select(e | e.isKindOf(RDBMS!RdbmsViewAliasField)).collect(e | e.`alias`).select(e | e.name = aliasName).first;
							
							// Creaate alias
							if (currentAlias.isUndefined()) {
								currentAlias = new RDBMS!RdbmsTableAlias();
								self.tables.add(currentAlias);
								currentAlias.table = currentClass.equivalent("JClassToRdbmsTable");
								currentAlias.uuid = uuid3(self.uuid, currentRelationName);
								currentAlias.sqlName = 'REL_' + abbreviate(currentRelationName, 12).toUpperCase();
								currentAlias.name = aliasName;
							}
							
							// Find value field
							// var currentValueField : RDBMS!RdbmsViewAliasField = 
											
							currentRelationIdentifierField.`alias` = currentAlias;
							currentRelationIdentifierField.relationField = previousRelationIdentifierField;
							self.fields.add(currentRelationIdentifierField);
						}
						currentClass = currentRole.opposite().ownerClass;						
						currentRelationExpression = currentRelationExpression.getRelationExpression();
					} else {
						(currentClass.name + " " + currentRelationExpression.getRelationName()).println("Current class: ");
						var attr : PSM!JAttribute = currentClass.allAttributes().select(sa | sa.name == currentRelationExpression.getRelationName()).first;
						("Attribute: " + attr).println();

						// Search epression field
						-/-*var relationViewValueFieldName = attribute.name + " " + currentRelationName;
						var vff : RDBMS!RdbmsViewValueField = self.fields.select(s | s.name == relationViewValueFieldName).first;
						if (vff.isUndefined()) {
							// Search for relation is joined
						}
						-*-/
						
						
												
						
						-/-*
						var nvf : RDBMS!RdbmsViewValueField = attribute.equivalent("JAttributeToViewValueFieldWithoutView");
						
						if (not self.fields.includes(nvf)) {
							self.fields.add(nvf);
						}
						 
						if (baseTable == self.primaryTable) {
							
						} -*-/-
						currentRelationExpression = null;

					}
				} */
   		    }
		}
  	}
  	if (vf.isDefined()) {
  		self.fields.add(vf);
  	}
}

operation RDBMS!RdbmsView addRelationField(role : PSM!JRole) {
	var vi : RDBMS!RdbmsViewIdentifierField = new RDBMS!RdbmsViewIdentifierField();
	vi.name = role.opposite().roleAliasName(); // role.opposite().ownerClass.package.fqName() +  role.opposite().ownerClass.name + "." + role.opposite().name;
	vi.sqlName = role.roleIdSqlName();
	// v.view = s.ownerClass.equivalent("JClassToRdbmsView");
	vi.description =  role.opposite().name + " (" + role.opposite().ownerClass.name + ")";
	vi.uuid = uuid3(role.uuid, self.name);
	vi.tableField = role.opposite().equivalent("JRoleToRdbmsTableForeignKey");
	vi.`alias` = self.primaryTable;
	self.fields.add(vi);
}

