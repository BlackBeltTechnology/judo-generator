@cached
operation PSM!JRelationship relationReferenceOwnerRole() : PSM!JRole {
	var role1 : PSM!JRole = self.roles.first();
	var role2 : PSM!JRole = self.roles.second();
	
	// ("RELATIONSHIP: " + self.name + " " + role1.name + " " + role1.kind + " " + role1.lower + " " + role1.upper + " " + role2.navigable + " <--> " + role2.name + " " + role2.kind + " " + role2.lower + " " + role2.upper + " " + role2.navigable).println();
	
	if (not self.derived) {
		if (role1.upper = 1 and role2.upper = -1) {
			return role1;
		} else if (role1.upper = 1 and role2.upper = 1) {
			if (role2.kind = PSM!JAssociationKind#COMPOSITION or role2.kind = PSM!JAssociationKind#AGGREGATION or role1.lower = 1) {
				return role1;
			} else if (role1.kind = PSM!JAssociationKind#ASSOCIATION and role2.kind = PSM!JAssociationKind#ASSOCIATION and role1.lower = 0 and role2.lower = 0 and role1.name < role2.name) {
				return role1;
			}
		} else if (self.isJunction()) {
			return null;
		}
	} else {
	  return null;
	}	
    return role2;	
}

@cached
operation PSM!JRelationship isJunction () : Boolean {
	var role1 : PSM!JRole = self.roles.first();
	var role2 : PSM!JRole = self.roles.second();
	return role1.upper = -1 and role2.upper = -1;
}

@cached
operation PSM!JRelationship primaryRole() : PSM!JRole {
    var c1 : PSM!JRole =  self.roles.first();
    var c2 : PSM!JRole =  self.roles.second();
    var primary = c1;
    var secondary = c2;
    if (c1.name > c2.name) {
    	primary = c2;
    	secondary = c1;
    }
    if (primary.isUndefined) {
    	throw "No primary role found: " + self.name;
    }
    if (secondary.isUndefined) {
    	throw "No secondary role found: " + self.name;
    }
    return primary;
}

@cached
operation PSM!JRelationship secondaryRole() : PSM!JRole {
    return self.primaryRole().opposite();
}

@cached
operation PSM!JRelationship relationSqlName() : String {

	// TODO: Now it is undeterministic which is the first
 	var role1 : PSM!JRole = self.primaryRole();
 	var role2 : PSM!JRole = self.secondaryRole();

	// TODO: Now it is undeterministic which is the first
	//var role1 : PSM!JRole = self.roles.first();
	// var role2 : PSM!JRole = self.roles.second();
 
    var fullname = role1.ownerClass.package.shortName + role1.ownerClass.shortName + role1.shortName + 
    role2.ownerClass.package.shortName + role2.ownerClass.shortName + role2.shortName;
    
    fullname.println("JUNCTION: ");

    return "T_" + role1.ownerClass.sqlName() + "_" + role2.ownerClass.sqlName() + "_" + md5(fullname).substring(0,6).toUpperCase();
}
