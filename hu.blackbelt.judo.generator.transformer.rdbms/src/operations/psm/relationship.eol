@cached
operation PSM!JRelationship relationReferenceOwnerRole() : PSM!JRole {
	var role1 : PSM!JRole = self.roles.first();
	var role2 : PSM!JRole = self.roles.second();
	if (not self.derived) {
		if (role1.upper = 1 and role2.upper = -1) {
			return role1;
		} else if (role1.upper = 1 and role2.upper = 1) {
			if (role2.kind = PSM!JAssociationKind#COMPOSITION or role2.kind = PSM!JAssociationKind#AGGREGATION or role1.lower = 1) {
				return role1;
			} else if (role1.kind = PSM!JAssociationKind#ASSOCIATION and role2.kind = PSM!JAssociationKind#ASSOCIATION and role1.lower = 0 and role2.lower = 0 and role1.name < role2.name) {
				return role1;
			}
		} else if (self.isJunction()) {
			return null;
		}
	} else {
	  return null;
	}	
    return role2;	
}

@cached
operation PSM!JRelationship isJunction () : Boolean {
	var role1 : PSM!JRole = self.roles.first();
	var role2 : PSM!JRole = self.roles.second();
	return role1.upper = -1 and role2.upper = -1;
}

@cached
operation PSM!JRelationship primaryRole() : PSM!JRoles {
    var c1 : PSM!JClass =  relation.roles.first().ownerClass;
    var c2 : PSM!JClass =  relation.roles.second().ownerClass;
    var primary = c1;
    var secondary = c2;
    if (c1.name > c2.name) {
    	primary = c2;
    	secondary = c1;
    }
    return primary;
}

@cached
operation PSM!JRelationship secondaryRole() : PSM!JRoles {
    self.primaryRole().opposite();
}

operation relationSqlName(relation : PSM!JRelationship) : String {
    return "T_" + relation.primaryRole().ownerClass.sqlName() + "_" + relation.secondaryRole().ownerClass.sqlName();
}
