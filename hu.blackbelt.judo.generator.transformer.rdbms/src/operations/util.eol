operation generateUuid(namespace : String, name : String, separator : String) : String {
	return namespace + separator + name;
}

operation md5 (name : String) : String {
	return MD5Utils.md5(name);
}

operation abbreviate(text : String, maxLength : Integer) : String {
	return AbbreviateUtils.abbreviate(text, maxLength);
}

operation idType() : RDBMS!RdbmsFieldType {
	// return RDBMS!RdbmsFieldType.all.select( p | p.name = "Id").first();
	return targetModel.rdbmsFieldTypes.select( p | p.name = "Id").first();
}

operation RDBMS!EObject clone() : RDBMS!EObject {
	return EMFTool.ecoreUtil.copy(self);
}

operation parseDerivedExpression(expression : String) : Sequence {
    var parser = new Native("hu.blackbelt.judo.generator.parser.derived.expression.sql.DerivedAttributeExpressionToRdbmsModelParser");
	return parser.parseExpression(expression);
}

operation checkAllUuidsForDuplicateOrMissing() {
	var all = RDBMS!RdbmsElement.all.collect(e | e.uuid);
	var set = all.asSet();

	var duplicated : Boolean = false;

	set.size.println("SET: ");
	all.size.println("ALL: ");

	for (uuid in set) {
		if (all.count(uuid) > 1) {
			duplicated = true;
			uuid.println("DUPLICATE: ");
		}
	}
	
	RDBMS!RdbmsElement.all.select(e | e.uuid.isUndefined()).collect(e | e.name) .println("UNDEFINED: ");
	
	if (duplicated) {
		throw "Duplicated ID!";
	}
}


operation String addWithDotTo(to : String) : String {
	if (to.isDefined()) {
		return to + "." + self;
	} else {
		return self;
	}
}

operation checkForSqlNameIsNotEmpty() {
	if (RDBMS!RdbmsElement.all.select(e | e.sqlName.isUndefined()).size > 0) {
        RDBMS!RdbmsElement.all.select(e | e.sqlName.isUndefined()).collect(e | e.uuid).println("Missing SQL Name: ");
		throw "SQL Name is empty";
	}
}