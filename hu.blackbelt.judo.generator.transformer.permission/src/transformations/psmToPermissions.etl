import "jclassPermissions.etl";
import "joperationPermissions.etl";

import "../operations/_importAll.eol";

pre {
	var permissionMap : Map<String, Sequence(Permission!Permission)> = new Map();
	var oppositeMap : Map<String, Sequence(String)> = new Map();
	var classMap : Map<String, String> = new Map();
}

post {
	var permissionModel = new Permission!PermissionModel();
	permissionModel.uuid = PSM!JModel.all.first().uuid;
	permissionModel.version = "1.0.0";

	for (jclass in PSM!JClass.all) {
		if (jclass.package.participates(PSM!JLayer#OPERATION)) {
			var hostClassName : String = jclass.package.name + "." + jclass.name;
			var classPermissions : Sequence(Permission!Permission);
			var oppositeSeq : Sequence(String) = new Sequence(String);
			var currentClass = jclass;
			while (true) {
				for (jattribute in currentClass.attributes) {
					classPermissions.addAll(JAttributeToPermissions(jattribute, jclass.package, jclass));
				}
				
				for (jrole in currentClass.roles) {
					if (jrole.navigable) {
						classPermissions.addAll(JRoleToPermissions(jrole, jclass.package, jclass));
						oppositeSeq.add(jrole.opposite().ownerClass.package.name + "." + jrole.opposite().ownerClass.name);
					}
				}
				
				if (currentClass.supertype.isDefined()) {
					currentClass = currentClass.supertype;				
				} else {
					break;				
				}
			}
			
			for (joperation in jclass.operations) {
				classPermissions.add(joperation.equivalent("JOperationToPermissions"));
			}
			
			classPermissions.addAll(jclass.equivalents("JClassToPermissions"));
			
			oppositeMap.put(hostClassName, oppositeSeq);
			permissionMap.put(hostClassName, classPermissions);
			classMap.put(hostClassName, jclass.uuid);
			permissionModel.permissions.addAll(classPermissions);
			
		}
	}

	var oppositeClasses : Sequence(String);

	for (hostClassName in permissionMap.keySet()) {
		oppositeClasses = oppositeMap.get(hostClassName);
		var hostClassUuid : String = classMap.get(hostClassName);
		var classPermissions : Sequence(Permission!Permission) = permissionMap.get(hostClassName);
		permissionModel.buildObjectRoles(classPermissions, oppositeClasses, hostClassUuid, hostClassName);
	}
	
	permissionModel.buildRelationRoles();
	
	for (hostClassName in permissionMap.keySet()) {
		oppositeClasses = oppositeMap.get(hostClassName);
		permissionModel.buildEmbeddedRoles( oppositeClasses, hostClassName);
	}
	
	
	permissionModel.createAdmin();
	permissionModel.createAdminRole();
	permissionModel.createLoginRole();
	permissionModel.mustChangePasswordRole();
}