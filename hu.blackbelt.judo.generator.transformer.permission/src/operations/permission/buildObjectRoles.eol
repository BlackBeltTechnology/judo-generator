operation Permission!PermissionModel buildObjectRoles(classPermissions : Sequence(Permission!Permission), oppositeClasses : Sequence(String),
							enums : Sequence(String), hostClassUuid : String, hostClassName : String) {
							
	var oppositeList = Permission!Permission.all.select(p | oppositeClasses.includes(p.hostClassName) and p.action = "list");	
	var enumReadWrite = Permission!RelPermission.all.select(p | enums.includes(p.resource) and (p.action = "read" or p.action = "write"));
	
	enums.println("ENUMS: ");
	enumReadWrite.println("Enum READ/WRITE: ");
	
	var oppositeAttachDetach = Permission!RelPermission.all.select(p | p.otherType.equals(hostClassName) and oppositeClasses.includes(p.hostClassName)
								and (p.action = "attach" or p.action = "detach"));
	
	var readPermissions = classPermissions.select(p | p.action = "list" or p.action = "read") + oppositeList + enumReadWrite.select(p | p.action = "read");						
	var updatePermissions = classPermissions.select(p | p.action = "list" or p.action = "read" or p.action = "update" 
												 or p.action = "write" or p.action = "attach" or p.action = "detach") + oppositeAttachDetach + enumReadWrite;
	var createPermissions = classPermissions.select(p | p.action = "create") + updatePermissions;
	var managePermissions = classPermissions.select(p | p.action = "delete") + createPermissions;
	var callPermissions = classPermissions.select(p | p.action = "call");
	var fullPermissions = managePermissions + callPermissions;
	
	var readRole : Permission!Role = new Permission!Role;
	readRole.uuid = uuid3(hostClassUuid, "read");
	readRole.name = hostClassName + "_" + "read";	
	readRole.rolePermissions.addAll(readPermissions);
	self.roles.add(readRole);
	
	var updateRole : Permission!Role = new Permission!Role;
	updateRole.uuid = uuid3(hostClassUuid, "update");
	updateRole.name = hostClassName + "_" + "update";
	updateRole.rolePermissions.addAll(updatePermissions);
	self.roles.add(updateRole);
	
	var createRole : Permission!Role = new Permission!Role;
	createRole.uuid = uuid3(hostClassUuid, "create");
	createRole.name = hostClassName + "_" + "create";
	createRole.rolePermissions.addAll(createPermissions);
	self.roles.add(createRole);
	
	var manageRole : Permission!Role = new Permission!Role;
	manageRole.uuid = uuid3(hostClassUuid, "manage");
	manageRole.name = hostClassName + "_" + "manage";
	manageRole.rolePermissions.addAll(managePermissions);
	self.roles.add(manageRole);
	
	if (callPermissions.size() > 0) {
		var callRole : Permission!Role = new Permission!Role;
		callRole.uuid = uuid3(hostClassUuid, "call");
		callRole.name = hostClassName + "_" + "call";
		callRole.rolePermissions.addAll(callPermissions);
		self.roles.add(callRole);
	}
	
	var fullRole : Permission!Role = new Permission!Role;
	fullRole.uuid = uuid3(hostClassUuid, "full");
	fullRole.name = hostClassName + "_" + "full";
	fullRole.rolePermissions.addAll(fullPermissions);
	self.roles.add(fullRole);
}