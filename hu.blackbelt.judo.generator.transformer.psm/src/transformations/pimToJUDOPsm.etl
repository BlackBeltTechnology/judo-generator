import "modules/element.etl";
import "modules/model.etl";
import "modules/package.etl";
import "modules/class.etl";
import "modules/property.etl"; // something wrong is here :) TODO: debug transformation... to find the root cause
////import "modules/role.etl";
import "modules/enumeration.etl";
import "modules/operation.etl";
import "modules/relationship.etl";
import "modules/parameter.etl";
import "modules/stateMachine.etl";

import "pre/collectJUDOStereotypes.etl";

pre {

	var modelName = "Model";
	var frameworkPkgPath = "judo module::judo"; // any distinction betwen "judo" and "judo::framework" ??
	var tgtModel;
	inpPIM!rest.allInstances().size().println();
	var stereotypeApplications : Map = collectJUDOStereotypeInstances();
	var frameworkQName = inpPIM!Model.allInstances()->selectOne(m | m.name = modelName).name + "::" + frameworkPkgPath;	
	
	frameworkPkgPath.println();
	frameworkQName.println();
	
}

post {
	"POST processing STARTED:".println();
	
	// set attributesForListing on all Classes
	stereotypeApplications.get("list").setAttrForListingAssocs();
	
	// set attributeOrder on all Classes
	stereotypeApplications.get("order").setAttrOrderAssocs();
	
	for (je in tgtPSM!JElement.all) {
		if (je.participates.size = 0) {
			je.participates.add(tgtPSM!JLayer#ALL);
		}
	}
	
	for (jc in tgtPSM!JClass.all.select(c | c.supertype.isUndefined() and c.participates(tgtPSM!JLayer#PERSISTENCE) and not c.framework)) {
		jc.attributes.add(createDefaultAttribute("auditCreateUser").uuid(jc.uuid).technical().type(getPSMPrimitiveType("String")).private());
		jc.attributes.add(createDefaultAttribute("auditCreateTime").uuid(jc.uuid).technical().type(getPSMPrimitiveType("datetime")).private());
		jc.attributes.add(createDefaultAttribute("auditUpdateUser").uuid(jc.uuid).technical().type(getPSMPrimitiveType("String")).private());
		jc.attributes.add(createDefaultAttribute("auditUpdateTime").uuid(jc.uuid).technical().type(getPSMPrimitiveType("datetime")).private());
		jc.attributes.add(createDefaultAttribute("guid").uuid(jc.uuid).technical().unique().type(getPSMPrimitiveType("String")).private());
		jc.attributes.add(createDefaultAttribute("xmiid").uuid(jc.uuid).technical().type(getPSMPrimitiveType("String")).private());
		jc.attributes.add(createDefaultAttribute("id").uuid(jc.uuid).technical().type(getPSMPrimitiveType("Id")).private());
	}
	
	"POST processing FINISHED.".println();
}

operation addIdToEntities () : Any {
	var entities = tgtPSM!JClass.all.select(c | c.participates(PSM!JLayer#PERSISTENCE) and not c.hasSuperType() );
	for (e in entities) { 
		var id = new PSM!JAttribute;
		id.ownerClass = e;
		id.type = PSM!JPrimitive.all.select(p | p.useForIdType).first();
		id.name = "id";
		id.uuid = uuid3(e.uuid, id.name);
	}
}

// 'self' is map of classes to "listing Specifications"
// works on tgtPSM!Properties, modifies tgtPSM!Classes in-place 
// !!! DOES NOT RETAIN ORDER!!
operation Map setAttrForListingAssocs() {
	var classes = self.keySet();
	
	for (c in classes) { // classes, constrained by <<list>>
		var targetClass = c.equivalent();
		var listing = self.get(c).split("\n");
		
		listing.println("Listing for " + c.name + " : ");
		for (attr in c.attribute->select( a | listing.includes( a.name ))) {
			targetClass.attributesForListing.add( attr.equivalent() );
		}
	}
}

// 'self' is map of classes to "order Specifications"
// works on tgtPSM!Properties, modifies tgtPSM!Classes in-place 
// RETAINS ATTRIBUTE ORDER
operation Map setAttrOrderAssocs() {
	var classes = self.keySet();
	for (c in classes) {
		var targetClass = c.equivalent();
		var position = 1;
		var orderGroups = self.get(c).split("\n");
		var groupName;
		var fieldNames = new Sequence;
		orderGroups.println("Order for " + c.name + " : ");
	    for (og in orderGroups) {
	        var splitted = og.split(" ");
	        if (splitted.at(0).charAt(0) == "-") {
	            groupName = splitted.at(0).substring(1);
	            fieldNames.addAll(splitted.sublist(1, splitted.size()));
	        } else {
	        	groupName = splitted.at(0);
	            fieldNames = splitted;
	        }
	
	        var attrGroup = new tgtPSM!JUIAttributeGroup(groupName);
	        attrGroup.uuid = uuid3(targetClass.uuid, groupName);
	        attrGroup.position = position;
	        targetClass.attributeOrder.add(attrGroup);
	
	        for (fn in fieldNames) {
	        	fn.println("FN: ");
	        	c.println("IN CLASS: ");
	        	var attrInPIM = c.allAttributes()->selectOne( attr | attr.name = fn).println("ORDERED ATTR: ");
	            attrGroup.attributes.add(attrInPIM.equivalent());
	        }
	        position += 1;
	    }
	}
}
