import "../../operations/_importAll.eol";

@abstract
rule Element
	transform s : Element
	to		  t : tgtPSM!JElement {
	
	t.uuid = mdId2Uuid(s.id);
	
	if ( stereotypeApplications.get("screen").includes(s)) {
		 t.participates.add( tgtPSM!JLayer#SCREEN);
	}

	s.println("RULE::Element - SOURCE : ");
}

@abstract
rule NamedElement
	transform s : NamedElement
	to		  t : tgtPSM!JElement 
	extends Element{
	
	t.name = s.name;
	
	if ( stereotypeApplications.get("shortname").containsKey(s) ) {
		t.shortName = stereotypeApplications.get("shortname").get(s);
		"RULE::NamedElement : MAPPING shortname : ".println( t.shortName + " to element : " + s.name); 
	}
	
	switch (s.visibility) {
		case VisibilityKind#private 	: t.visibility = tgtPSM!JVisibility#PRIVATE;
		case VisibilityKind#protected 	: t.visibility = tgtPSM!JVisibility#PROTECTED;
		case VisibilityKind#package 	: t.visibility = tgtPSM!JVisibility#PACKAGE;
		default							: t.visibility = tgtPSM!JVisibility#PUBLIC;
	}
	
	//t.framework = s.qualifiedName.startsWith( frameworkQName ); //  check why XMI2HUTN bridge does not emits this value?

	if ( s.qualifiedName.isDefined()) {
		s.qualifiedName.startsWith( frameworkQName ).println("s.qualifiedName.startsWith : ");
		t.framework = s.qualifiedName.startsWith( frameworkQName );
	} else {
		s.owner.println("RULE::NamedElement - src.owner : ");
		s.owner.equivalent("Package").println("RULE::NamedElement - src.owner.equiv : ");
		if (s.owner.equivalent().isDefined()) {
			t.framework = s.owner.equivalent().framework;
		} else {
			t.framework = false; 
		}
	}
	
	s.fullyQualifiedPath().println("RULE::NamedElement ON ==> ");
}

@abstract
rule PackageableElement
	transform s : PackageableElement
	to        t : JElement {
	
	guard: s.owner.isTypeOf( Package )
	
	t.package ::= s.owner;

	"".println("RULE::PackageableElement");
} 

@primary
@abstract
rule TypedElement
	transform s : TypedElement
	to        t : tgtPSM!JTypedElement
	extends NamedElement {
	
	guard: s.type.isDefined()
	
	if (s.type.isTypeOf(Class) and s.type.equivalent().isDefined()) {
		t.type ::= s.type;
	} else if (s.type.isTypeOf(PrimitiveType)) {
		t.type = s.type.getEquivalentPrimType();
	} else if (s.type.isTypeOf(Enumeration)) {
		t.type = s.type.equivalent("Enum2CorrespondingValueClass");
	} else {
		s.type.println("RULE::TypedElement -- TYPE is undefined: ");

	}

	"".println("RULE::TypedElement");
}

operation transformTypedElement (s : TypedElement) : tgtPSM!JTypedElement {
	
}

