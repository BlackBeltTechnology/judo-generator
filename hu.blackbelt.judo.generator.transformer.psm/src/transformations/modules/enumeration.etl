import "../../operations/_importAll.eol";
import "element.etl";

@primary
rule Enumeration
	transform s : Enumeration
	to        t : tgtPSM!JEnumeration
	extends NamedElement, PackageableElement {
	
	guard: 	s.owner.equivalent("Package").isDefined() and
			stereotypeApplications.get("fixedEnum").includes(s)

	t.uuid = uuid3(t.uuid, "Enum");
	t.name = t.name + "Enum";
	s.owner.equivalent("Package").enumerations.add( t);
	
	"".println("RULE::Enumeration");
}

rule Enum2CorrespondingValueClass
	transform s : Enumeration
	to        t : tgtPSM!JClass, enumValueClass  						: tgtPSM!JClass, 
								 enumEnumValueRelation 					: tgtPSM!JRelationship,
								 enumClassRole 							: tgtPSM!JRole,
								 enumValueClassRole 					: tgtPSM!JRole,
								 enumValueClassLangClassRelationship 	: tgtPSM!JRelationship,
								 enumValueClassRole2nd 					: tgtPSM!JRole,
								 langClassRole 							: tgtPSM!JRole
	extends NamedElement {

	guard: 	s.owner.equivalent("Package").isDefined()
	
	var tgtPkg : tgtPSM!JPackage = s.owner.equivalent("Package");
	var isFrameworkElmt = tgtPkg.framework;
	
	s.owner.equivalent("Package").classes.add(t);
	
	if ( s.equivalent("Enumeration").isDefined() ) {
		s.equivalent("Enumeration").classRepresentation = t;
	}
	
	enumValueClass.uuid = uuid3(mdId2Uuid(s.id), "enumValueClass");
	
	tgtPkg.classes.add(enumValueClass);
	
	enumValueClass.initClassDefaults();
	
	enumValueClass.name = t.name.concat("Value");
	enumValueClass.framework = isFrameworkElmt;
	
 	enumValueClass.attributes.add( createDefaultAttribute("langcode").uuid(enumValueClass.uuid).type(getPSMPrimitiveType("String")).derived().value("{self.language.code}"));
 	
 	// create a new relation : enumEnumValueRelation
 	var enumClassRoleName = s.name.firstToLowerCase();
 	var enumValueClassRoleName = enumValueClass.name.firstToLowerCase();
 	var relationName = enumClassRoleName.concat( "-" ).concat( enumValueClassRoleName );
 	
 	enumEnumValueRelation.name = relationName;
 	enumEnumValueRelation.uuid = uuid3(t.uuid, "enumValueRelation");
 	enumEnumValueRelation.framework = isFrameworkElmt;
 	tgtPkg.relationships.add( enumEnumValueRelation );
 	
 	// enumClassRole
 	enumClassRole.name = enumClassRoleName;
 	enumClassRole.uuid = uuid3(t.uuid, "enumClassRole");
 	enumClassRole.framework = isFrameworkElmt;
 	enumEnumValueRelation.roles.add( enumClassRole );
 	
 	enumClassRole.ownerClass = enumValueClass;
 	enumValueClass.roles.add( enumClassRole );
 	
 	// enumValueClassRole
 	enumValueClassRole.name = enumValueClassRoleName;
 	enumValueClassRole.uuid = uuid3(t.uuid, "enumValueClassRole");
 	enumValueClassRole.framework = isFrameworkElmt;
 	enumEnumValueRelation.roles.add( enumValueClassRole );

	enumValueClassRole.ownerClass = tgtPSM!JClass.allInstances()->select( c | c.package = s.owner.equivalent("Package") and 
											  								  c.name = s.name ).first();
	enumValueClassRole.ownerClass.roles.add( enumValueClassRole );
	
	var langClass = tgtPSM!JClass.allInstances()->select(c | c.name = "Language" and c.framework).first(); // TODO: make it fully specified via Qualified name

	// reassignment - adding "Values" to the end of the yet defined name
	enumValueClassRoleName = enumValueClassRoleName.concat("Values"); 
	var enumValueClassLangClassRelationshipName = enumValueClassRoleName.concat("-").concat( langClass.name.firstToLowerCase());
	
	enumValueClassLangClassRelationship.name = enumValueClassLangClassRelationshipName;
	enumValueClassLangClassRelationship.uuid = uuid3(t.uuid, "enumValueClassLangRelationship");
 	enumValueClassLangClassRelationship.framework = isFrameworkElmt;
	tgtPkg.relationships.add( enumValueClassLangClassRelationship );
	
 	// enumValueClassRole
 	enumValueClassRole2nd.name = enumValueClassRoleName;
 	enumValueClassRole2nd.uuid = uuid3(t.uuid, "enumValueClassRole2nd");
 	enumValueClassLangClassRelationship.roles.add( enumValueClassRole2nd );

	enumValueClassRole2nd.ownerClass = langClass;
 	enumValueClassRole2nd.framework = isFrameworkElmt;
	enumValueClassRole2nd.ownerClass.roles.add( enumValueClassRole2nd );
	
	// languageClassRole						 	
 	langClassRole.name =  langClass.name.firstToLowerCase();
 	langClassRole.uuid = uuid3(t.uuid, "langClassRole");
 	langClassRole.framework = isFrameworkElmt;
 	enumValueClassLangClassRelationship.roles.add( langClassRole );
 	
 	langClassRole.ownerClass = enumValueClass;
 	langClassRole.ownerClass.roles.add( langClassRole ); 
 }

@primary
rule EnumerationLiteral
	transform s : EnumerationLiteral
	to t : tgtPSM!JLiteral
	extends NamedElement {
	
	guard: s.owner.equivalent("Enumeration").isDefined()

	t.name = s.name;
	s.owner.equivalent("Enumeration").literals.add( t);
	
	"".println("RULE::EnumerationLiteral");
}

/*
rule EnumUsage2Relationship
	transform s : Property
	to        t : tgtPSM!JRelationship, enumRole : tgtPSM!JRole,
										clientRole : tgtPSM!JRole
	extends NamedElement {

	guard : s.owner.owner.equivalent("Package").isDefined() and
			s.type.isTypeOf( Enumeration ) and
			s.owner.isTypeOf( Class )
			
	var enumRoleName = s.owner.name.firstToLowerCase()
						.concat( s.type.name.firstToUpperCase())
						.concat("Inverse");
	var clientRoleName =  s.type.name.firstToLowerCase();
	var name = enumRoleName.concat( "-" ).concat( clientRoleName );
	var pkg = s.owner.owner.equivalent("Package");
	var isFrameworkElmt = pkg.framework;
				
	t.name = name;
 	t.framework = isFrameworkElmt;
	pkg.relationships.add( t );
	
	enumRole.name = enumRoleName;
 	enumRole.framework = isFrameworkElmt;
	enumRole.ownerClass = tgtPSM!JClass.allInstances()->select( c | c.package = s.type.owner.equivalent("Package") and 
											  						c.name = s.type.name ).first();
	t.roles.add( enumRole );
	 
	clientRole.name = clientRoleName;
 	clientRole.framework = isFrameworkElmt;
	clientRole.ownerClass ::= s.owner;
	t.roles.add( clientRole);
	
	dumpEnumUsage2Relationship( s);
	"".println("RULE::EnumUsage2Relationship");
}*/

operation dumpEnumUsage2Relationship( s : Property) {
	s.println("RULE::EnumUsage2Relationship Property : ");
	s.type.println("RULE::EnumUsage2Relationship TYPE of Property : ");
	s.type.qualifiedName.println("EnumEQUIVClass : ");	 
	s.type.equivalent("Enumeration").println("RULE::EnumUsage2Relationship EQUIV TYPE of Property : ");
	s.owner.println("RULE::EnumUsage2Relationship OWNER of Property : ");
	s.owner.equivalent("Class").println("RULE::EnumUsage2Relationship EQUIV of Property OWNER : ");
	s.owner.owner.equivalent("Package").println("RULE::EnumUsage2Relationship EQUIV OWNER PKG of Property : ");
	tgtPSM!JClass.allInstances()->select( c | c.package = s.type.owner.equivalent("Package") and 
											  c.name = s.type.name ).first().println("EnumEQUIVClass : ");
}
