[%
  import "../../operations/_importAll.eol";
  import "../../main.egl";
  out.setContentType("Java");
%]

package [%=class.packageFqName()%];

import com.google.common.collect.ImmutableMap;

import hu.blackbelt.judo.rdbms.querydsl.api.QueryDslContext;

import com.querydsl.core.types.Path;
import com.querydsl.core.types.PathMetadata;
import com.querydsl.core.types.QBean;
import com.querydsl.core.types.dsl.SimplePath;
import com.querydsl.core.types.dsl.NumberPath;
import com.querydsl.core.types.dsl.StringPath;
import com.querydsl.core.types.dsl.BooleanPath;
import com.querydsl.core.types.dsl.DateTimePath;
import com.querydsl.core.types.dsl.TimePath;
import com.querydsl.core.types.dsl.DatePath;
import com.querydsl.core.types.dsl.EnumPath;

import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.LocalDate;

import com.querydsl.sql.ColumnMetadata;

import [%=class.poClassFqName()%];

import javax.annotation.Nullable;
import javax.annotation.Generated;
import java.sql.Types;
import java.net.URL;
import java.util.Map;

import static com.querydsl.core.types.PathMetadataFactory.forVariable;
import static com.querydsl.core.types.Projections.bean;

@Generated("com.querydsl.sql.codegen.MetaDataSerializer")
public class [%=class.name%] extends QueryDslContext<[%=class.name%], [%=class.poClassName()%]> {
    public static final [%=class.name%] q = new [%=class.name%]("[%=class.view.sqlName%]");

    // Constructors
    /**
     * Constructs [%=class.name%] and sets the PathBase. It inherits the parent schema and all reured property which is shared
     * in the query which created by the root.
     *
     * @param parent
     */
    public [%=class.name%](QueryDslContext parent) {
        super([%=class.name%].class, [%=class.poClassName()%].class,
            forVariable(parent.getAliasGenerator().getNextForName("[%=class.originName%]")), parent.getSchemaName(), "[%=class.view.sqlName%]");
        super.setAliasGenerator(parent.getAliasGenerator());
        addMetadata();
    }

    /**
     * Constructs [%=class.name%] and sets the PathBase. It initializes all required metadata to connect other entities.
     *
     * @param variable The alias name of table. In the queries, joins and projections this name will be used
     */
    public [%=class.name%](String variable) {
        super([%=class.name%].class, [%=class.poClassName()%].class, forVariable(variable), null, "[%=class.view.sqlName%]");
        addMetadata();
    }

    /**
     * Constructs [%=class.name%] and sets the PathBase. The DB Schema and alternative table name can be given. It is usefull
     * when there are tables with same structure as original and every other things are handled same. It
     * initializes all required metadata to connect other entities.
     *
     * @param variable The alias name of table. In the queries, joins and projections this name will be used
     * @param schema The schema name of table (prefix)
     * @param table The table name is used for mapping
     */
    public [%=class.name%](String variable, String schema, String table) {
        super([%=class.name%].class, [%=class.poClassName()%].class, forVariable(variable), schema, table);
        addMetadata();
    }

    // Attribute definitions
    public final NumberPath<Long> id = createNumber("id", Long.class);
    [% for (field in class.view.fields) { 
    		if (not field.isTypeOf(QUERYDSL!QueryDslInverseRelationIdentifierField)) {%]
    		[% if (field.isTypeOf(QUERYDSL!QueryDslRelationIdentifierField)) {%]
        		public final [%=field.pathType()%] [%=field.foreignKeyName%] = [%=field.pathFactory()%]("[%=field.foreignKeyName%]"[%=(field.pathGeneric().length > 0).ternary(", " + field.pathGeneric(), "")%]);
        	[%} else {%]
        		public final [%=field.pathType()%] [%=field.name%] = [%=field.pathFactory()%]("[%=field.name%]"[%=(field.pathGeneric().length > 0).ternary(", " + field.pathGeneric(), "")%]);
        	[%}%]
    [%}}%]

    // Physical key and foreig key definitions
    public class PrimaryKeys {
        public final com.querydsl.sql.PrimaryKey<[%=class.name%]> [%=class.name.substring(1).toLowerCase()%] = createPrimaryKey(id);
    }

    // Forign key handles normal relation when this table references the other and invers relation when the other table references to our table
    public class ForeignKeys {
        [% for (foreignKey in class.view.getForeignKeys()) {%]
        public final com.querydsl.sql.ForeignKey<[%=foreignKey.getOppositeOwnerClass().packageFqName()%].[%=foreignKey.getOppositeOwnerClass().name%]> [%=foreignKey.name%] = createForeignKey([%=foreignKey.foreignKeyName%], "ID");
        [% } %]
        [% for (invKey in class.view.getInvKeys()) {%]
        public final com.querydsl.sql.ForeignKey<[%=invKey.getOppositeOwnerClass().packageFqName()%].[%=invKey.getOppositeOwnerClass().name%]> [%=invKey.name%] = createInvForeignKey(id, "[%=invKey.getOppositeForeignKey().sqlName%]");
        [%}%]
        [% for (nmKey in class.view.getNmKeys()) {%]
        public final com.querydsl.sql.ForeignKey<[%=nmKey.junctionTable.packageName%].[%=nmKey.junctionTable.name%]> junction_[%=nmKey.name%] = createInvForeignKey(id, "[%=nmKey.otherForeignKey().sqlName%]");
        [%}%] 
    }

    public final PrimaryKeys pk = new PrimaryKeys();
    public final ForeignKeys fk = new ForeignKeys();

    // Add all required metadata. It stores the modell specific types to be able to map via DSL and Name based dynamic build
    // It maps the attributes and relations to phisical database fields and foreign keys
    private void addMetadata() {
        addMetadata("id", id, ColumnMetadata.named("id").ofType(Types.BIGINT));
        [% for (field in class.view.fields) {%]
        [% if (not field.isTypeOf(QUERYDSL!QueryDslInverseRelationIdentifierField)) {%]
        	[% if (field.isTypeOf(QUERYDSL!QueryDslRelationIdentifierField)) {%]
        		addMetadata("[%=field.foreignKeyName%]", [%=field.foreignKeyName%], ColumnMetadata.named("[%=field.sqlName%]").ofType(Types.[%=field.rdbmsTypeName%]));
        	[%} else {%]
        		addMetadata("[%=field.name%]", [%=field.name%], ColumnMetadata.named("[%=field.sqlName%]").ofType(Types.[%=field.rdbmsTypeName%]));
        	[%}%]
        [%}%]
        [% } %]
        [% for (foreignKey in class.view.getForeignKeys()) {%]
        addRelationInfo("[%=foreignKey.javaReference.name%]", "[%=foreignKey.javaReference.opposite.name%]", [%=foreignKey.getOppositeOwnerClass().packageFqName()%].[%=foreignKey.getOppositeOwnerClass().name%].class, null, [%=foreignKey.getOppositeOwnerClass().poClassFqName()%].class, fk.[%=foreignKey.name%],
            [% if(foreignKey.javaReference.upper = 1) { out.print(false);} else {out.print(true);}%], false, [% if(foreignKey.javaReference.lower = 1) { out.print(true);} else {out.print(false);}%], "[%=foreignKey.javaReference.options%]");
        [% } %]
        [% for (invKey in class.view.getInvKeys()) {%]
        addRelationInfo("[%=invKey.javaReference.name%]", "[%=invKey.javaReference.opposite.name%]", [%=invKey.getOppositeOwnerClass().packageFqName()%].[%=invKey.getOppositeOwnerClass().name%].class, null, [%=invKey.getOppositeOwnerClass().poClassFqName()%].class, fk.[%=invKey.name%],
            [% if(invKey.javaReference.upper = 1) { out.print(false);} else {out.print(true);}%], true, [% if(invKey.javaReference.lower = 1) { out.print(true);} else {out.print(false);}%], "[%=invKey.javaReference.options%]");
        [%}%]
        [% for (nmKey in class.view.getNmKeys()) {%]
        addRelationInfo("[%=nmKey.name%]", "[%=nmKey.otherForeignKey().name%]", [%=nmKey.otherForeignKey().javaClass.packageFqName()%].[%=nmKey.otherForeignKey().javaClass.name%].class, [%=nmKey.junctionTable.packageName%].[%=nmKey.junctionTable.name%].class, [%=nmKey.otherForeignKey().javaClass.poClassFqName()%].class, fk.junction_[%=nmKey.name%], true, true, false, "");
        [%}%]
    }


    private static final Map<String, Getter<[%=class.poClassName()%], ?>> getters = ImmutableMap.<String, Getter<[%=class.poClassName()%], ?>>builder()
    		.put("id", new Getter<[%=class.poClassName()%], Long>() {
            		@Nullable
            		@Override
            		public Long get(@Nullable [%=class.poClassName()%] instance) {
                		return instance.getId();
            		}
        	})
        [% for (attr in class.attributes()) { %]
            .put("[%=attr.name.firstToLowerCase()%]", new Getter<[%=class.poClassName()%], [%=attr.typeFqName%]>() {
                    @Nullable
                    @Override
                    public [%=attr.typeFqName%] get(@Nullable [%=class.poClassName()%] input) {
                        return input.get[%=attr.name.firstToUpperCase()%]();
                    }
            })
        [%}%]
        [% for (ref in class.references()) { %]
            .put("[%=ref.name.firstToLowerCase()%]", new Getter<[%=class.poClassName()%], [%=ref.typeFqName%]>() {
                    @Nullable
                    @Override
                    public [%=ref.typeFqName%] get(@Nullable [%=class.poClassName()%] input) {
                        return input.get[%=ref.name.firstToUpperCase()%]();
                    }
            })
        [%}%]
        .build();

    private static final Map<String, Setter<[%=class.poClassName()%], Object>> setters = ImmutableMap.<String, Setter<[%=class.poClassName()%], Object>>builder()
    		.put("id", new Setter<[%=class.poClassName()%], Object>() {
            	@Nullable
            	@Override
            	public void set(@Nullable [%=class.poClassName()%] instance, @Nullable Object value) {
                	instance.setId((Long) value);
           		}
        	})
        [% for (attr in class.attributes()) { %]
            .put("[%=attr.name%]", new Setter<[%=class.poClassName()%], Object>() {
                @Nullable
                @Override
                public void set(@Nullable [%=class.poClassName()%] instance, @Nullable Object value) {
                    instance.set[%=attr.name.firstToUpperCase()%](([%=attr.typeFqName%]) value);
                }
            })
        [%}%]
        [% for (ref in class.references()) { %]
            .put("[%=ref.name%]", new Setter<[%=class.poClassName()%], Object>() {
                @Nullable
                @Override
                public void set(@Nullable [%=class.poClassName()%] instance, @Nullable Object value) {
                    instance.set[%=ref.name.firstToUpperCase()%](([%=ref.typeFqName%]) value);
                }
            })
        [%}%]
        .build();

    @Override
    public Object getMember([%=class.poClassName()%] obj, String memberName) {
        if (memberName.startsWith("$")) {
            return null;
        } else if (!getters.containsKey(memberName)) {
            throw new IllegalArgumentException("Unknown member: " + memberName);
        } else return getters.get(memberName).get(obj);
    }

    @Override
    public void setMember([%=class.poClassName()%] obj, String memberName, Object value) {
        if (memberName.startsWith("$")) {
        } else if (!setters.containsKey(memberName)) {
            throw new IllegalArgumentException("Unknown member: " + memberName);
        } else setters.get(memberName).set(obj, value);
    }
}
