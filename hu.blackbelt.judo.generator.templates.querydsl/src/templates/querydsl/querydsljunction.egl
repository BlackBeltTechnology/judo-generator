[%
  import "../../operations/_importAll.eol";
  import "../../main.egl";
  out.setContentType("Java");
%]

package [%=topPackageName + ".querydsl"%];

import com.querydsl.core.types.dsl.NumberPath;
import com.querydsl.sql.ColumnMetadata;
import [%=junction.foreignKey1.javaClass.packageName + ".querydsl"%].[%=junction.foreignKey1.javaClass.name%];
import [%=junction.foreignKey2.javaClass.packageName + ".querydsl"%].[%=junction.foreignKey2.javaClass.name%];
import hu.blackbelt.judo.rdbms.querydsl.api.JunctionPo;
import hu.blackbelt.judo.rdbms.querydsl.api.QueryDslContext;
import com.querydsl.sql.ForeignKey;
import com.querydsl.sql.PrimaryKey;

import javax.annotation.Generated;
import java.sql.Types;

import static com.querydsl.core.types.PathMetadataFactory.forVariable;

/**
 * Special juinction table handler QType. It is requred to handle n m relation correctly.
 */

@Generated("com.querydsl.sql.codegen.MetaDataSerializer")
public class [%=junction.name%] extends QueryDslContext<[%=junction.name%], JunctionPo> {
    public static final [%=junction.name%] q = new [%=junction.name%]("[%=junction.sqlName%]");

    // Constructors

    /**
     * Contsucts [%=junction.name%] and sets the PathBase. It inherits the parent schema and all reured property which is shared
     * in the query which created by the root.
     *
     * @param parent
     */
    public [%=junction.name%](QueryDslContext parent) {
        super([%=junction.name%].class, JunctionPo.class,
                forVariable(parent.getAliasGenerator().getNextForName("[%=junction.foreignKey1.sqlName.toUpperCase()%][%=junction.foreignKey2.sqlName.toUpperCase()%]")), parent.getSchemaName(), "[%=junction.sqlName%]");
        super.setAliasGenerator(parent.getAliasGenerator());
        addMetadata();
    }

    /**
     * Constructs [%=junction.name%] and sets the PathBase. It initializes all required metadata to connect other entities.
     *
     * @param variable The alias name of table. In the queries, joins and projections this name will be used
     */
    public [%=junction.name%](String variable) {
        super([%=junction.name%].class, JunctionPo.class, forVariable(variable), null, "[%=junction.sqlName%]");
        addMetadata();
    }

    /**
     * Constructs [%=junction.name%] and sets the PathBase. The DB Schema and alternative table name can be given. It is usefull
     * when there are tables with same structure as original and every other things are handled same. It
     * initializes all required metadata to connect other entities.
     *
     * @param variable The alias name of table. In the queries, joins and projections this name will be used
     * @param schema   The schema name of table (prefix)
     * @param table    The table name is used for mapping
     */
    public [%=junction.name%](String variable, String schema, String table) {
        super([%=junction.name%].class, JunctionPo.class, forVariable(variable), schema, table);
        addMetadata();
    }

    // Attribute definitions
    public final NumberPath<Long> id = createNumber("id", Long.class);

    public final NumberPath<Long> [%=junction.foreignKey1.name%] = createNumber("mId", Long.class);
    public final NumberPath<Long> [%=junction.foreignKey2.name%] = createNumber("nId", Long.class);

    /* It is not used, because initialization can be circular
    // Relations to other direct entities
    */
    // Physical key and foreig key definitions
    public class PrimaryKeys {
        public final PrimaryKey<[%=junction.name%]> classn1m1 = createPrimaryKey(id);
    }

    // Forign key handles normal relation when this table references the other and invers relation when the other table references to our table
    public class ForeignKeys {
        public final ForeignKey<[%=junction.foreignKey1.javaClass.name%]> m = createForeignKey([%=junction.name%].this.[%=junction.foreignKey1.otherForeignKey().name%], "ID");
        public final ForeignKey<[%=junction.foreignKey2.javaClass.name%]> n = createForeignKey([%=junction.name%].this.[%=junction.foreignKey2.otherForeignKey().name%], "ID");
    }

    public final PrimaryKeys pk = new PrimaryKeys();
    public final ForeignKeys fk = new ForeignKeys();

    // Add all required metadata. It stores the modell specific types to be able to map via DSL and Name based dynamic build
    // It maps the attributes and relations to phisical database fields and foreign keys
    private void addMetadata() {
        addMetadata("id", id, ColumnMetadata.named("id").ofType(Types.BIGINT));
        addMetadata("[%=junction.foreignKey1.name%]", [%=junction.foreignKey1.name%], ColumnMetadata.named("[%=junction.foreignKey1.sqlName%]").ofType(Types.BIGINT));
        addMetadata("[%=junction.foreignKey2.name%]", [%=junction.foreignKey2.name%], ColumnMetadata.named("[%=junction.foreignKey2.sqlName%]").ofType(Types.BIGINT));
        addRelationInfo("[%=junction.foreignKey1.name%]", "[%=junction.foreignKey2.name%]", [%=junction.foreignKey1.otherForeignKey().javaClass.name%].class, null, [%=junction.foreignKey1.otherForeignKey().javaClass.poClassFqName()%].class, fk.m, false, false, false, "");
        addRelationInfo("[%=junction.foreignKey2.name%]", "[%=junction.foreignKey1.name%]", [%=junction.foreignKey2.otherForeignKey().javaClass.name%].class, null, [%=junction.foreignKey2.otherForeignKey().javaClass.poClassFqName()%].class, fk.n, false, false, false, "");
    }

    @Override
    public Object getMember(JunctionPo obj, String memberName) {
        if ("id".equals(memberName)) {
            return obj.getId();
        }
        else if ("[%=junction.foreignKey1.name%]".equals(memberName)) {
            return obj.getMId();
        }
        else if ("[%=junction.foreignKey2.name%]".equals(memberName)) {
            return obj.getNId();
        }
        throw new IllegalArgumentException("Unknown member: " + memberName);
    }

    @Override
    public void setMember(JunctionPo obj, String memberName, Object value) {
        if ("id".equals(memberName)) {
            obj.setId((Long) value);
        }
        else if ("[%=junction.foreignKey1.name%]".equals(memberName)) {
            obj.setMId((Long) value);
        }
        else if ("[%=junction.foreignKey2.name%]".equals(memberName)) {
            obj.setNId((Long) value);
        }
        throw new IllegalArgumentException("Unknown member: " + memberName);
    }

}
