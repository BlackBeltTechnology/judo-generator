@namespace(uri="http://blackbelt.hu/judo/meta/psm/ui", prefix="ui")
package ui;

class UIRule extends Identifiable {
  attr String[1] rule;

  @GenModel(documentation="Nyelvesítéshez azonosító.")
  attr String[1] vocabularyKey;
  attr boolean[1] inherited;
}

abstract class UIContainer extends Identifiable {
  val UIField[*] fields;
}

class UIModule extends Identifiable {
  attr String[1] fullyQualifiedName;
  val UIClass[*] classes;
  attr String[1] version;
}

class UIClass extends UIContainer {
  val UIAction[*] actions;
  val UIClassView[*] classViews;
  val UIListView[*] listViews;
  ref UIClassView[*] childObjectViews;
  attr boolean[1] ~abstract;
  ref UIListView[1]#ownerClass selector;
  attr boolean[1] ~readonly;
  attr boolean[1] enumClass;
  attr boolean[1] singleton;
  ref UIClass ~super;
  ref UIAttribute representation;
}

class UIAction extends UIContainer {
  val UIParamView[1] paramView;
  attr boolean[1] inherited;
  attr boolean[1] classBased;
  attr boolean[1] toBeConfirmed;
  attr boolean[1] notBulk;
  attr boolean[1] isQuery;
  val UIResultView resultView;
  val UIField result;
}

class UIViewField extends Identifiable {
  attr int[1] position = 0;
  attr boolean[1] searchable;
  attr int[1] order = 0;
  attr boolean[1] show = true;
  ref UIField[1] field;
}

class UIViewFieldSet extends Identifiable {
  val UIViewField[*] viewFields;
  attr int[1] position = 1;
}

abstract class UIView extends Identifiable {
  val UIViewFieldSet[*] viewFieldSets;
  attr int[1] pageSize = 1;
  attr boolean[1] isDefault = true;
  attr int[1] columns = 2;
}

class UIBase {
  val UIModule[*] modules;
  val UIMenuItem[1] menu;
  val UIInfo[1] info;
  val UIComponentType[*] types;
}

abstract class Identifiable {
  id attr String[1] uuid;
  attr String[1] name;
}

class UIMenuItem extends Identifiable {
  ref UIView menuView;
  val UIFilter[*] filters;
  val UIMenuItem[*] menuItems;
}

class UIFilter {
  attr String[1] attribute;
  attr String[1] operator;
  attr String[1] value;
  attr boolean[1] fixed = true;
}

class UIInterval {
  attr int min;
  attr int max;
  attr int step = 1;
}

class UIInfo {
  attr String userClass;
  attr String[*] versions;
}

class UIComponentType extends Identifiable {
}

abstract class UIField extends Identifiable {
  ref UIComponentType[1] componentType;
  val UIInterval[*] intervals;
  attr boolean[1] ~readonly;
  attr boolean[1] private;
  attr boolean[1] inherited;
  attr boolean[1] representation = false;
  attr String value;
  attr boolean ~derived;
  attr String[1] lower;
  attr String[1] upper;
  attr String[1] type;
}

class UIAttribute extends UIField {
  attr String[1] regexp;
  attr String decimals;
  attr String placeholder;
}

class UIReference extends UIField {
  ref UIReference opposite;
  attr boolean navigable = false;

  @GenModel(documentation="Aggregation/Composition/Association")
  attr String kind;
  ref UIClass referenced;
}

class UIListView extends UIView {
  ref UIClassView[1] detailView;
  ref UIClass#selector ownerClass;
}

class UIClassView extends UIView {
  val UIRule[*] rules;
}

class UIResultView extends UIView {
}

class UIParamView extends UIView {
}

