@namespace(uri="http://blackbelt.hu/judo/meta/psm", prefix="psm")
package psm;

abstract class JElement {
  id attr String[1] uuid;
  attr String name;
  attr String shortName;
  attr String fullName;
  attr String description;
  attr boolean framework;
  attr JLayer[*] participates;
  attr JVisibility visibility;
  val JAnnotation[*] annotations;
}

abstract class JType extends JElement {
}

abstract class JTypedElement extends JElement {
  ref JType[1] type;
  attr String value;
  attr boolean ~derived;
  attr boolean calculated;
  attr int lower = 0;
  attr int upper = 1;
  attr boolean ~ordered;
  attr boolean ~unique;
}

class JPrimitive extends JType {
  ref JPackage#primitives ~package;
  attr boolean useForIdType;
}

class JEnumeration extends JType {
  ref JPackage#enumerations ~package;
  val JLiteral[*]#enumeration literals;
  ref JClass#fixedEnum classRepresentation;
}

class JClass extends JType {
  attr boolean ~abstract;
  val JStateMachine[*]#ownerClass stateMachines;

  @ExtendedMetaData(kind="simple", processing="skip")
  val JOperation[*]#ownerClass operations;
  val JUIAttributeGroup[*] attributeOrder;
  ref JAttribute[*] attributesForListing;
  ref JEnumeration#classRepresentation fixedEnum;
  attr boolean representsTenant;
  attr boolean tenantMember;
  ref JAttribute representation;
  attr boolean representsEnum;
  attr boolean representsTenantUser;
  attr boolean representsUser;
  ref JClass supertype;
  ref JPackage#classes ~package;
  ref JRole[*]#ownerClass roles;
  val JAttribute[*]#ownerClass attributes;
  attr boolean businessSingleton;
  val JUIAlias[*]#ownerClass aliases;
  attr boolean watched = false;
  attr boolean representsEnumValue;
}

class JAttribute extends JTypedElement {
  attr String placeholder;
  attr String regexp;
  attr boolean mandatory;
  attr int decimals;
  attr String interval;
  attr boolean technical;
  ref JClass#attributes ownerClass;
  attr boolean uiNoSearch = false;
  attr boolean watched = false;
  attr boolean representsId = false;
}

class JOperation extends JElement {
  attr boolean classBased;
  ref JClass#operations ownerClass;
  val JParameter[*]#ownerOperation parameters;
  ref JTransition[*]#executingOperation transition;
  attr boolean bulk;
  attr JOperationKind kind;
  attr boolean uiMustConfirm = false;
}

class JParameter extends JTypedElement {
  ref JOperation#parameters ownerOperation;
  attr boolean input = true;
  attr String interval;
}

class JRelationship extends JElement {
  ref JPackage#relationships ~package;
  val JRole[2]#ownerRelationship roles;
  attr boolean ~derived;
}

class JRole extends JElement {
  attr int lower = 0;
  attr int upper = 1;
  attr boolean navigable;
  attr boolean ~unique;
  attr boolean ~ordered = true;
  ref JRelationship[1]#roles ownerRelationship;
  attr String derivedExpression;
  attr String derivedDescription;
  attr JAssociationKind kind = "ASSOCIATION";
  attr String optionScript;
  ref JClass[1]#roles ownerClass;
  attr String value;
  attr boolean calculated;
  attr String interval;
}

class JLiteral extends JElement {
  ref JEnumeration#literals enumeration;
}

class JPackage extends JElement {
  val JEnumeration[*]#~package enumerations;
  val JPrimitive[*]#~package primitives;
  val JRelationship[*]#~package relationships;
  val JPackage[*]#parent children;
  ref JPackage#children parent;
  ref JModel#packages ownerModel;
  val JClass[*]#~package classes;
}

class JStateMachine extends JElement {
  ref JClass#stateMachines ownerClass;
  val JState[*]#ownerStateMachine states;
  val JTransition[*]#stateMachine transitions;
  ref JEnumeration[1] correspondingEnum;
}

class JTransition extends JElement {
  ref JStateMachine#transitions stateMachine;
  val JGuard#transition guard;
  ref JState[1]#incomingTransitions toState;
  ref JState[1]#outgoingTransitions fromState;
  ref JOperation#transition executingOperation;
}

class JState extends JElement {
  ref JStateMachine#states ownerStateMachine;
  ref JTransition[*]#toState incomingTransitions;
  ref JTransition[*]#fromState outgoingTransitions;
  attr boolean initialState;
  attr boolean finalState;
}

class JGuard extends JElement {
  ref JTransition#guard transition;
  attr String text;
  attr String expression;
}

enum JVisibility {
  PUBLIC = 0;
  PROTECTED = 1;
  PACKAGE = 2;
  PRIVATE = 3;
}

class JModel extends JElement {
  val JPackage[*]#ownerModel packages;
  attr String packagePrefix;
  ref JPackage[1] applicationTop;
  val JUIMenuItem[*] rootMenuItems;
  val JInfo info;
}

enum JAssociationKind {
  ASSOCIATION = 0;
  AGGREGATION = 1;
  COMPOSITION = 2;
}

enum JOperationKind {
  CUSTOM = 0;
  QUERY = 1;
}

enum JLayer {
  ALL = 0;
  PERSISTENCE = 1;
  SERVICE = 2;
  OPERATION = 3;
  REST = 4;
  UI = 5;
  DOCUMENT = 6;
  PERMISSION = 7;
  SCREEN = 8;
}

class JUIMenuItem extends JElement {
  val JUIMenuItem[*]#parent children;
  ref JUIMenuItem#children parent;
  ref JClass represent;
  val JUIFilter[*] uifilters;
  attr JMenuItemType type;
  ref JUIAlias alias;
}

class JUIAttributeGroup extends JElement {
  ref JAttribute[*] attributes;
  attr int position;
}

enum JMenuItemType {
  OBJECT = 0;
  LIST = 1;
  NONE = 2;
}

class JUIFilter extends JElement {
  ref JAttribute[1] attribute;
  attr JOperator[1] operator;
  attr String[1] value;
}

enum JOperator {
  EQ = 0;
  NE = 1;
  LT = 2;
  LTE = 3;
  GT = 4;
  GTE = 5;
}

class JUIAlias extends JElement {
  ref JClass[1]#aliases ownerClass;
}

class JInfo extends JElement {
  val JSubmodel[*] submodels;
}

class JSubmodel extends JElement {
  attr String version;
}

class JAnnotation {
  attr String[1] name;
  attr String[1] value;
}

