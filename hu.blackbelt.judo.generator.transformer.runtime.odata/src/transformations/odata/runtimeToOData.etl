operation SRC!EModelElement hasAnnotation(name : String) {
	var annotations = self.eAnnotations.selectOne(a | a.source = extendedMetadataURI);
	if (annotations.isDefined()) {
		var d = annotations.details.selectOne(d | d.key = name);
		if (d.isDefined() and d.value.isDefined()) {
			return d.value.asBoolean();
		} else {
			return false;
		}
	} else {
		return false;
	}
}

@cached
operation SRC!EPackage getFullName() {
	var package = SRC!EPackage.all.selectOne(p | p.eSubPackages.contains(self));
	var name = "";
	while (package.isDefined()) {
		name = package.name + "." + name;
		package = SRC!EPackage.all.selectOne(p | p.eSubPackages.contains(package));
	}

	return name + self.name;
}

@cached
operation SRC!EClass isEntity() {
	return self.hasAnnotation("facade");
}

@cached
operation SRC!EReference isEmbedded() {
	return self.hasAnnotation("embedded");
}

@cached
operation SRC!EClassifier getPackage() {
	return SRC!EPackage.all.selectOne(p | p.eClassifiers.contains(self));
}

@cached
operation SRC!EAttribute getEdmType() {
	switch (self.eType.name) {
		case "JBinary":
			return "Edm.Binary";
		case "JBoolean":
			return "Edm.Boolean";
		case "JFloat":
			return "Edm.Single";
		case "JDouble":
			return "Edm.Double";
		case "JBigDecimal":
			return "Edm.Decimal";
		case "JBigInteger":
			return "Edm.Decimal";
		case "JString":
			return "Edm.String";
		case "JInteger":
			return "Edm.Int32";
		case "JLong":
			return "Edm.Int64";
		case "JDate":
			return "Edm.Date";
		case "JTimestamp":
			return "Edm.DateTime";
		case "JUUID":
			return "Edm.Guid";
		default:
			// String is the default type
			return "Edm.String";
	}
}

rule PackageToSchema
	transform s : SRC!EPackage
	to t : ODATA!SchemaType {
		t.Namespace = s.getFullName();

		root.DataServices.Schema.add(t);
	}

rule CreateEntity
	transform s : SRC!EClass
	to t : ODATA!TEntityType {
		guard : s.isEntity()
		
		s.name.println("Processing ENTITY: ");
		
		t.Name = s.name;
		t.Abstract = s.abstract;
		
		if (s.eSuperTypes.size() == 1) {
			t.BaseType = s.eSuperTypes.first().name;
		} else if (s.eSuperTypes.size() > 1) {
			s.name.println("Multiple superTypes is not supported yet!");
		}
		
		for (a in s.eStructuralFeatures.select(sf | sf.isKindOf(SRC!EAttribute))) {
			a.name.println("  - attribute: ");
		
			var prop = new ODATA!TProperty;
			prop.Name = a.name;
			prop.Type = a.getEdmType();
			prop.Nullable = a.lowerBound == 0;
			
			t.Property.add(prop);
		}
		
		for (r in s.eStructuralFeatures.select(sf | sf.isKindOf(SRC!EReference))) {
			if (r.isEmbedded()) {
				// complex type!
				r.name.println("  - embedded: ");
				
				// TODO: create complex type
			} else {
				// reference
				r.name.println("  - reference: ");
				
				var nprop = new ODATA!TNavigationProperty;
				nprop.Name = r.Name;
				var namespace = r.eType.getPackage().getFullName();
				if (r.upperBound > 1 or r.upperBound == -1) {
					nprop.Type = "Collection(" + namespace + "." + r.eType.equivalent().Name + ")";
				} else {
					nprop.Type = namespace + "." + r.eType.equivalent().Name;
				}
				
				if (r.eOpposite.isDefined()) {
					nprop.Partner = r.eOpposite.name;
				}
				
				t.NavigationProperty.add(nprop);
			}
		}
		
		s.getPackage().equivalent().EntityType.add(t);
	}

pre {
    var root = new ODATA!Edmx;
    root.Version = ODATA!TVersion#_40;
    root.DataServices = new ODATA!TDataServices;
}
