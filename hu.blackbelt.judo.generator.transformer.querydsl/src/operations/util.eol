operation voidType () : JAVA!JvmType {
    return JAVATYPES!JvmType.all.select( t | t.name = "Void").first();
}

operation generateUuid(namespace : String, name : String, separator : String) : String {
	return namespace + separator + name;
}

@cached
operation JAVA!JvmElement baseUUID() : String {
	return self.uuid.split("\\.").excluding("hu").excluding("blackbelt").concat(".");
}

operation RDBMS!EObject clone() : RDBMS!EObject {
	return EMFTool.ecoreUtil.copy(self);
}

operation createJvmList ( componentType : JAVA!JvmType) : JAVA!JvmList {
    var ret = JAVA!JvmList.all.select(l | l.componentType.uuid = componentType.uuid).first();
    if (ret.isUndefined()) {
        ret = new JAVA!JvmList;
        ret.uuid = randomUUID();
        ret.name = "List";  
        ret.package = JAVA!JvmModel.all.first().findOrCreateJavaUtilPackage();
        ret.componentType = componentType;
    }
    return ret;
}

operation abbreviate(text : String, maxLength : Integer) : String {

    if (text.length() > maxLength) {
		var cns = text.substring(0,2) + text.substring(2).replace("a", "").replace("e","").replace("i", "").replace("o","").replace("u",""); 
		var pos = cns.length() - 2;
                
                
		while (cns.length() > maxLength) {
		   if (cns.substring(pos, pos + 1).matches("[a-z]")) {
		       cns = cns.substring(0, pos) + cns.substring(pos + 1);
		   } else if (cns.substring(pos, pos + 1).matches("[0-9]")){
               cns = cns.substring(0, pos-1) + cns.substring(pos, pos + 1).toLowerCase() + cns.substring(pos + 1);	    
           } else {
               cns = cns.substring(0, pos) + cns.substring(pos, pos + 1).toLowerCase() + cns.substring(pos + 1);
           }
		   pos = pos - 3;
		   if (pos < 2) {
		       pos = cns.length() - 2;
		   }
		}
               
		return cns.toLowerCase();
    } else {
        return text.toLowerCase();
    }
}


operation checkAllUuidsForDuplicateOrMissing() {
	var all = QUERYDSL!QueryDslElement.all.collect(e | e.uuid);
	var set = all.asSet();

	var duplicated : Boolean = false;

	set.size.println("SET: ");
	all.size.println("ALL: ");

	for (uuid in set) {
		if (all.count(uuid) > 1) {
			duplicated = true;
			uuid.println("DUPLICATE: ");
		}
	}
	
	QUERYDSL!QueryDslElement.all.select(e | e.uuid.isUndefined()).println("UNDEFINED: ");
	
	if (duplicated) {
		throw "Duplicated ID!";
	}
}