<?xml version="1.0" encoding="UTF-8"?>
<project default="main">
	
	<property name="model.file.extension" value="model" />

	<property name="root.dir" location="." />
	<property name="_src.dir" location="${root.dir}/src" />
	<property name="target.dir.name" value="target-buildVariable" />
	<property name="target.dir" location="${target.dir.name}" />

	<property name="meta.psm.project.dir" location="../hu.blackbelt.judo.generator.meta.psm" />
	<property name="psm.model.project.dir" location="../hu.blackbelt.judo.generator.transformer.psm" />
	<property name="third.party.project.dir" location="../hu.blackbelt.judo.generator.third.party" />

	<path id="buildVariable.taskdef.classpath">
		<fileset dir="${third.party.project.dir}/lib/buildVariable" includes="**/*.jar" />
	</path>
	
	<taskdef resource="net/sf/antcontrib/antlib.xml" classpathref="buildVariable.taskdef.classpath" />
	<taskdef resource="org/eclipse/epsilon/workflow/tasks/tasks.xml" classpathref="buildVariable.taskdef.classpath" loaderref="epsilon.loader" />
	<taskdef resource="org/eclipse/epsilon/workflow/tasks/emf/tasks.xml"  loaderref="epsilon.loader" />

	<property name="model.src.dir" location="${_src.dir}/model" />
	<property name="templates.dir" location="${_src.dir}/templates" />
	<property name="transformations.dir" location="${_src.dir}/transformations" />
	<property name="validations.dir" location="${_src.dir}/validations" />
	<property name="generators.dir" location="${_src.dir}/generators" />

	<property name="transformed.dir" location="${target.dir}/resources" />

	<property name="psm.library.dir" location="${meta.psm.project.dir}/library" />	
	
	<!-- PSM Model definitions -->
	<property name="psm.model.name" value="PSM" />
	<property name="psm.model.file.name" value="test_opm" />
	<property name="psm.model.location" location="${psm.model.project.dir}/target-buildVariable/resources/${psm.model.file.name}.${model.file.extension}" />
	<property name="psm.meta.location" location="${meta.psm.project.dir}/model/psm.ecore" />
	<property name="psm.meta.uri" value="http://blackbelt.hu/judo/meta/psm" />

	<!-- PSM Types -->
	<property name="psmtypes.model.name" value="PSMTYPES" />
	<property name="psmtypes.model.location" location="${psm.library.dir}/psmTypes.model" />



	<!-- =========================== -->
	<!-- Project specific parameters -->
	<!-- =========================== -->
	<property name="meta.psm.java.project.dir" location="../hu.blackbelt.judo.generator.meta.psm.java" />
	<property name="java.psm.library.dir" location="${meta.psm.java.project.dir}/library" />
	<property name="gen.dir" location="${target.dir}/java" />
	<property name="readJavaPsmModel" value="false"/>

	<!-- JAVA Model definitions -->
	<property name="java.psm.model.name" value="JAVA" />
	<property name="java.psm.model.location" location="${transformed.dir}/java_psm.model" />
	<property name="java.psm.meta.location" location="${meta.psm.java.project.dir}/model/java.ecore" />
	<property name="java.psm.meta.uri" value="http://blackbelt.hu/judo/meta/psm/java" />

	<!-- Java Types -->
	<property name="javatypes.model.name" value="JAVATYPES" />
	<property name="javatypes.model.location" location="${java.psm.library.dir}/javaTypes.model" />

	<!-- Framework elements -->
	<property name="fwelements.model.name" value="FWELEMENTS" />
	<property name="fwelements.model.location" location="${java.psm.library.dir}/frameworkElements.model" />

	<!-- Type mappinjg model -->
	<property name="typemapping.java.psm.model.name" value="JTM" />
	<property name="typemapping.java.psm.model.location" location="${meta.psm.java.project.dir}/library/typeMapping.model" />
	<property name="typemapping.java.psm.meta.location" location="${meta.psm.java.project.dir}/model/psmToJavaTypeMapping.ecore" />
	<property name="typemapping.java.psm.meta.uri" value="http://blackbelt.hu/judo/meta/psm/java/mapping" />

	<property name="java.psm.transformation.entry" location="${transformations.dir}/java/psmToJava.etl" />
	<property name="java.psm.generation.entry" location="${generators.dir}/main.egl" />
	<property name="javatypes.model.validation" location="${validations.dir}/validation.evl" />

	<property name="psm.meta.location" location="${meta.psm.project.dir}/model/psm.ecore" />
	<property name="transformed.model.name" value="transformedModelFromAnt.model" />

	<target name="prepare">
		<delete dir="${gen.dir}" failonerror="false" />
		<mkdir dir="${target.dir}" />
		<mkdir dir="${gen.dir}" />
		<mkdir dir="${transformed.dir}" />
		<delete file="${java.psm.model.location}" failonerror="false" />
		<touch file="${java.psm.model.location}" />
	</target>

	<target name="prepareForMaven">
		<mkdir dir="${transformed.dir}" />
		<delete file="${java.psm.model.location}" failonerror="false" />
		<touch file="${java.psm.model.location}" />
	</target>

	<target name="genTargetDirs">
		<mkdir dir="${gen.dir}/PO" />
		<mkdir dir="${gen.dir}/PO_ENUM" />

		<mkdir dir="${gen.dir}/BO" />
		<mkdir dir="${gen.dir}/BO_ENUM" />
		<mkdir dir="${gen.dir}/BO_BUILDER" />
		<mkdir dir="${gen.dir}/BO_BQL" />
		<mkdir dir="${gen.dir}/DOMAIN_BQL" />

		<mkdir dir="${gen.dir}/DAO_MINIMAL" />

		<mkdir dir="${gen.dir}/BO_SERVICE_INTERFACE" />

		<mkdir dir="${gen.dir}/BO_SERVICE_ABSTRACT" />
		<mkdir dir="${gen.dir}/BO_SERVICE_DEFAULT" />
		<mkdir dir="${gen.dir}/BO_ENUM_SERVICE" />
		<mkdir dir="${gen.dir}/BO_SERVICE_WRAPPER" />
		
		<mkdir dir="${gen.dir}/DAO_QUERY_DSL" />
	</target>

	<target name="loadModels">
		<epsilon.emf.register file="${java.psm.meta.location}" />
		<epsilon.emf.register file="${psm.meta.location}" />
		<epsilon.emf.register file="${typemapping.java.psm.meta.location}" />
		<epsilon.emf.loadModel name="${psm.model.name}" modelfile="${psm.model.location}" metamodeluri="${psm.meta.uri}" read="true" store="false" expand="true" />
		<epsilon.emf.loadModel name="${java.psm.model.name}" modelfile="${java.psm.model.location}" metamodeluri="${java.psm.meta.uri}" read="${readJavaPsmModel}" store="true" expand="true" />
		<epsilon.emf.loadModel name="${javatypes.model.name}" modelfile="${javatypes.model.location}" metamodeluri="${java.psm.meta.uri}" />
		<epsilon.emf.loadModel name="${fwelements.model.name}" modelfile="${fwelements.model.location}" metamodeluri="${java.psm.meta.uri}" />
		<epsilon.emf.loadModel name="${psmtypes.model.name}" modelfile="${psmtypes.model.location}" metamodeluri="${psm.meta.uri}" />
		<epsilon.emf.loadModel name="${typemapping.java.psm.model.name}" modelfile="${typemapping.java.psm.model.location}" metamodeluri="${typemapping.java.psm.meta.uri}" expand="true" />
	</target>

	<target name="validate">
		<epsilon.evl src="${javatypes.model.validation}">
			<model ref="${psm.model.name}" />
			<model ref="${javatypes.model.name}" />
			<model ref="${psmtypes.model.name}" />
			<model ref="${typemapping.java.psm.model.name}" />
		</epsilon.evl>
	</target>

	<target name="transform">
		<epsilon.etl src="${java.psm.transformation.entry}">
			<model ref="${psm.model.name}" />
			<model ref="${java.psm.model.name}" />
			<model ref="${javatypes.model.name}" />
			<model ref="${psmtypes.model.name}" />
			<model ref="${typemapping.java.psm.model.name}" />
			<model ref="${fwelements.model.name}" />
		</epsilon.etl>
	</target>

	<target name="generate">
		<epsilon.egl src="${java.psm.generation.entry}" outputRoot="${gen.dir}">
			<model ref="${java.psm.model.name}" />
			<model ref="${javatypes.model.name}" />
			<model ref="${fwelements.model.name}" />
		</epsilon.egl>
	</target>

	<target name="formatting">
		<fileset dir="${gen.dir}" id="generated_java">
			<include name="**/*.java" />
		</fileset>
		<pathconvert pathsep=" " refid="generated_java" property="converted" />
		<java classname="com.google.googlejavaformat.java.Main">
			<classpath location="${third.party.project.dir}/lib/google-formatter/google-java-format-1.2-all-deps.jar" />
			<arg value="--replace" />
			<arg line="${converted}" />
		</java>
	</target>

	<target name="mainFromMaven" depends="prepareForMaven, loadModels, validate, transform, generate, genTargetDirs" />
	<target name="mainFromCommandLine" depends="prepare, loadModels, validate, transform, generate" />
	<target name="main" depends="doFormatting" />

	<target name="pre" depends="prepare, loadModels, validate" />
	
	<target name="transformInTransaction" >
			<trycatch>
				<try>
					<epsilon.startTransaction name="TransforTransaction" />
					<runtarget target="transform" />
					<epsilon.commitTransaction name="TransforTransaction" />
				</try>
				<catch>
					<epsilon.rollbackTransaction name="TransforTransaction" />
				</catch>
			</trycatch>
		</target>

	<target name="doTransform" depends="pre, transformInTransaction" />

	<target name="doGenerate" depends="doTransform">
		<trycatch>
			<try>
				<epsilon.startTransaction name="GenerateTransaction" />
				<runtarget target="generate" />
				<epsilon.commitTransaction name="GenerateTransaction" />
			</try>
			<catch>
				<epsilon.rollbackTransaction name="GenerateTransaction" />
			</catch>
		</trycatch>
	</target>

	<target name="doFormatting" depends="doGenerate, formatting" />

</project>