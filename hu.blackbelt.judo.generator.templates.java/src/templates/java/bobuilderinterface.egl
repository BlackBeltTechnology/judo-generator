[%
  import "../../operations/_importAll.eol";
  
  out.setContentType("Java");
  
  var className = class.name;
  var boInterface = class.boInterface();
%]

package [%=class.package.fqName()%];

public interface [%=className%] {
	[%for (method in class.methods()) {%]
		[%  var parameter = method.parameters.get(0);
		    if (parameter.type.isPrimitive()) {%] 
			[%=className%] [%=method.name%]([%=parameter.type.fqName()%] par);
		[%} else if (parameter.type.isCollection() and parameter.type.componentType.isPrimitive()) {%]
			[%=className%] [%=method.name%]([%=parameter.type.componentType.fqName()%] par);
		[%}%]
	[%}%]
	
	[%for (method in class.methods()) {%]
		[% var parameter = method.parameters.get(0);
		   if (not parameter.type.isPrimitive() and not (parameter.type.isCollection() and parameter.type.componentType.isPrimitive())) {%] 
			[%if (parameter.type.isCollection()) {%]
				[%=className%] empty[%=method.name.firstToUpperCase()%]();
  				<T extends [%=parameter.type.componentType.bare().boInterface().fqName()%]> [%=className%] [%=method.name%](T... pars);
   				[%=className%] [%=method.name%]Id([%=idType().fqName()%]... ids);
   				
			[%} else {%]
				<T extends [%=parameter.type.bare().boInterface().fqName()%]> [%=className%] [%=method.name%](T par);
  				[%=className%] [%=method.name%]Id([%=idType().fqName()%] id);
  				
			[%}%]
		[%}%]
	[%}%]
	
	[%=boInterface.fqName()%] build();
}