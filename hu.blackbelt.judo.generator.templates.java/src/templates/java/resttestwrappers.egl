[%
  import "../../operations/_importAll.eol";
  import "../../main.egl";
  import "../../operations/java/resttestwrapper_common.eol";
  out.setContentType("Java");

  macro_resttestwrapper_buildermethods.populate("class", class);
  macro_resttestwrapper_buildermethods.populate("instanceBased", false);

  macro_resttestwrapper_methods.populate("class", class);
  macro_resttestwrapper_methods.populate("showClassBased", true);
  macro_resttestwrapper_methods.populate("idsParam", "");

  var classListType : JAVA!JvmList = createJvmList(class);
%]

package [%=class.package.fqName()%];

import com.jayway.restassured.response.ValidatableResponse;
import java.util.List;
import java.util.ArrayList;
import java.net.URL;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;

import hu.blackbelt.judo.example.common.rest.test.JudoReqSpec;
import hu.blackbelt.judo.example.common.rest.test.*;
import hu.blackbelt.judo.common.context.api.*;
import hu.blackbelt.judo.business.validator.api.codes.*;

import [%=class.restTestClient().fqName()%];

import static java.util.Arrays.asList;

import hu.blackbelt.judo.example.common.rest.test.RestTestWrapper;

public class [%=class.name%] implements RestTestWrapper {

    private JudoReqSpec.JudoReqSpecBuilder reqSpecBuilder = JudoReqSpec.withDefaults();
    private QueryGraph.QueryGraphBuilder qgBuilder = QueryGraph.builder();
    private Suppressions.SuppressionsBuilder suppBuilder = Suppressions.builder();

    public static final String XMIID = "[%=class.origin().uuid%]";
    [%=macro_resttestwrapper_buildermethods.process()%]

    public static [%=class.name%] [%=class.name.firstToLowerCase()%](){
        return new [%=class.name%]();
    }

    [% if (not class.hasFixedEnum()) { %]
        public [%=class.restTestWrapperT().fqName()%] read(java.lang.String id) {
            return
                [%=class.returnPre()%]
                [%=class.extractCall()%](readV(id))
                [%=class.returnPost()%];
        }

        public ValidatableResponse readV(java.lang.String id) {
            reqSpecBuilder.queryGraph(qgBuilder.build());
            reqSpecBuilder.suppressions(suppBuilder.build());
            ValidatableResponse ret = [%=class.clientAccessor()%].getById(id, reqSpecBuilder.build());
            reqSpecBuilder = JudoReqSpec.withDefaults();
            qgBuilder = QueryGraph.builder();
            suppBuilder = Suppressions.builder();
            return ret;
        }
    [%}%]

    public int count() {
        reqSpecBuilder.queryGraph(qgBuilder.build());
        reqSpecBuilder.suppressions(suppBuilder.build());
        int ret = [%=class.clientAccessor()%].count(reqSpecBuilder.build());
        reqSpecBuilder = JudoReqSpec.withDefaults();
        qgBuilder = QueryGraph.builder();
        suppBuilder = Suppressions.builder();
        return ret;
    }

    public boolean exists(java.lang.String id) {
        reqSpecBuilder.queryGraph(qgBuilder.build());
        reqSpecBuilder.suppressions(suppBuilder.build());
        boolean ret = [%=class.clientAccessor()%].exists(id, reqSpecBuilder.build());
        reqSpecBuilder = JudoReqSpec.withDefaults();
        qgBuilder = QueryGraph.builder();
        suppBuilder = Suppressions.builder();
        return ret;
    }

    public ValidatableResponse filterV(java.lang.String filterString) {
        reqSpecBuilder.queryGraph(qgBuilder.build());
        reqSpecBuilder.suppressions(suppBuilder.build());
        ValidatableResponse  ret = [%=class.clientAccessor()%].filter(filterString, reqSpecBuilder.build());
        reqSpecBuilder = JudoReqSpec.withDefaults();
        qgBuilder = QueryGraph.builder();
        suppBuilder = Suppressions.builder();
        return ret;
    }

    public ValidatableResponse filterV(java.lang.String filterString, java.lang.String sortString) {
        reqSpecBuilder.queryGraph(qgBuilder.build());
        reqSpecBuilder.suppressions(suppBuilder.build());
        ValidatableResponse ret = [%=class.clientAccessor()%].filter(filterString, sortString, reqSpecBuilder.build());
        reqSpecBuilder = JudoReqSpec.withDefaults();
        qgBuilder = QueryGraph.builder();
        suppBuilder = Suppressions.builder();
        return ret;
    }

    public ValidatableResponse queryByV(java.lang.String prop, java.lang.String value) {
        reqSpecBuilder.queryGraph(qgBuilder.build());
        reqSpecBuilder.suppressions(suppBuilder.build());
        ValidatableResponse ret = [%=class.clientAccessor()%].queryBy(prop, value, reqSpecBuilder.build());
        reqSpecBuilder = JudoReqSpec.withDefaults();
        qgBuilder = QueryGraph.builder();
        suppBuilder = Suppressions.builder();
        return ret;
    }

    public [%=classListType.typeDeclaration()%] filter(java.lang.String filterString) {
        return
            [%=classListType.returnPre()%]
            [%=classListType.extractCall()%](filterV(filterString))
            [%=classListType.returnPost()%];
    }

    public [%=classListType.typeDeclaration()%] filter(java.lang.String filterString, java.lang.String sortString) {
        return
            [%=classListType.returnPre()%]
            [%=classListType.extractCall()%](filterV(filterString, sortString))
            [%=classListType.returnPost()%];
    }

    public [%=classListType.typeDeclaration()%] queryBy(java.lang.String prop, java.lang.String value) {
        return
            [%=classListType.returnPre()%]
            [%=classListType.extractCall()%](queryByV(prop, value))
            [%=classListType.returnPost()%];
    }

    public [%=classListType.typeDeclaration()%] list() {
        return
            [%=classListType.returnPre()%]
            [%=classListType.extractCall()%](listV())
            [%=classListType.returnPost()%];
    }

    public ValidatableResponse listV() {
        reqSpecBuilder.queryGraph(qgBuilder.build());
        reqSpecBuilder.suppressions(suppBuilder.build());
        ValidatableResponse ret = [%=class.clientAccessor()%].list(reqSpecBuilder.build());
        reqSpecBuilder = JudoReqSpec.withDefaults();
        qgBuilder = QueryGraph.builder();
        suppBuilder = Suppressions.builder();
        return ret;
    }

    public static [%=class.restTestWrapperT().fqName()%] from([%=class.restDto().fqName()%] dto){
        return new [%=class.restTestWrapperT().fqName()%](dto);
    }

    [% if (class.hasFixedEnum()) { %]
        public static [%=class.restTestWrapperT().fqName()%] from([%=class.restDtoEnum().fqName()%] dto){
            return new [%=class.restTestWrapperT().fqName()%]([%=class.clientAccessor()%].queryByCode(dto));
        }
    [%}%]

    [%=macro_resttestwrapper_methods.process()%]
}
