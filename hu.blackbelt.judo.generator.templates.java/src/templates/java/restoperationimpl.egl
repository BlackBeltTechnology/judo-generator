[%
  import "../../operations/_importAll.eol";
  import "../../main.egl";
  out.setContentType("Java");
  
  var filterRestDTO = class.filterRestDto().fqName();
%]

package [%=class.package.fqName()%];

import hu.blackbelt.judo.business.operation.api.CrudOperation;
import hu.blackbelt.judo.business.validator.api.Validator;
import hu.blackbelt.judo.integration.rest.api.base.AbstractCrudRestOperation;
import hu.blackbelt.judo.integration.rest.api.CrudExportMapper;
import hu.blackbelt.judo.common.rest.api.MimeTypeResolver;
import hu.blackbelt.judo.common.security.api.authz.AuthorizationException;
import hu.blackbelt.judo.integration.rest.api.PaginationRestDto;
import hu.blackbelt.judo.integration.rest.api.FilterRestDto;
import hu.blackbelt.judo.business.dto.api.FilterDto;
import hu.blackbelt.judo.business.dto.api.PaginationDto;
import hu.blackbelt.judo.business.operation.api.export.CacheKey;
import hu.blackbelt.judo.business.validator.api.ValidationException;
import hu.blackbelt.judo.business.validator.api.Validator;

import [%=class.dto().fqName()%];
import [%=class.dtoOperation().fqName()%];
import [%=class.restOperation().fqName()%];
import [%=class.filterRestDto().fqName()%];
import [%=class.restDto().fqName()%];


import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.URL;
import java.lang.String;
import java.util.Set;
import java.util.List;
import java.util.ArrayList;
import java.util.Objects;
import javax.ws.rs.WebApplicationException;
import javax.ws.rs.core.Response;
import javax.ws.rs.core.Response.Status;
import javax.ws.rs.core.StreamingOutput;

import org.apache.felix.scr.annotations.Component;
import org.apache.felix.scr.annotations.Reference;
import org.apache.felix.scr.annotations.Service;

import com.google.common.collect.ImmutableSet;
import com.google.common.collect.ImmutableList;
import com.google.common.io.ByteStreams;
import com.google.common.io.Closeables;
import com.google.common.cache.Cache;
import com.google.common.cache.CacheBuilder;

[% for (enumValueClass in class.exportableEnumValueClasses()) { %]
    import [%=enumValueClass.dtoOperation().fqName()%];
    import [%=enumValueClass.dto().fqName()%];
[%}%]


@Component(immediate=true)
@Service
public class [%=class.name%] extends AbstractCrudRestOperation<[%=class.restDto().fqName()%], [%=class.dto().fqName()%], [%=filterRestDTO%]> implements [%=class.restOperation().fqName()%], CrudExportMapper<[%=class.restDto().fqName()%]> {
    private static final Set<String> ASSOCATION_NAMES = ImmutableSet.of(
        [%=class.references().select(r | r.navigable).collect(r | "\"" + r.name + "\"").concat(", ")%]
    );

    @Reference(policyOption = org.apache.felix.scr.annotations.ReferencePolicyOption.GREEDY)
    private [%=class.dtoOperation().fqName()%] [%=class.dtoOperation().name.firstToLowerCase()%];

    @Reference
    private MimeTypeResolver mimeTypeResolver;

    [% for (enumValueClass in class.exportableEnumValueClasses().select(e | e.name <> class.name)) { %]
            @Reference
            private [%=enumValueClass.dtoOperation().fqName()%] [%=enumValueClass.dtoOperation().name.firstToLowerCase()%];
    [%}%]



    public [%=class.name%]() {
    }

    @Override
    protected CrudOperation<[%=class.dto().fqName()%]> getCrudOperation() {
        return [%=class.dtoOperation().name.firstToLowerCase()%];
    }

    @Override
    protected Set<String> getAssocationNames() {
        return ASSOCATION_NAMES;
    }



    [% if (class.abstract) { %]
        @Override
        public [%=class.restDto().fqName()%] create([%=class.restDto().fqName()%] request) throws hu.blackbelt.judo.common.security.api.authz.AuthorizationException {
            throw new UnsupportedOperationException("Create is not allowed on abstract model class");
        }
    [%}%]

    [% for (ref in class.allReferences().select(r | r.navigable)) { %]
        @Override
        public Response traverse[%=ref.name.firstToUpperCase()%](String id, [%=filterRestDTO%] filter, PaginationRestDto paginationRestDto) throws AuthorizationException {
            FilterDto filterDto = converterService.convert(filter, FilterDto.class);
            PaginationDto paginationDto = converterService.convert(paginationRestDto, PaginationDto.class);
            [% if (ref.type.isCollection()) { %]
                [%=ref.type.restDto().fqName()%] result = null;
                Long count = [%=class.dtoOperation().name.firstToLowerCase()%].countTraverse[%=ref.name.firstToUpperCase()%](id, filterDto);
                if (count == 0) {
                    // TODO: Change API - it is kept because of compatibility
                    // result = com.google.common.collect.ImmutableList.of();
                    return Response
                    .ok()
                    .header("X-Total-Count", count)
                    .header("X-Page-Size", paginationRestDto.getPageSize())
                    .entity(com.google.common.collect.ImmutableList.of())
                    .build();
                } else {
                    [%=ref.type.dto().fqName()%] output = (([%=class.dtoOperation().fqName()%]) getCrudOperation()).traverse[%=ref.name.firstToUpperCase()%](id, filterDto, paginationDto);
                    result = converterService.convertAll(output, [%=ref.type.bare().restDto().fqName()%].class);
                }
                return Response
                    .ok()
                    .header("X-Total-Count", count)
                    .header("X-Page-Size", paginationRestDto.getPageSize())
                    .entity(result.toArray(([%=ref.type.bare().restDto().fqName()%][]) java.lang.reflect.Array.newInstance([%=ref.type.bare().restDto().fqName()%].class, 0)))
                    .build();
            [% } else { %]
                [%=ref.type.dto().fqName()%] output = (([%=class.dtoOperation().fqName()%]) getCrudOperation()).traverse[%=ref.name.firstToUpperCase()%](id, filterDto, paginationDto);
                [%=ref.type.restDto().fqName()%] result = converterService.convert(output, [%=ref.type.bare().restDto().fqName()%].class);
                if (result == null) {
                    return Response
                    .noContent()
                    .entity(null)
                    .build();
                } else {
                    return Response
                        .ok()
                        .entity(result)
                        .build();
                }
            [%}%]
        }

        @Override
        public javax.ws.rs.core.Response traverse[%=ref.name.firstToUpperCase()%]Export(final String id, [%=filterRestDTO%] filter) throws AuthorizationException {
            FilterDto filterDto = converterService.convert(filter, FilterDto.class);
            com.google.common.base.Function<FilterDto, java.util.List<?>> fetcher = new com.google.common.base.Function<FilterDto, java.util.List<?>>() {
                @javax.annotation.Nullable
                @Override
                @lombok.SneakyThrows(AuthorizationException.class)
                public List<[%=ref.type.bare().restDto().fqName()%]> apply(FilterDto input) {
                    [%=ref.type.dto().fqName()%] output = (([%=class.dtoOperation().fqName()%]) getCrudOperation()).traverse[%=ref.name.firstToUpperCase()%](id, input, PaginationDto.builder().build());

                    [% if (ref.type.isCollection()) { %]
                        [%=ref.type.restDto().fqName()%] result = converterService.convertAll(output, [%=ref.type.bare().restDto().fqName()%].class);
                        return result;
                    [% } else { %]
                        return java.util.Arrays.asList(converterService.convert(output, [%=ref.type.bare().restDto().fqName()%].class));
                    [%}%]
                }
            };
            hu.blackbelt.judo.integration.rest.api.base.GenerateExportInput exportInput = hu.blackbelt.judo.integration.rest.api.base.GenerateExportInput.builder()
                .count(0)
                .fetch(fetcher)
                .input(filterDto)
                .resultClass([%=ref.type.bare().restDto().fqName()%].class)
                .build();
            return generateExport(exportInput);
        }


        [% if (not ref.derived) { %]
            @Override
            public Response available[%=ref.name.firstToUpperCase()%](String id, [%=filterRestDTO%] filter, PaginationRestDto paginationRestDto) throws AuthorizationException {
                FilterDto filterDto = converterService.convert(filter, FilterDto.class);
                PaginationDto paginationDto = converterService.convert(paginationRestDto, PaginationDto.class);

                Long count = [%=class.dtoOperation().name.firstToLowerCase()%].countAvailable[%=ref.name.firstToUpperCase()%](id, filterDto);
                List<[%=ref.type.bare().restDto().fqName()%]> result = null;
                if (count == 0) {
                    // TODO: Change API - it is kept because of compatibility
                    // result = com.google.common.collect.ImmutableList.of();
                    return Response
                    .ok()
                    .header("X-Total-Count", count)
                    .header("X-Page-Size", paginationRestDto.getPageSize())
                    .entity(com.google.common.collect.ImmutableList.of())
                    .build();
                } else {
                    List<[%=ref.type.bare().dto().fqName()%]> output = (([%=class.dtoOperation().fqName()%]) getCrudOperation()).available[%=ref.name.firstToUpperCase()%](id, filterDto, paginationDto);
                    result = converterService.convertAll(output, [%=ref.type.bare().restDto().fqName()%].class);
                }
                return Response
                    .ok()
                    .header("X-Total-Count", count)
                    .header("X-Page-Size", paginationRestDto.getPageSize())
                    .entity(result.toArray(([%=ref.type.bare().restDto().fqName()%][]) java.lang.reflect.Array.newInstance([%=ref.type.bare().restDto().fqName()%].class, 0)))
                    .build();
            }

            @Override
            public Response availableAll[%=ref.name.firstToUpperCase()%]([%=filterRestDTO%] filter, PaginationRestDto paginationRestDto) throws AuthorizationException {
                return available[%=ref.name.firstToUpperCase()%](null, filter, paginationRestDto);
            }

            [% var convertMethod : String = ref.type.isCollection().ternary("convertAll", "convert"); %]
            @Override
            public [%=ref.type.restDto().fqName()%] attach[%=ref.name.firstToUpperCase()%](String id, [%=ref.type.restDto().fqName()%] [%=ref.name%] ) throws AuthorizationException {
                [%=ref.type.dto().fqName()%] output = (([%=class.dtoOperation().fqName()%]) getCrudOperation()).attach[%=ref.name.firstToUpperCase()%](id, converterService.[%=convertMethod%]([%=ref.name%] , [%=ref.type.bare().dto().fqName()%].class));
                [%=ref.type.restDto().fqName()%] result = converterService.[%=convertMethod%](output, [%=ref.type.bare().restDto().fqName()%].class);
                return result;
            }

            @Override
            public [%=ref.type.restDto().fqName()%] detach[%=ref.name.firstToUpperCase()%](String id, [%=ref.type.restDto().fqName()%] [%=ref.name%] ) throws AuthorizationException {
                [%=ref.type.dto().fqName()%] output = (([%=class.dtoOperation().fqName()%]) getCrudOperation()).detach[%=ref.name.firstToUpperCase()%](id, converterService.[%=convertMethod%]([%=ref.name%] , [%=ref.type.bare().dto().fqName()%].class));
                [%=ref.type.restDto().fqName()%] result = converterService.[%=convertMethod%](output, [%=ref.type.bare().restDto().fqName()%].class);
                return result;
            }
        [%}%]
    [%}%]

    [% for (method in class.methods().select(m | m.isCustomBulk() or m.isCustomClassBased())) { %]
        @Override
        public [%=method.type.fqName()%] [%=method.name%](Action[%=method.name%]RestDto action[%=method.name%]RestDto) throws AuthorizationException {
            [%=method.type.fqName()%] result = null;
            [%=method.extractStatements()%]

            [% if (not method.type.bare().isPrimitive()) { %]
                result = converterService.convert[% if (method.type.isCollection()) { %]All[%}%]( [%=class.dtoOperation().name.firstToLowerCase()%].[%=method.name%](
                    [%=method.parameterExtractedNameSequence()%])
                    , [%=method.type.bare().restDto().fqName()%].class);
            [% } else { %]
                result = [%=class.dtoOperation().name.firstToLowerCase()%].[%=method.name%]([%=method.parameterExtractedNameSequence()%]);
            [%}%]

            return result;
        }
    [%}%]

    [% for (method in class.methods(JAVA!JvmMethodKind#QUERY)) { %]
        @Override
        public Response [%=method.name%](Action[%=method.name%]RestDto action[%=method.name%]RestDto, PaginationRestDto paginationRestDto, [%=filterRestDTO%] filterRestDto) throws AuthorizationException {
            [%=method.type.fqName()%] result = null;
            [%=method.extractStatements()%]
            [% if (method.type.isCollection()) { %]
                Integer count = [%=class.dtoOperation().name.firstToLowerCase()%].[%=method.name%]Count([%=method.parameterExtractedNameSequence(true, true)%]);
                if (count <= 0) {
                    result = ImmutableList.of();
                    Response.ResponseBuilder rb = Response
                        .status(204)
                        .entity(result);
                    rb.header("X-Total-Count", count)
                        .header("X-Page-Size", 0);
                    return rb.build();
                }
            [%}%]

            [% if (not method.type.isPrimitive() and not (method.type.isCollection() and method.type.isListofLists())) { %]
                result = converterService.convert[% if (method.type.isCollection()) { %]All[%}%]( [%=class.dtoOperation().name.firstToLowerCase()%].[%=method.name%](
                    [%=method.parameterExtractedNameSequence()%])
                    , [%=method.type.bare().restDto().fqName()%].class);
            [% } else { %]
                result = [%=class.dtoOperation().name.firstToLowerCase()%].[%=method.name%]([%=method.parameterExtractedNameSequence()%]);
            [%}%]

            Response.ResponseBuilder rb = null;
            [% if (method.type.isCollection()) { %]
                rb = Response
                    .ok()
                    .entity(result);
                rb.header("X-Total-Count", count)
                    .header("X-Page-Size", paginationRestDto.getPageSize());
            [% } else { %]
                if (result == null) {
                    rb = Response
                        .noContent()
                        .entity(null);
                } else {
                    rb = Response
                        .ok()
                        .entity(result);
                }
            [%}%]
            return rb.build();
        }
    [%}%]

    [% for (attr in class.attributes().select(a | a.type.isURL())) { %]
        @Override
        @lombok.SneakyThrows(java.io.IOException.class)
        public Response download[%=attr.name.firstToUpperCase()%](String id, boolean inline) throws AuthorizationException {
            [%=class.dto().fqName()%] output = getCrudOperation().read(id);
            [%=class.restDto().fqName()%] result = converterService.convert(output, [%=class.restDto().fqName()%].class);
            final URL url = result.get[%=attr.name.firstToUpperCase()%]();
            if (url != null) {
                final java.net.URLConnection urlConnection = url.openConnection();
                String mimeTypeFromUrl = urlConnection.getContentType();
                Long contentLength = urlConnection.getContentLengthLong();

                final String mimeType = mimeTypeFromUrl == null ? mimeTypeResolver.getMimeType(url.toString()) : mimeTypeFromUrl;
                final String extension = mimeTypeResolver.getExtension(mimeType);
                final String contentDisposition;
                if (inline) {
                    contentDisposition = "inline; fileName: [%=class.name.toLowerCase()%]-" + id + "-[%=attr.name.toLowerCase()%]." + extension;
                } else {
                    contentDisposition = "attachment; fileName: [%=class.name.toLowerCase()%]-" + id + "-[%=attr.name.toLowerCase()%]." + extension;
                }

                return Response.ok(
                    new StreamingOutput() {
                        @Override
                        public void write(OutputStream outputStream) throws IOException, WebApplicationException {
                            boolean threw = true;
                            InputStream is = null;
                            try {
                                is = urlConnection.getInputStream();
                                ByteStreams.copy(is, outputStream);
                                threw = false;
                            } finally {
                                Closeables.close(is, threw);
                            }
                        }
                    }).type(mimeType)
                        // .header("Content-Length", contentLength)
                        .header("Content-Disposition", contentDisposition).build();
            } else {
                return Response
                    .status(Response.Status.NOT_FOUND)
                    .entity(null)
                    .build();
            }
        }
    [%}%]

    @Override
    @lombok.SneakyThrows
    public List<List<String>> mapForExport(List<?> data) {
        List<List<String>> ret = new ArrayList<>();
        List<String> h = new ArrayList<>();

        [% for (attr in class.exportableAttrs()) { %]
            h.add("[%=attr.name%]");
        [%}%]
        [% for (ref in class.exportableRefs()) { %]
            h.add("[%=ref.name%]");
        [%}%]
        [% for (ref in class.exportableEnums()) { %]
            h.add("[%=ref.name%]");
        [%}%]
        [% for (attr in class.exportableTechnicalAttrs()) { %]
            h.add("[%=attr.name%]");
        [%}%]

        ret.add(h);
        Cache<CacheKey,String> cache = CacheBuilder.newBuilder().build();
        String langCodeFromReq = "";
        if (requestContextService.getAcceptLanguage().isPresent()) {
            langCodeFromReq = requestContextService.getAcceptLanguage().get();
        } else {
            throw new ValidationException(Validator.Result.builder().messageId(hu.blackbelt.judo.business.validator.api.codes.FrameworkErrorCodes.LANGUAGE_NOT_PRESENT).defaultMessage("Language not present").severity(Validator.Severity.Error).build());
        }
        for (Object o : data) {
            [%=class.restDto().fqName()%] c = ([%=class.restDto().fqName()%]) o;

            List<String> r = new ArrayList<>();
            [% for (attr in class.exportableAttrs()) { %]
                r.add(Objects.toString(c.get[%=attr.name.firstToUpperCase()%]()));
            [%}%]
            [% for (ref in class.exportableRefs()) { %]
                [*TODO: this should be handled in the transformations (add a default representation?)*]
                [% if (ref.opposite.ownerClass.representationAttribute.isDefined()) { %]
	                if (c.get[%=ref.name.firstToUpperCase()%]() != null) {
	                    r.add(Objects.toString(c.get[%=ref.name.firstToUpperCase()%]().get[%=ref.opposite.ownerClass.representationAttribute.name.firstToUpperCase()%]()));
	                } else {
	                    r.add("null");
	                }
	            [%}%]
            [%}%]
            [% for (ref in class.exportableEnums()) { %]
                if (c.get[%=ref.name.firstToUpperCase()%]() != null) {
                    final String enumKey = "[%=ref.opposite.ownerClass.enumValueClass().bo().fqName()%]";
                    final String code = c.get[%=ref.name.firstToUpperCase()%]().getCode();
                    final String defaultValue = c.get[%=ref.name.firstToUpperCase()%]().getValue();
                    final String langCode = langCodeFromReq;
                    final String fieldName = "[%=ref.opposite.ownerClass.origin().name.firstToLowerCase()%].code";
                    String e = cache.get(new CacheKey(enumKey, code, langCode), new java.util.concurrent.Callable<String>() {
                        @Override
                        public String call() throws Exception {
                            String ret = null;
                            FilterDto f = FilterDto.EMPTY_FILTER_DTO;
                            f.setQueryString("langcode eq " + langCode + " and " + fieldName + " eq " + code);
                            PaginationDto p = PaginationDto.builder().pageNumber(0).pageSize(2).build();
                            
                            List<[%=ref.opposite.ownerClass.enumValueClass().dto().fqName()%]> res = [%=ref.opposite.ownerClass.enumValueClass().dtoOperation().name.firstToLowerCase()%].list(f, p);

                            if (res != null && res.size() == 1) {
                                ret = res.get(0).getValue();
                            }
                            if (ret == null) {
                                ret = defaultValue;
                            }
                            return ret;
                        }
                    });
                    r.add(e);
                } else {
                    r.add("null");
                }
            [%}%]
            [% for (attr in class.exportableTechnicalAttrs()) { %]
                r.add(Objects.toString(c.get[%=attr.name.firstToUpperCase()%]()));
            [%}%]
            ret.add(r);
        }
        return ret;
    }
}


[%
@cached
operation JAVA!JvmClass exportableEnums () : Collection {
    return self.allReferences().select(r | not r.type.isCollection() and r.navigable and r.opposite.ownerClass.representsEnum).sortBy(r | r.name);
}

@cached
operation JAVA!JvmClass exportableEnumValueClasses () : Collection {
    return self.allReferences().select(r | not r.type.isCollection() and r.navigable and r.opposite.ownerClass.representsEnum).collect(r | r.opposite.ownerClass.enumValueClass()).asSet().sortBy(r | r.name);
}

@cached
operation JAVA!JvmClass exportableRefs () : Collection {
    return self.allReferences().select(r | not r.type.isCollection() and r.navigable and not r.opposite.ownerClass.representsEnum).sortBy(r | r.name);
}

@cached
operation JAVA!JvmMethod extractStatements () : String {
    var result : Sequence;
    for (param in self.parameters.select(p | (self.isQuery() or not p.type.isPrimitive()) and not p.isPagination() and not p.isFilter())) {
        if (param.type.isPrimitive()) {
            result.add(param.type.fqName() + " " + param.name + "Input = action" + self.name + "RestDto.get" + param.name.firstToUpperCase() + "();");
        } else {
            var convertMethod : String = param.type.isCollection().ternary("convertAll", "convert");
            result.add(param.type.dto().fqName() + " " + param.name + "Input = converterService." + convertMethod + "(action" + self.name + "RestDto.get" + param.name.firstToUpperCase() + "(), " + param.type.bare().dto().fqName() + ".class);");
        }
    }
    return result.concat("\n");
}

@cached
operation JAVA!JvmMethod parameterExtractedNameSequence () : String {
    return self.parameterExtractedNameSequence(false, false);
}

@cached
operation JAVA!JvmMethod parameterExtractedNameSequence (skipPagination : Boolean, skipFilter : Boolean) : String {
    var result : Sequence;
    for (param in self.parameters) {
        if (param.isPagination()) {
            if (not skipPagination) {
                result.add("converterService.convert(paginationRestDto, " + param.type.dto().fqName() + ".class)");
            }
        } else if (param.isFilter()) {
        	if (not skipFilter) {
        		result.add("converterService.convert(filterRestDto, " + param.type.dto().fqName() + ".class)");
        	}
        } else if (self.isQuery() or not param.type.isPrimitive()) {
            result.add(param.name + "Input");
        } else {
            result.add("action" + self.name + "RestDto.get" + param.name.firstToUpperCase() + "()");
        }
    }
    return result.concat(", ");
}
%]
