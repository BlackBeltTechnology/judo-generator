[%
  import "../../operations/_importAll.eol";
  import "../../main.egl";
  import "../../operations/java/resttestwrapper_common.eol";
  out.setContentType("Java");

  macro_resttestwrapper_buildermethods.populate("class", class); 
  macro_resttestwrapper_buildermethods.populate("instanceBased", false);

  macro_resttestwrapper_methods.populate("class", class);
  macro_resttestwrapper_methods.populate("showClassBased", false);
  macro_resttestwrapper_methods.populate("idsParam", "extractIds()");
%]

package [%=class.package.fqName()%];

import com.jayway.restassured.response.ValidatableResponse;
import java.util.List;
import java.util.ArrayList;
import java.net.URL;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;

import hu.blackbelt.judo.example.common.rest.test.JudoReqSpec;
import hu.blackbelt.judo.example.common.rest.test.*;
import hu.blackbelt.judo.common.context.api.*;
import hu.blackbelt.judo.business.validator.api.codes.*;

import [%=class.restTestClient().fqName()%];
import hu.blackbelt.judo.example.common.rest.test.RestTestWrapper;

import static java.util.Arrays.asList;

public class [%=class.name%] implements RestTestWrapper {

    private java.util.List<[%=class.restTestWrapperT().fqName()%]> internals;
    private JudoReqSpec.JudoReqSpecBuilder reqSpecBuilder = JudoReqSpec.withDefaults();
    private QueryGraph.QueryGraphBuilder qgBuilder = QueryGraph.builder();
    private Suppressions.SuppressionsBuilder suppBuilder = Suppressions.builder();

    public static final String XMIID = "[%=class.origin().uuid%]";
    [%=macro_resttestwrapper_buildermethods.process()%]

    private [%=class.name%] (java.util.List<[%=class.restTestWrapperT().fqName()%]> internals) {
        this.internals = internals;
    }

    public static [%=class.name%] [%=class.name.firstToLowerCase()%]([%=class.restTestWrapperT().fqName()%]... internals){
        return new [%=class.name%](asList(internals));
    }

    public static [%=class.name%] [%=class.name.firstToLowerCase()%](java.util.List<[%=class.restTestWrapperT().fqName()%]> internals){
        return new [%=class.name%](internals);
    }

    public static java.util.List<[%=class.restDto().fqName()%]> convert(java.util.List<[%=class.restTestWrapperT().fqName()%]> t){
        java.util.List<[%=class.restDto().fqName()%]> ret = new ArrayList<>();
        for ([%=class.restTestWrapperT().fqName()%] r : t) {
            ret.add(r.to());
        }
        return ret;
    }

    public static java.util.List<[%=class.restTestWrapperT().fqName()%]> from(java.util.List<[%=class.restDto().fqName()%]> dto){
        if (dto == null) {
            return null;
        }
        java.util.List<[%=class.restTestWrapperT().fqName()%]> ret = new ArrayList<>();
        for ([%=class.restDto().fqName()%] r : dto) {
            ret.add(new [%=class.restTestWrapperT().fqName()%](r));
        }
        return ret;
    }

    public static java.util.List<[%=class.restDto().fqName()%]> convert([%=class.restTestWrapperT().fqName()%]... t){
        return convert(asList(t));
    }

    [% if (class.hasFixedEnum()) { %]
        public static java.util.List<[%=class.restDtoEnum().fqName()%]> convertToEnum([%=class.restDto().fqName()%]... t){
            return convertToEnum(asList(t));
        }

        public static java.util.List<[%=class.restDtoEnum().fqName()%]> convertToEnum(java.util.List<[%=class.restDto().fqName()%]> t){
            java.util.List<[%=class.restDtoEnum().fqName()%]>  ret = new ArrayList<>();
            for ([%=class.restDto().fqName()%] r : t) {
                ret.add([%=class.restDtoEnum().fqName()%].valueOf(r.getCode()));
            }
            return ret;
        }

        public static java.util.List<[%=class.restTestWrapperT().fqName()%]> fromEnum(java.util.List<[%=class.restDtoEnum().fqName()%]> dto){
            java.util.List<[%=class.restTestWrapperT().fqName()%]> ret = new ArrayList();
            for ([%=class.restDtoEnum().fqName()%] e : dto) {
                ret.add([%=class.restTestWrapperS().fqName()%].from([%=class.clientAccessor()%].queryByCode(e)));
            }
            return ret;
        }
    [%}%]

    public java.util.List<java.lang.String> extractIds() {
        java.util.List<java.lang.String> ret = new ArrayList();
        if (internals != null) {
            for ([%=class.restTestWrapperT().fqName()%] t : internals) {
                ret.add(t.getId());
            }
        }
        return ret;
    }
    
    [%=macro_resttestwrapper_methods.process()%]
}
