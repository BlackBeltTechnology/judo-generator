[%
  import "../../operations/_importAll.eol";
  import "../../main.egl";
  
  out.setContentType("Java");
  
  var daoFieldName = class.daoMinimal().name.firstToLowerCase();
  
%]

package [%=class.package.fqName()%];

import hu.blackbelt.judo.business.service.api.base.AbstractCrudService;

import hu.blackbelt.judo.business.bo.api.Entity;
import hu.blackbelt.judo.business.bo.api.BoTypeResolver;

import hu.blackbelt.judo.business.dao.api.EntityDao;
import hu.blackbelt.judo.business.expression.api.Expression;
import hu.blackbelt.judo.business.expression.api.Expressions;
import hu.blackbelt.judo.business.expression.api.extension.Query;
import hu.blackbelt.judo.business.expression.api.meta.Member;
import hu.blackbelt.judo.business.validator.api.ValidationException;
import hu.blackbelt.judo.business.validator.api.Validator;

import org.apache.felix.scr.annotations.Component;
import org.apache.felix.scr.annotations.Reference;
import org.apache.felix.scr.annotations.ReferencePolicyOption;
import org.apache.felix.scr.annotations.Service;


import java.io.Serializable;
import java.util.Arrays;

[%for (decideMethodHelperEnum in class.guardEnums()) { %]
    [%for (literal in decideMethodHelperEnum.literals) { %]
        import static [%=class.fqName()%].[%=decideMethodHelperEnum.name%].[%=literal.name%];
    [%}%]
[%}%]

@Component
public abstract class [%=class.name%] extends AbstractCrudService<[%=class.bo().fqName()%]> implements [%=class.boServiceInterface().fqName()%]
{

    @Reference(policyOption = ReferencePolicyOption.GREEDY)
    private [%=class.daoMinimal().fqName()%] [%=daoFieldName%];

    @Reference
    private BoTypeResolver boTypeResolver;

	[%if (class.representsTenant) { %]
	    @Reference
	    private hu.blackbelt.judo.business.security.api.TenantCreateSupport<[%=class.bo().fqName()%]> tenantCreateSupport;
	
	    @Override
	    public [%=class.bo().fqName()%] create([%=class.bo().fqName()%] obj) {
	        return tenantCreateSupport.createTenant(obj, new com.google.common.base.Function<[%=class.bo().fqName()%], [%=class.bo().fqName()%]>() {
	             @Override
	             public [%=class.bo().fqName()%] apply(@javax.annotation.Nullable [%=class.bo().fqName()%] input) {
	                 return [%=class.name%].super.create(input);
	             }
	         }, this);
	    }
	[%}%]

    [%if (class.representsUser) { %]
	    @Reference
	    private hu.blackbelt.judo.business.security.api.UserCredentialHashing credentialHashing;
	
	    @Reference
	    private hu.blackbelt.judo.business.security.api.UserCreateSupport<[%=class.bo().fqName()%]> userCreateSupport;
	
	    @Reference
	    private hu.blackbelt.judo.framework.api.service.RoleService roleService;
	
	    @Override
	    public [%=class.bo().fqName()%] create([%=class.bo().fqName()%] obj) {
	
	        return userCreateSupport.create(obj, new com.google.common.base.Function<[%=class.bo().fqName()%], [%=class.bo().fqName()%]>() {
	            @Override
	            public [%=class.bo().fqName()%] apply([%=class.bo().fqName()%] input) {
	
	                return [%=class.name%].super.create(input);
	
	            }
	        }, this, roleService);
	    }
	
	    @Override
	    public [%=class.bo().fqName()%] update([%=class.bo().fqName()%] obj) {
	        credentialHashing.forUpdate(obj);
	        return super.update(obj);
	    }
    [%}%]

    @Override
    public EntityDao<[%=class.bo().fqName()%]> getEntityDao() {
        return [%=daoFieldName%];
    }

    @Override
    public BoTypeResolver getBoTypeResolver() {
        return boTypeResolver;
    }

    [%for (stateMachine in class.origin.stateMachines) { %]
	    [% 
	    var stateMachineEnumClass = stateMachine.correspondingEnum.classRepresentation;
	    var stateMachineDaoFieldName = stateMachineEnumClass.daoMinimal().name.firstToLowerCase();
	    %]
	
	    @Reference
	    private [%=stateMachineEnumClass.daoMinimal().fqName()%] [%=stateMachineDaoFieldName%];
	
	    public EntityDao<[%=stateMachineEnumClass.bo().fqName()%]> get[%=stateMachineEnumClass.daoMinimal().name%]() {
	        return [%=stateMachineDaoFieldName%];
	    }
	    
	    private [%=class.bo().fqName()%] update[%=stateMachine.name.firstToUpperCase()%](final [%=idType().fqName()%] id, String value) {
	        Query q = Query.builder()
	            .condition(Expressions.expression([%=class.origin.package.domainBqlClass.fqName()%].[%=stateMachineEnumClass.bo().name.firstToLowerCase()%]().code()).equal(value))
	            .source([%=stateMachineEnumClass.bo().fqName()%].class)
	            .build();
	            
	        [%=stateMachineEnumClass.bo().fqName()%] [%=stateMachineEnumClass.bo().name.firstToLowerCase()%] = [%=stateMachineDaoFieldName%].findSingle(q);
	
	        attachSingle(id, [%=class.origin.package.domainBqlClass.fqName()%].[%=class.bo().name.firstToLowerCase()%]().[%=stateMachine.name%](), [%=stateMachineEnumClass.bo().name.firstToLowerCase()%]);
	
	        return read(id);
	    }
	[%}%]
	
    [%for (method in class.methods()) { %]
	    public [%if (method.isGuardDecide()) { %][%=method.ownerClass.fqName()%].[%=method.type.name%][%} else {%][%=method.type.fqName()%][%}%] [%=method.name%] ([%=method.parametersSignature()%]){
		    [%if (method.isQueryCount()) { %]
		        throw new UnsupportedOperationException("You have to override customCount method implementation in your default service!!");
		    [%} else if (method.isGuardDecide()) { %]
		    	throw new hu.blackbelt.judo.business.validator.api.ErrorCodedRuntimeException(
		                        hu.blackbelt.judo.business.validator.api.codes.FrameworkErrorCodes.AMBIGIUOS_STATE_TRANSITION,
		                        " [%=class.bo().name%] - [%=method.name%] - [%=method.guards.ownerTransition.fromState.name%] Ambiguous state transition. Implement method: [%=method.name%]");
		    [%} else if (method.isCustomBulk()) { %]
		    	[%if (method.isReturnVoid()) { %]
		    		for ([%=idType().fqName()%] id : ids) {
			        	[%=method.name%] ([%=method.parameterSequenceReplacedForCall("ids", "id")%]);
			        }
				[%} else {%]
			        [%=method.type.fqName()%] ret = new java.util.ArrayList<>();
			        for ([%=idType().fqName()%] id : ids) {
			        	[%=method.type.componentType.fqName()%] resultFromSingle = [%=method.name%] ([%=method.parameterSequenceReplacedForCall("ids", "id")%]);
			            if (resultFromSingle != null) {
			            	ret.add(resultFromSingle);
			            }
			        }
			        return ret;
				[%}%]
			[%} else if (method.isQuery()) { %]
				throw new UnsupportedOperationException("You have to override custom query implementation in your default service!!");
			[%} else if (method.isCustom()) { %]
				[%if (not method.isTransitionExecutingMethod()){%]
		    		throw new UnsupportedOperationException("You have to override custom method implementation in your default service!!");
				[%} else {%]
					[%if (method.parameters.get(0).representsJudoId) { %]
						Query q = Query.builder()
			          		.condition(Expressions.id(id))
			           		.source([%=class.bo().fqName()%].class)
			           		.build();
				    	[%=class.bo().fqName()%] [%=class.bo().name.firstToLowerCase()%] = [%=daoFieldName%].findSingle(q);
				    	
				    	[%if (not method.isReturnVoid()) { %]
				    		return [%=method.name%] ([%=method.parameterSequenceReplacedForCall(method.parameters.get(0).name, class.bo().name.firstToLowerCase())%]);
				    	[%} else {%]
				    		[%=method.name%] ([%=method.parameterSequenceReplacedForCall(method.parameters.get(0).name, class.bo().name.firstToLowerCase())%]);
						[%}%]
				    	
					[%} else {%]
						if ([%=method.parameters.get(0).name.firstToLowerCase()%] == null) {
					        throw new ValidationException(
					                                    Arrays.asList(
					                                        Validator.Result.builder()
					                                            .severity(Validator.Severity.Error)
					                                            .messageId(hu.blackbelt.judo.business.validator.api.codes.FrameworkErrorCodes.INVALID_STATE_TRANSITION)
					                                            .defaultMessage("[%=class.bo().name%] - [%=method.name%] nem tal치lhat칩 entit치s: " + [%=method.parameters.get(0).name.firstToLowerCase()%].getId())
					                                            .build()));
					    }
					        
					    [%for (stateMachine in method.origin.transitions.ownerStateMachine.asSet()) { %]
						    if ([%=method.parameters.get(0).name.firstToLowerCase()%].get[%=stateMachine.name.firstToUpperCase()%]() == null) {
						        throw new ValidationException(
						                Arrays.asList(
						                    Validator.Result.builder()
						                        .severity(Validator.Severity.Error)
						                        .messageId(hu.blackbelt.judo.business.validator.api.codes.FrameworkErrorCodes.INVALID_STATE_TRANSITION)
						                        .defaultMessage("[%=class.bo().name%] - [%=method.name%] Ismeretlen 치llapot.")
						                        .build()));
						    }
						    switch ([%=method.parameters.get(0).name.firstToLowerCase()%].get[%=stateMachine.name.firstToUpperCase()%]().getCode()) {
						        [%for (state in method.getFromStatesInStateMachine(stateMachine)) { %]
						            case "[%=state.name%]":
						            	[%var decideMethod = state.getDecideMethodFor(method.origin);%]
							            [%if (decideMethod.isUndefined()) {%]
							              	return update[%=stateMachine.name.firstToUpperCase()%]([%=method.parameters.get(0).name.firstToLowerCase()%].getId(), "[%=state.toStateViaExecutingMethod(method.origin).name%]");
							            [%} else {%]
							                switch ([%=decideMethod.name%] ([%=method.parameters.get(0).name.firstToLowerCase()%].getId())) {
							                    [%for (guard in decideMethod.guards.asSet()) { %]
							                        case [%=guard.literal.name%] :
							                            return update[%=stateMachine.name.firstToUpperCase()%]([%=method.parameters.get(0).name.firstToLowerCase()%].getId(), "[%=guard.ownerTransition.toState.name%]");
												[%}%]
							                }
							            [%}%]
								[%}%]
						        default:
						            throw new ValidationException(
						                Arrays.asList(
						                    Validator.Result.builder()
						                        .severity(Validator.Severity.Error)
						                        .messageId(hu.blackbelt.judo.business.validator.api.codes.FrameworkErrorCodes.INVALID_STATE_TRANSITION)
						                        .defaultMessage("[%=class.bo().name%] - [%=method.name%] Nem megengedett 치llapot치tmenet. " + [%=method.parameters.get(0).name.firstToLowerCase()%].get[%=stateMachine.name.firstToUpperCase()%]().getCode())
						                        .build()));
						    }
						[%}%]
					[%}%]
		    	[%}%]
			[%}%]
		}
	[%}%]
	
	[%for (decideMethodHelperEnum in class.guardEnums()) { %]
		public enum [%=decideMethodHelperEnum.name%] {
			[%=decideMethodHelperEnum.literals.collect( l | l.name).concat(', ')%];
		}
	[%}%]
}