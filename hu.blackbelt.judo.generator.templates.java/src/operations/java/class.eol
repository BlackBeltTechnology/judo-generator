@cached
operation JAVA!JvmClass attributes () : Collection {
	return self.members.select( m | m.isTypeOf(JAVA!JvmAttribute)).sortBy(a | a.name);
}

@cached
operation JAVA!JvmClass allAttributes () : Collection {
	var all = self.attributes().clone();
	if (self.supertype.isDefined()) {
		all.addAll(self.supertype.allAttributes());
	}
	return all.sortBy(a | a.name);
}

@cached
operation JAVA!JvmClass references () : Collection {
	return self.members.select( m | m.isTypeOf(JAVA!JvmReference)).sortBy(r | r.name);
}

@cached
operation JAVA!JvmClass allReferences () : Collection {
	var all = self.references().clone();
	if (self.supertype.isDefined()) {
		all.addAll(self.supertype.allReferences());
	}
	return all.sortBy(a | a.name);
}

@cached
operation JAVA!JvmClass members () : Collection {
	return self.members.sortBy(r | r.name);
}

@cached
operation JAVA!JvmClass guardEnums () : Collection {
	var allGuards = self.methods.guards.flatten();
	if (allGuards.notEmpty()) {
		return allGuards.literal.ownerEnum.asSet();
	} else {
		return new Set;
	}
}

@cached
operation JAVA!JvmClass createAllowed () : Boolean {
	return not (self.abstract and self.references().size() > 0);
}

operation JAVA!JvmClass enumValueClass () : JAVA!JvmClass {
    //TODO: this should be introduced in the meta PSM model
    var ref = self.origin.allReferences().selectOne(r | Set{self.origin.name + "Value", self.origin.shortName + "Value"}.includes(r.opposite.ownerClass.name));
    if (ref.isDefined()) {
        return ref.opposite.ownerClass.find(self.coordinate);
    }
}