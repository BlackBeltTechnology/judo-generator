[%
import "operations/_importAll.eol";

var COORDINATE_TO_TEMPLATE = Map {

		JAVA!JvmJudoCoordinate#PO = "po",
		JAVA!JvmJudoCoordinate#PO_ENUM = "enum",

		JAVA!JvmJudoCoordinate#BO = "bo",
		JAVA!JvmJudoCoordinate#BO_ENUM = "enum",
		JAVA!JvmJudoCoordinate#BO_BUILDER = "bobuilder",
		JAVA!JvmJudoCoordinate#BO_BUILDER_INTERFACE = "bobuilderinterface",
		JAVA!JvmJudoCoordinate#BO_INTERFACE = "bointerface",
		JAVA!JvmJudoCoordinate#BO_BQL = "bobql",
		JAVA!JvmJudoCoordinate#BO_BQL_FRAMEWORK = "bobql",
		JAVA!JvmJudoCoordinate#BO_FACTORY_INTERFACE = "bofactoryinterface",
		JAVA!JvmJudoCoordinate#BO_FACTORY = "bofactory",
		JAVA!JvmJudoCoordinate#DOMAIN_BQL = "domainbql",

		JAVA!JvmJudoCoordinate#DAO_MINIMAL = "daominimal",

		JAVA!JvmJudoCoordinate#BO_SERVICE_INTERFACE = "boservice",
		JAVA!JvmJudoCoordinate#BO_FRAMEWORK_SERVICE_INTERFACE = "boframeworkservice",
		
		JAVA!JvmJudoCoordinate#BO_SERVICE_ABSTRACT = "boserviceabstract",
		JAVA!JvmJudoCoordinate#BO_SERVICE_DEFAULT = "boservicedefault",
		JAVA!JvmJudoCoordinate#BO_FRAMEWORK_SERVICE_DEFAULT = "boframeworkservicedefault",
		JAVA!JvmJudoCoordinate#BO_ENUM_SERVICE = "boenumservice",
		JAVA!JvmJudoCoordinate#BO_SERVICE_WRAPPER = "boservicewrapper",
		JAVA!JvmJudoCoordinate#BO_FRAMEWORK_SERVICE_WRAPPER = "boframeworkservicewrapper",

		JAVA!JvmJudoCoordinate#DAO_QUERY_DSL = "daoquerydsl",

		JAVA!JvmJudoCoordinate#DTO = "dto",
		JAVA!JvmJudoCoordinate#DTO_BUILDER = "dtobuilder",
		JAVA!JvmJudoCoordinate#DTO_ENUM = "dtoenum",
		JAVA!JvmJudoCoordinate#DTO_OPERATION = "dtooperation",
		JAVA!JvmJudoCoordinate#DTO_ACCESSOR = "dtoaccessor",
		JAVA!JvmJudoCoordinate#DTO_OPERATION_IMPL = "dtooperationimpl",

		JAVA!JvmJudoCoordinate#REST_DTO = "restdto",
		JAVA!JvmJudoCoordinate#REST_DTO_BUILDER = "restdtobuilder",
		JAVA!JvmJudoCoordinate#REST_DTO_ENUM = "enum",
		JAVA!JvmJudoCoordinate#REST_OPERATION = "restoperation",
		JAVA!JvmJudoCoordinate#REST_OPERATION_IMPL = "restoperationimpl",

		JAVA!JvmJudoCoordinate#REST_NAMESPACE = "restnamespace",
		JAVA!JvmJudoCoordinate#REST_NAMESPACE_OPERATION = "restnamespaceoperation",
		JAVA!JvmJudoCoordinate#REST_NAMESPACE_OPERATION_IMPL = "restnamespaceoperationimpl",

		JAVA!JvmJudoCoordinate#DAO_HEALTH_CHECK = "daohealthcheck",
		JAVA!JvmJudoCoordinate#BO_SERVICE_HEALTH_CHECK = "boservicehealthcheck",
		JAVA!JvmJudoCoordinate#DTO_OPERATION_HEALTH_CHECK = "dtooperationhealthcheck",
		JAVA!JvmJudoCoordinate#REST_OPERATION_HEALTH_CHECK = "restoperationhealthcheck",
		JAVA!JvmJudoCoordinate#BO_FRAMEWORK_SERVICE_HEALTH_CHECK = "boframeworkservicehealthcheck",

		JAVA!JvmJudoCoordinate#FILTER_REST_DTO = "filterrestdto",

		JAVA!JvmJudoCoordinate#BO_TYPE_RESOLVER = "botyperesolver",
		JAVA!JvmJudoCoordinate#ENUM_CONVERTER_SERVICE = "enumconverterservice",

		JAVA!JvmJudoCoordinate#ABSTRACT_REST_TEST_CLIENT = "abstractresttestclient",
		JAVA!JvmJudoCoordinate#REST_TEST_BASE = "resttestbase",
		JAVA!JvmJudoCoordinate#REST_TEST_CLIENT = "resttestclient",
		JAVA!JvmJudoCoordinate#REST_TEST_WRAPPER_C = "resttestwrapperc",
		JAVA!JvmJudoCoordinate#REST_TEST_WRAPPER_T = "resttestwrappert",
		JAVA!JvmJudoCoordinate#REST_TEST_WRAPPER_M = "resttestwrapperm",
		JAVA!JvmJudoCoordinate#REST_TEST_WRAPPER_S = "resttestwrappers"
	};
	
var JAVA_LANG = Native("java.lang.System");
var macros = Map{
	"macro_equalsToStringHashCode" = getJavaMacroInternal("equalsToStringHashCode"),
	"macro_metainfo" = getJavaMacroInternal("metainfo"),
	"macro_resttestwrapper_buildermethods" = getJavaMacroInternal("resttestwrapper_buildermethods"),
	"macro_resttestwrapper_methods" = getJavaMacroInternal("resttestwrapper_methods")
	};
	
JAVA!JvmModel.all.first().~coordinateMap = createMaps();

for (key in COORDINATE_TO_TEMPLATE.keySet()) {
	getJavaTemplate(COORDINATE_TO_TEMPLATE.get(key)).genJavaFor(key, macros);
}

genJavaForAbstractCrudService();
genTransactionManagerProvider();

operation Template genJavaFor(coordinate : Any, macros : Map) : Any {
	for (coordinated in filterBy(coordinate)) {
		if (not coordinated.fwElement) {
			for (e in macros.entrySet()) {
				self.populate(e.key, e.value);
			}
			self.genJava(coordinated);
			for (v in macros.values()) {
				v.reset();
			}
		}
	}
}

operation Template genJava(coordinated : JAVA!JvmCoordinated) : Any {
	self.populate("class", coordinated);
	self.generate(coordinated.coordinate.name + "/" + coordinated.fqPath() + ".java");
	self.reset();
}

operation getJavaMacroInternal (macroName : String) : Any {
	return getTemplate("java/macros", macroName);
}

operation getJavaTemplate (templateName : String) : Any {
	return getTemplate("java", templateName);
}

operation getTemplate (intermediateDir : String, templateName : String) : Any {
	return TemplateFactory.load("templates/" + intermediateDir + "/" + templateName + ".egl");
}

operation filterBy (coordinate : Any) : Collection {
	var toBeRemovedCoordinatesHack = Set{
									JAVA!JvmJudoCoordinate#BO_SERVICE_INTERFACE,
									JAVA!JvmJudoCoordinate#BO_SERVICE_ABSTRACT,
									JAVA!JvmJudoCoordinate#BO_SERVICE_DEFAULT,
									JAVA!JvmJudoCoordinate#BO_SERVICE_WRAPPER
									};
	return JAVA!JvmCoordinated.all.select(c | c.coordinate = coordinate and not (c.framework and toBeRemovedCoordinatesHack.includes(c.coordinate))
	           and not (c.coordinate = JAVA!JvmJudoCoordinate#REST_TEST_WRAPPER_C and (c.abstract or c.hasFixedEnum())));
}

operation genJavaForAbstractCrudService() {
	var crudTemplate = TemplateFactory.load("templates/java/boframeworkentityserviceabstract.egl");
	crudTemplate.generate("ABSTRACT_FRAMEWORK_CRUD_SERVICE/hu/blackbelt/judo/framework/api/service/AbstractFrameworkCrudService.java");
	crudTemplate.reset();
}

operation genTransactionManagerProvider() {
    //TODO: there should only be one java model and that should be used
    var javaModel = JAVA!JvmModel.all.selectOne(m | not m.framework);
    var appPrefix = javaModel.applicationTop.name.firstToUpperCase();
    var topPackage = javaModel.applicationTop.fqName() + ".transaction";
	var t = TemplateFactory.load("templates/java/transactionmanagerprovider.egl");
	t.populate("className", appPrefix + "TransactionManagerProvider");
	t.populate("topPackageName", topPackage);

	t.generate("TRANSACTION_MANAGER_PROVIDER/" +  topPackage.replaceAll("\\.", "/") + "/" + appPrefix + "TransactionManagerProvider.java");
	t.reset();
}


operation createMaps () : Map {
	var m = Map{};
	for (e in JAVA!JvmEnum.all){
		var key = e.origin().uuid + "!" + e.coordinate;
		m.put(key, e);
		if (e.classRepresentation.isDefined()) {
			var key2 = "ie!" + e.classRepresentation.origin().uuid + "!" + e.coordinate;
			m.put(key2, e);
		}
	}
	
	for (e in JAVA!JvmInterface.all){
		if (e.origin().isDefined()) {
			var key = e.origin().uuid + "!" + e.coordinate;
			m.put(key, e);
			if (e.isTypeOf(JAVA!JvmClass) and e.fixedEnum.isDefined()) {
				var key2 = "ei!" + e.fixedEnum.origin().uuid + "!" + e.coordinate;
				m.put(key2, e);
			}
		}
	}
	return m;
}

%]