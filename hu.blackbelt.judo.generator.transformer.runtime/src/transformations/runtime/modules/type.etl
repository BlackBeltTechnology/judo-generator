import "../../../operations/psm/type/_importType.eol";
import "../../../operations/runtime/_importRuntime.eol";

@cached
operation JUDOPSM!Primitive getEcoreType() : TYPES!EDataType {
	if (self.isKindOf(JUDOPSM!String)) {
		return "JString".getJudoDataType();
	} else if (self.isKindOf(JUDOPSM!Numeric)) {
		if (self.precision == 0 and self.scale <= 9) {
			return "JInteger".getJudoDataType();
		} else if (self.precision == 0 and self.scale > 9 and self.scale <= 18) {
			return "JLong".getJudoDataType();
		} else if (self.precision == 0 and self.scale > 18) {
			return "JBigInteger".getJudoDataType();
		} else if (self.precision > 0 and self.scale <= 7) {
			return "JFloat".getJudoDataType();
		} else if (self.precision > 0 and self.scale > 7 and self.scale <= 15) {
			return "JDouble".getJudoDataType();
		} else if (self.precision > 0 and self.scale > 15) {
			return "JBigDecimal".getJudoDataType();
		}
	} else if (self.isKindOf(JUDOPSM!Boolean)) {
		return "JBoolean".getJudoDataType();
	} else if (self.isKindOf(JUDOPSM!Enumeration)) {
		return self.equivalent();
	} else if (self.isKindOf(JUDOPSM!Custom)) {
		switch (self.name) {
			case "Date":
				return "JDate".getJudoDataType();
			case "Timestamp":
				return "JTimestamp".getJudoDataType();
			case "Binary":
				return "JByteArray".getJudoDataType();
			default:
				return "JObject".getJudoDataType();
		}
	} else {
		return "JObject".getJudoDataType();
	}
}

rule CreateEnumeration
	transform s : JUDOPSM!Enumeration
	to t : RUNTIME!EEnum {
		t.name = s.name;
		s.getPackage().equivalent().eClassifiers.add(t);
		for (m in s.members) {
			var l = new RUNTIME!EEnumLiteral;
			l.value = m.ordinal;
			l.literal = m.name;
			l.name = m.name;
			t.eLiterals.add(l);
		}
	}

rule CreateStructureClass
	transform s : JUDOPSM!Structure
	to t : RUNTIME!EClass {
		t.name = s.name;
		s.getPackage().equivalent().eClassifiers.add(t);
		for (f in s.fields) {
			var a = new RUNTIME!EAttribute;
			a.name = f.name;

			if (f.required) {
				a.lowerBound = 1;
			} else {
				a.lowerBound = 0;
			}

			a.eType = f.type.getEcoreType();

			var annotations = f.type.createRuntimeAnnotations();
			if (not annotations.isEmpty()) {
				var annotation = new RUNTIME!EAnnotation;
				annotation.source = extendedMetadataURI;
				annotation.details.addAll(annotations);
				a.eAnnotations.add(annotation);
			}

			t.eStructuralFeatures.add(a);
		}
	}
