
operation createRelationWithRoles(pkg : tgtPSM!JPackage,  clientRoleName : String,
														  supplierRoleName : String,
														  clientRoleOwner : tgtPSM!JClass,
														  supplierRoleOwner : tgtPSM!JClass) : tgtPSM!JRelationship {
	var relation : tgtPSM!JRelationship = new tgtPSM!JRelationship; 													  
	
 	pkg.relationships.add( relation );
 	
 	if (clientRoleName.length() > 0) {
 		clientRoleName = clientRoleName.firstToUpperCase();
 	}	
 	// clientRole
 	var clientRole : tgtPSM!JRole = new tgtPSM!JRole; 
 	clientRole.uuid = generateUuid(clientRoleOwner.uuid, supplierRoleOwner.name.firstToLowerCase() + clientRoleName, ".");
 	clientRole.name = supplierRoleOwner.name.firstToLowerCase() + clientRoleName;
 	clientRole.lower = 0;
 	clientRole.upper = -1;
 	relation.roles.add( clientRole );
 	
 	clientRole.ownerClass = clientRoleOwner;
 	clientRoleOwner.roles.add( clientRole );
 	
 	// supplierRole
 	var supplierRole : tgtPSM!JRole = new tgtPSM!JRole; 
 	supplierRole.uuid = generateUuid(supplierRoleOwner.uuid, supplierRoleName, ".");
 	supplierRole.name = supplierRoleName.firstToLowerCase();
 	supplierRole.navigable = true;
 	relation.roles.add( supplierRole );

	supplierRole.ownerClass = supplierRoleOwner;
	supplierRole.ownerClass.roles.add( supplierRole );
	
	relation.name = clientRole.name + "-" + supplierRole.name;
	relation.uuid = generateUuid(clientRoleOwner.uuid + "." + clientRole.name, supplierRoleOwner.uuid  + "." + supplierRole.name, "-");
	
	return relation;
}