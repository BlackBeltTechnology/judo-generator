
// duplication:
// copied from: hu.blackbelt.judo.generator/src/operations/util.eol
@cached
operation getUuidNativeStub () : Any {
	return Native("java.util.UUID");
}

@cached
operation getLongNativeStub () : Any {
	return Native("java.lang.Long");
}

//hack balaton style :-) this method should have been in an epsilon Tool, but I did not managed to make it work
operation uuid3 (namespace : String, name : String) : String {
	var nameSpace_OID_uuid = getUuidNativeStub().fromString(namespace);

	var msb = nameSpace_OID_uuid.getMostSignificantBits();
	var lsb = nameSpace_OID_uuid.getLeastSignificantBits();

	var outputStreamString = new Native("java.io.ByteArrayOutputStream");
	var i = 0;
	while (i < 8) {
		outputStreamString.write(getLongNativeStub().valueOf(getLongNativeStub().rotateRight(msb, 8 * (7 - i))).intValue());
		i++;
	}
	while (i < 16) {
		outputStreamString.write(getLongNativeStub().valueOf(getLongNativeStub().rotateRight(lsb, 8 * (7 - i))).intValue());
		i++;
	}
	
	outputStreamString.write(name.getBytes());

	return getUuidNativeStub().nameUUIDFromBytes(outputStreamString.toByteArray()).toString();
}

// END of duplication

operation mdId2Uuid(id : String) : String {
	var magicUUID = "c83deee1-d76b-4922-83d5-8b920a21fff4";

	return uuid3( magicUUID, id);
}

@cached
operation NamedElement name() : String {
	var name : String;

	if (self.name.size > 0) {
		name = self.name;
	} else {
		name = "<<UNNAMED>>";
	}
	
	return name;
}

@cached
operation Any fullyQualifiedPath() : String {

	if (self.isKindOf(NamedElement)) {
		if (self.owner.isUndefined()) {
			return self.name();
		} else {
			return self.owner.fullyQualifiedPath().concat("::").concat(self.name());
		}
	} else {
		if (self.owner.isUndefined()) {
			return self.name();
		} else {
			return self.owner.fullyQualifiedPath().concat("::__");
		}	
	}
}