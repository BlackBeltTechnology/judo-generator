import "operations/_importAll.eol";

pre {
	"START".println();
	
	//i need to extract the derived information from the UML as this info is lost during PIM/PSM transformation 	
	var ecxludedFields : Set<String> = inpPIM!Property.all.select(p | p.isDerived 
																or p.visibility = inpPIM!VisibilityKind#private
																/*or p.visibility = inpPIM!VisibilityKind#protected*/)
													.collect(p | p.fqName()).asSet();
													
	//all things from extension model must be excluded
	ecxludedFields.addAll(pimEXT!EStructuralFeature.all.collect(a | a.fqName()));
	//additional field exclusions
	ecxludedFields.add("anakin.business.domain.ugylet.termek.KolcsonSema.modositasDatuma");
	ecxludedFields.add("anakin.business.domain.ugylet.termek.KolcsonSema.modositoFelhasznalo");
	ecxludedFields.add("anakin.business.domain.felhasznalo.Felhasznalo.becsusiKolcsonLimit");
	ecxludedFields.add("anakin.business.domain.felhasznalo.Felhasznalo.lastFailedLoginTime");
	ecxludedFields.add("judo.framework.User.credential");
	ecxludedFields.add("judo.framework.User.lastLoginTime");
	ecxludedFields.add("judo.framework.User.sms");
	ecxludedFields.add("judo.framework.User.notificationEmail");
	ecxludedFields.add("judo.framework.User.notificationSms");
	
	//we can defined classes to be excluded
	var excludedClasses : Set<String> = new Set;
	/*excludedClasses.add("anakin.business.domain.felhasznalo.Beosztas");
	excludedClasses.add("anakin.business.domain.felhasznalo.Privilegium");
	excludedClasses.add("anakin.business.domain.felhasznalo.PrivilegiumErtek");
	excludedClasses.add("anakin.business.domain.felhasznalo.PrivilegiumErtekValue");
	excludedClasses.add("anakin.business.domain.felhasznalo.Szerepkor");
	excludedClasses.add("anakin.business.domain.nyomtatas.DokumentumIranyultsag");
	excludedClasses.add("anakin.business.domain.nyomtatas.DokumentumIranyultsagValue");
	excludedClasses.add("anakin.business.domain.nyomtatas.DokumentumLeiro");
	excludedClasses.add("anakin.business.domain.nyomtatas.Dokumentum");
	excludedClasses.add("anakin.business.domain.nyomtatas.DokumentumTipus");
	excludedClasses.add("anakin.business.domain.nyomtatas.DokumentumTipusValue");
	excludedClasses.add("anakin.business.domain.nyomtatas.NyomatKeszultsegiSzint");
	excludedClasses.add("anakin.business.domain.nyomtatas.NyomatKeszultsegiSzintValue");
	excludedClasses.add("anakin.business.domain.nyomtatas.NyomtatasEredmenykod");
	excludedClasses.add("anakin.business.domain.nyomtatas.NyomtatasEredmenykodValue");
	excludedClasses.add("anakin.business.domain.nyomtatas.NyomtatasiFeladat");
	excludedClasses.add("anakin.business.domain.nyomtatas.NyomtatasiFeladatStatusz");
	excludedClasses.add("anakin.business.domain.nyomtatas.NyomtatasiFeladatStatuszValue");
	excludedClasses.add("anakin.business.domain.nyomtatas.NyugtaDok");
	excludedClasses.add("anakin.business.domain.penztar.Cimlet");
	excludedClasses.add("anakin.business.domain.penztar.MuveletNaploEsemeny");
	excludedClasses.add("anakin.business.domain.penztar.MuveletNaploEsemenyTipus");
	excludedClasses.add("anakin.business.domain.penztar.MuveletNaploEsemenyTipusValue");
	excludedClasses.add("anakin.business.domain.penztar.Penztar");
	excludedClasses.add("anakin.business.domain.penztar.TrezorTipus");
	excludedClasses.add("anakin.business.domain.penztar.TrezorTipusValue");
	//excludedClasses.add("anakin.business.domain.raktar.Aktiv_e");
	excludedClasses.add("anakin.business.domain.raktar.Aktiv_eValue");
	excludedClasses.add("anakin.business.domain.raktar.EgyediRaktarTetelMuvelet");
	excludedClasses.add("anakin.business.domain.raktar.FeladatTipus");
	excludedClasses.add("anakin.business.domain.raktar.FeladatTipusValue");
	excludedClasses.add("anakin.business.domain.raktar.Gyakorisag");
	excludedClasses.add("anakin.business.domain.raktar.GyakorisagValue");
	excludedClasses.add("anakin.business.domain.raktar.RaktarMuvelet");
	excludedClasses.add("anakin.business.domain.raktar.RaktarMuveletTipus");
	excludedClasses.add("anakin.business.domain.raktar.RaktarMuveletTipusValue");
	excludedClasses.add("anakin.business.domain.raktar.RaktariFeladat");
	excludedClasses.add("anakin.business.domain.raktar.RaktariFeladatokOsszesito");
	excludedClasses.add("anakin.business.domain.raktar.RaktariMuveletStatusz");
	excludedClasses.add("anakin.business.domain.raktar.RaktariMuveletStatuszValue");
	//excludedClasses.add("anakin.business.domain.raktar.RaktariTetelStatusz");
	excludedClasses.add("anakin.business.domain.raktar.RaktariTetelStatuszValue");
	excludedClasses.add("anakin.business.domain.raktar.Rovancs");
	excludedClasses.add("anakin.business.domain.raktar.RovancsAdag");
	excludedClasses.add("anakin.business.domain.raktar.RovancsAdagRovancsAdagAllapot");
	excludedClasses.add("anakin.business.domain.raktar.RovancsAdagRovancsAdagAllapotValue");
	//excludedClasses.add("anakin.business.domain.raktar.RovancsAnyag");
	excludedClasses.add("anakin.business.domain.raktar.RovancsAnyagValue");
	excludedClasses.add("anakin.business.domain.raktar.RovancsEredmeny");
	excludedClasses.add("anakin.business.domain.raktar.RovancsEredmenyValue");
	excludedClasses.add("anakin.business.domain.raktar.RovancsIsmetlodes");
	excludedClasses.add("anakin.business.domain.raktar.RovancsIsmetlodesValue");
	excludedClasses.add("anakin.business.domain.raktar.RovancsRovancsAllapot");
	excludedClasses.add("anakin.business.domain.raktar.RovancsRovancsAllapotValue");
	excludedClasses.add("anakin.business.domain.raktar.RovancsSablon");
	excludedClasses.add("anakin.business.domain.raktar.RovancsTargy");
	excludedClasses.add("anakin.business.domain.raktar.RovancsTargyEredmeny");
	excludedClasses.add("anakin.business.domain.raktar.RovancsTargyEredmenyValue");
	excludedClasses.add("anakin.business.domain.raktar.RovancsTargyRovancsTargyAllapot");
	excludedClasses.add("anakin.business.domain.raktar.RovancsTargyRovancsTargyAllapotValue");
	excludedClasses.add("anakin.business.domain.raktar.RovancsTargykor");
	excludedClasses.add("anakin.business.domain.raktar.RovancsTargykorValue");
	excludedClasses.add("anakin.business.domain.raktar.RovancsTetel");
	excludedClasses.add("anakin.business.domain.raktar.RovancsTetelEredmeny");
	excludedClasses.add("anakin.business.domain.raktar.RovancsTetelEredmenyValue");
	excludedClasses.add("anakin.business.domain.raktar.RovancsTetelRovancsTetelAllapot");
	excludedClasses.add("anakin.business.domain.raktar.RovancsTetelRovancsTetelAllapotValue");
	excludedClasses.add("anakin.business.domain.raktar.RovancsTipus");
	excludedClasses.add("anakin.business.domain.raktar.RovancsTipusValue");
	//excludedClasses.add("anakin.business.domain.raktar.TetelHolVan");
	excludedClasses.add("anakin.business.domain.raktar.TetelHolVanValue");
	//excludedClasses.add("anakin.business.domain.raktar.TetelTipus");
	excludedClasses.add("anakin.business.domain.raktar.TetelTipusValue");
	excludedClasses.add("anakin.business.domain.raktar.UzletiMuveletTipus");
	excludedClasses.add("anakin.business.domain.raktar.UzletiMuveletTipusValue");
	excludedClasses.add("anakin.business.domain.raktar.integer");
	//excludedClasses.add("anakin.business.domain.szervezet.FiokTipus");
	excludedClasses.add("anakin.business.domain.szervezet.FiokTipusValue");
	//excludedClasses.add("anakin.business.domain.szervezet.KozvetitoCeg");
	//excludedClasses.add("anakin.business.domain.szervezet.SzervEgysTipus");
	excludedClasses.add("anakin.business.domain.szervezet.SzervEgysTipusValue");
	//excludedClasses.add("anakin.business.domain.targy.Anyag");
	excludedClasses.add("anakin.business.domain.targy.AnyagValue");
	excludedClasses.add("anakin.business.domain.targy.Arfolyam");
	//excludedClasses.add("anakin.business.domain.targy.BecslesTipus");
	excludedClasses.add("anakin.business.domain.targy.BecslesTipusValue");
	//excludedClasses.add("anakin.business.domain.targy.Finomsag");
	//excludedClasses.add("anakin.business.domain.targy.TargyHolVan");
	excludedClasses.add("anakin.business.domain.targy.TargyHolVanValue");
	//excludedClasses.add("anakin.business.domain.targy.TargyTipus");
	excludedClasses.add("anakin.business.domain.targy.TargyTipusValue");
	//excludedClasses.add("anakin.business.domain.targy.Zalognem");
	excludedClasses.add("anakin.business.domain.targy.ZalogtargyStatusz");
	excludedClasses.add("anakin.business.domain.targy.ZalogtargyStatuszValue");
	//excludedClasses.add("anakin.business.domain.ugyfel.CimTipusa");
	excludedClasses.add("anakin.business.domain.ugyfel.CimTipusaValue");
	//excludedClasses.add("anakin.business.domain.ugyfel.OkmanyTipus");
	excludedClasses.add("anakin.business.domain.ugyfel.OkmanyTipusValue");
	//excludedClasses.add("anakin.business.domain.ugyfel.PmtAdatkor");
	excludedClasses.add("anakin.business.domain.ugyfel.PmtAdatkorValue");
	//excludedClasses.add("anakin.business.domain.ugyfel.TelefonTipusa");
	excludedClasses.add("anakin.business.domain.ugyfel.TelefonTipusaValue");
	//excludedClasses.add("anakin.business.domain.ugyfel.TvkStatusz");
	excludedClasses.add("anakin.business.domain.ugyfel.TvkStatuszValue");
	//excludedClasses.add("anakin.business.domain.ugyfel.UgyfelStatusz");
	excludedClasses.add("anakin.business.domain.ugyfel.UgyfelStatuszValue");
	//excludedClasses.add("anakin.business.domain.ugylet.AjanlatStatusz");
	excludedClasses.add("anakin.business.domain.ugylet.AjanlatStatuszValue");
	excludedClasses.add("anakin.business.domain.ugylet.BankiUtalas");
	excludedClasses.add("anakin.business.domain.ugylet.BankiUtalasStatusz");
	excludedClasses.add("anakin.business.domain.ugylet.BankiUtalasStatuszValue");
	excludedClasses.add("anakin.business.domain.ugylet.ElallasiOk");
	//excludedClasses.add("anakin.business.domain.ugylet.KHRLekerdezesStatusz");
	excludedClasses.add("anakin.business.domain.ugylet.KHRLekerdezesStatuszValue");
	//excludedClasses.add("anakin.business.domain.ugylet.KifizetesModja");
	excludedClasses.add("anakin.business.domain.ugylet.KifizetesModjaValue");
	//excludedClasses.add("anakin.business.domain.ugylet.Kockazat");
	excludedClasses.add("anakin.business.domain.ugylet.KockazatValue");
	excludedClasses.add("anakin.business.domain.ugylet.NfAnyagKonfig");
	excludedClasses.add("anakin.business.domain.ugylet.SzerzodesStatusz");
	excludedClasses.add("anakin.business.domain.ugylet.SzerzodesStatuszValue");
	//excludedClasses.add("anakin.business.domain.ugylet.SzerzodesTipusa");
	excludedClasses.add("anakin.business.domain.ugylet.SzerzodesTipusaValue");
	//excludedClasses.add("anakin.business.domain.ugylet.Ugylettipus");
	excludedClasses.add("anakin.business.domain.ugylet.UgylettipusValue");
	excludedClasses.add("anakin.business.domain.ugylet.UzletiKonfiguracio");
	//excludedClasses.add("anakin.business.domain.ugylet.elzalogositas.ElzalogositasFazis");
	excludedClasses.add("anakin.business.domain.ugylet.elzalogositas.ElzalogositasFazisValue");
	//excludedClasses.add("anakin.business.domain.ugylet.kezeles.SzerzKezMuveletTipus");
	excludedClasses.add("anakin.business.domain.ugylet.kezeles.SzerzKezMuveletTipusValue");
	excludedClasses.add("anakin.business.domain.ugylet.kezeles.Szerzodeskezeles");
	excludedClasses.add("anakin.business.domain.ugylet.kezeles.SzerzodeskezelesFazis");
	excludedClasses.add("anakin.business.domain.ugylet.kezeles.SzerzodeskezelesFazisValue");
	excludedClasses.add("anakin.business.domain.ugylet.kondicio.LezarasiKondicio");
	excludedClasses.add("anakin.business.domain.ugylet.penzforgalmi.MuveletBeallitas");
	excludedClasses.add("anakin.business.domain.ugylet.penzforgalmi.Muvelet");
	excludedClasses.add("anakin.business.domain.ugylet.penzforgalmi.MuveletValue");
	excludedClasses.add("anakin.business.domain.ugylet.penzforgalmi.PenzugyiTranzakcioStatusz");
	excludedClasses.add("anakin.business.domain.ugylet.penzforgalmi.PenzugyiTranzakcioStatuszValue");
	excludedClasses.add("anakin.business.domain.ugylet.penzforgalmi.TranzakcioTipus");
	excludedClasses.add("anakin.business.domain.ugylet.penzforgalmi.TranzakcioTipusValue");
	excludedClasses.add("anakin.business.domain.ugylet.termek.AdhatoKolcsonSzorzo");
	excludedClasses.add("anakin.business.domain.ugylet.termek.CiklusEsedekesseg");
	excludedClasses.add("anakin.business.domain.ugylet.termek.CiklusEsedekessegValue");
	excludedClasses.add("anakin.business.domain.ugylet.termek.CiklusGyakorisag");
	excludedClasses.add("anakin.business.domain.ugylet.termek.CiklusGyakorisagValue");
	//excludedClasses.add("anakin.business.domain.ugylet.termek.Dijszabas");
	//excludedClasses.add("anakin.business.domain.ugylet.termek.KezelesiDijEsedekessege");
	excludedClasses.add("anakin.business.domain.ugylet.termek.KezelesiDijEsedekessegeValue");
	//excludedClasses.add("anakin.business.domain.ugylet.termek.KolcsonSema");
	excludedClasses.add("anakin.business.domain.ugylet.termek.SzerzodesMuveletek");
	excludedClasses.add("anakin.business.domain.ugylet.termek.SzerzodesMuveletekValue");
	//excludedClasses.add("anakin.business.domain.ugylet.termek.Termek");
	excludedClasses.add("anakin.business.domain.ugylet.termek.TermekKategoria");
	excludedClasses.add("anakin.business.domain.ugylet.termek.TermekKategoriaEleres");
	excludedClasses.add("anakin.business.domain.ugylet.termek.TermekKategoriaStatusz");
	excludedClasses.add("anakin.business.domain.ugylet.termek.TermekKategoriaStatuszValue");
	excludedClasses.add("anakin.business.domain.ugylet.termek.TermekStatusz");
	excludedClasses.add("anakin.business.domain.ugylet.termek.TermekStatuszValue");
	excludedClasses.add("anakin.business.domain.ugylet.termek.TermekSzuro");
	excludedClasses.add("anakin.business.domain.ugylet.termek.TermekVerzioStatusz");
	excludedClasses.add("anakin.business.domain.ugylet.termek.TermekVerzioStatuszValue");
	//excludedClasses.add("anakin.business.domain.ugylet.termek.Termekverzio");
	//excludedClasses.add("anakin.business.domain.ugylet.termek.ToketorlesztesModja");
	excludedClasses.add("anakin.business.domain.ugylet.termek.ToketorlesztesModjaValue");*/
	excludedClasses.add("anakin.business.domain.workflow.AlapFolyamatAdat");
	excludedClasses.add("anakin.business.domain.workflow.AnakinTask");
	excludedClasses.add("anakin.business.domain.workflow.FolyamatFeladat");
	excludedClasses.add("anakin.business.domain.workflow.ProcessState");
	excludedClasses.add("anakin.business.domain.workflow.ProcessStateValue");
	excludedClasses.add("anakin.business.domain.workflow.TaskState");
	excludedClasses.add("anakin.business.domain.workflow.TaskStateValue");
	excludedClasses.add("anakin.business.domain.workflow.Workflow");
	excludedClasses.add("ext.RaktariTetelAllapot");
	excludedClasses.add("ext.RaktariTetelAllapotValue");
	excludedClasses.add("ext.SecurityInputPair");
	excludedClasses.add("judo.framework.Candidate");
	excludedClasses.add("judo.framework.Checklist");
	excludedClasses.add("judo.framework.ChecklistItem");
	excludedClasses.add("judo.framework.Comment");
	excludedClasses.add("judo.framework.Config");
	excludedClasses.add("judo.framework.ConfigEntry");
	excludedClasses.add("judo.framework.CustomFieldDescriptor");
	excludedClasses.add("judo.framework.CustomFieldType");
	excludedClasses.add("judo.framework.CustomFieldTypeValue");
	excludedClasses.add("judo.framework.Expression");
	excludedClasses.add("judo.framework.Header");
	excludedClasses.add("judo.framework.InstanceState");
	excludedClasses.add("judo.framework.InstanceStateValue");
	excludedClasses.add("judo.framework.Language");
	excludedClasses.add("judo.framework.Model");
	excludedClasses.add("judo.framework.Operator");
	excludedClasses.add("judo.framework.OperatorValue");
	excludedClasses.add("judo.framework.Permission");
	excludedClasses.add("judo.framework.Priority");
	excludedClasses.add("judo.framework.PriorityValue");
	excludedClasses.add("judo.framework.Process");
	excludedClasses.add("judo.framework.ProcessComment");
	excludedClasses.add("judo.framework.Profile");
	excludedClasses.add("judo.framework.ProfileEntry");
	excludedClasses.add("judo.framework.Resolution");
	excludedClasses.add("judo.framework.Role");
	excludedClasses.add("judo.framework.Rule");
	excludedClasses.add("judo.framework.Table");
	excludedClasses.add("judo.framework.TableTest");
	excludedClasses.add("judo.framework.TableTestInput");
	excludedClasses.add("judo.framework.Task");
	excludedClasses.add("judo.framework.Tenant");
	excludedClasses.add("judo.framework.TenantRole");
	excludedClasses.add("judo.framework.TenantUser");
	excludedClasses.add("judo.framework.Type");
	excludedClasses.add("judo.framework.TypeValue");
	excludedClasses.add("judo.framework.User");
	excludedClasses.add("judo.framework.UserCandidate");
	excludedClasses.add("judo.framework.UserConfig");
	excludedClasses.add("judo.framework.UserInfo");
	excludedClasses.add("judo.framework.Workflow");
	excludedClasses.add("judo.framework.ProcessData");
	
	var additionalRoles : Set<String> = new Set;
	//there are roles that are not mandatory in uml, but must be included due to business requirement
	additionalRoles.add("Anakin.anakin.business.domain.ugylet.elzalogositas.Ajanlat.zalogtetelek");
	additionalRoles.add("Anakin.anakin.business.domain.ugylet.Szerzodes.zalogtargyBecslesek");
	additionalRoles.add("Anakin.anakin.business.domain.targy.ZalogtargyBecsles.zalogtargy");
	additionalRoles.add("Anakin.anakin.business.domain.targy.Zalogtargy.feljegyzesek");
	additionalRoles.add("Anakin.anakin.business.domain.targy.Zalogtargy.raktariTetel");
	additionalRoles.add("Anakin.anakin.business.domain.raktar.RaktariTetel.feljegyzesek");
	additionalRoles.add("Anakin.anakin.business.domain.raktar.RaktariTetel.tarolohely");
	additionalRoles.add("Anakin.anakin.business.domain.raktar.Tarolohely.raktar");
	
	//later use for flagging elotoltott data as we need to remame them in the migration schema
	var elotoltott : Set<String> = new Set;
	elotoltott.add("anakin.business.domain.ugylet.UzletiKonfiguracio");
	elotoltott.add("anakin.business.domain.ugylet.NfAnyagKonfig");
	elotoltott.add("anakin.business.domain.RiportUtemBeallitas");
	elotoltott.add("anakin.business.domain.felhasznalo.Szerepkor");
	elotoltott.add("anakin.business.domain.targy.Zalognem");
	elotoltott.add("anakin.business.domain.targy.Finomsag");
	elotoltott.add("anakin.business.domain.targy.TargyleirasRoviditesek");
	elotoltott.add("anakin.business.domain.szervezet.KozvetitoCeg");
	elotoltott.add("anakin.business.domain.szervezet.Regio");
	elotoltott.add("anakin.business.domain.ugylet.termek.Termek");
	elotoltott.add("anakin.business.domain.ugylet.termek.Termekverzio");
	elotoltott.add("anakin.business.domain.ugylet.termek.Dijszabas");
	elotoltott.add("anakin.business.domain.ugylet.termek.TermekKategoria");
	elotoltott.add("anakin.business.domain.ugylet.termek.TermekKategoriaEleres");
	elotoltott.add("anakin.business.domain.ugylet.termek.KolcsonSema");
	elotoltott.add("anakin.business.domain.ugylet.termek.AdhatoKolcsonRogzites");
	elotoltott.add("anakin.business.domain.ugylet.termek.AdhatoKolcsonSzorzo");
	elotoltott.add("anakin.business.domain.szervezet.Zalogfiok");
	elotoltott.add("anakin.business.domain.szervezet.SzervezetiEgyseg");
	elotoltott.add("anakin.business.domain.raktar.Raktar");
	elotoltott.add("anakin.business.domain.raktar.Tarolohely");
	elotoltott.add("anakin.business.domain.ugylet.ElallasiOk");
	elotoltott.add("anakin.business.domain.penztar.Cimlet");
	elotoltott.add("anakin.business.domain.szervezet.ZarasKonfiguracio");
	//elotoltott.add("anakin.business.domain.targy.Arfolyam");
	//elotoltott.add("anakin.business.domain.felhasznalo.Privilegium");
	
	//later use for flagging enum classes as we need to remame them in the migration schema
	var enumClasses = PSM!JClass.all.select(c | c.representsEnum).collect(c | c.fqName()).asSet();
	var enumTableNamesMap : Map<String, String> = new Map;
	var elotoltottTableNamesMap : Map<String, String> = new Map;
	
	//set this true if all association must be traversed not only mandatory ones
	var allAssociations : Boolean = true;
	//the class from where we want to start the transitive colsure on mandatory and above defiend additional roles	
	var startClassName = "anakin.business.domain.ugylet.elzalogositas.ElzalogositasSzerzodes";
	var startClass = PSM!JClass.all.selectOne(c | c.fqName() = startClassName);
	var classUUIDs : Set<String> = new Set;
	classUUIDs.add(startClass.uuid);
	startClass.allRoles(classUUIDs);
	classUUIDs = classUUIDs.collect(a | a + "_View").asSet();
	//classUUIDs.removeAll(excludedClasses);
	var viewNames : Set<String> = RDBMS!RdbmsView.all.select(v | classUUIDs.contains(v.uuid)).name.asSet();
	//remove excluded classes
	viewNames.removeAll(excludedClasses);
	
	var fieldReservedSqlNames : Set<String> = new Set;
	fieldReservedSqlNames.add("language");
	fieldReservedSqlNames.add("group");
	fieldReservedSqlNames.add("type");
	fieldReservedSqlNames.add("key");
	fieldReservedSqlNames.add("index");
	fieldReservedSqlNames.add("table");
	fieldReservedSqlNames.add("user");
	fieldReservedSqlNames.add("source");
}

operation PSM!JClass allRoles(acc : Set<String>) {
	for (r in PSM!JRole.all.select(r | r.ownerClass = self or r.ownerClass = self.supertype)) { //TODO: supertype collctor must be recursive
		if ((r.lower > 0 or allAssociations) or additionalRoles.contains(r.uuid)) {
			var opp = r.opposite().ownerClass;
			if (not acc.contains(opp.uuid)) {
					acc.add(opp.uuid);
					opp.allRoles(acc);
			}
		}
	}
}

@abstract
rule Element 
	transform s : RDBMS!RdbmsElement
	to 		  t : MIG!RdbmsElement {
	guard: not s.name.contains("@") //TODO: find out why multichained derived expressions maps to valueField
		t.name = s.name;
		t.uuid = s.uuid;
		t.fullName = s.fullName;
		t.description = s.description;
		t.shortName = s.sqlName; // I am using the shortName for storing the original sqlName for later use
		t.sqlName = s.name.cutFqNameToLastElement();
		t.originalName = s.originalName;
	    t.originalPackage = s.originalPackage;
	    if (fieldReservedSqlNames.contains(t.sqlName.toLowerCase())) {
	    	t.sqlName = "_" + t.sqlName;
		}
}

@abstract
rule ViewField 
	transform s : RDBMS!RdbmsViewTableField
	to 		  t : MIG!RdbmsField
	extends Element {
		t.rdbmsTypeName = s.tableField.rdbmsTypeName;
		t.size = s.tableField.size;
		t.precision = s.tableField.precision;
		t.scale = s.tableField.scale;
		t.storageByte = s.tableField.storageByte;
		t.mandatory = s.tableField.mandatory;
}

rule Model 
	transform s : RDBMS!RdbmsModel
	to 		  t : MIG!RdbmsModel {
		t.version = s.version;
		for (v in s.rdbmsViews) {
			if (viewNames.contains(v.name)) {
				var equiv = v.equivalent();
				if (equiv.isDefined()) {
					t.rdbmsTables.add(equiv);
				}
			} 
		}
	}
	
@lazy
rule View 
	transform s : RDBMS!RdbmsView
	to 		  t : MIG!RdbmsTable
	extends Element {
		guard: not s.isAbstract()
		var pk = s.primaryIdentifierField;
	    t.primaryKey = pk.equivalent();
	    t.fields.add(t.primaryKey);
		for (f in s.fields) {
	    	if (not f.isTypeOf(RDBMS!RdbmsViewExpressionField) 
	    		and not f.equals(pk) 
	    		and not f.uuid.isExcludedField(s.name)
	    		and not t.fields.exists(x | x.name.cutFqNameToLastElement() = f.name.cutFqNameToLastElement())) {
	    		var fe = f.equivalent();
	    		if (fe.isDefined()) {
	    			t.fields.add(fe);
	    		}
	    	}
		}
		if (elotoltott.contains(t.name)) {
			//prefix elotoltott tables
			t.sqlName = "ET_" + t.sqlName;
			//helper map for making easier the dump manipulation see the grep sed command at the end 
			elotoltottTableNamesMap.put(t.originalTableName(), t.sqlName);
			t.sqlName;
		} else if (enumClasses.contains(t.name)) {
			//prefix enum tables
			t.sqlName = "ENUM_" + t.sqlName;
			//helper map for making easier the dump manipulation see the grep sed command at the end
			enumTableNamesMap.put(t.originalTableName(), t.sqlName);
		}
}

operation RDBMS!RdbmsView isAbstract() {
	var target = self.uuid.substring(0, self.uuid.indexOf("_View"));
	return PSM!JClass.all.selectOne(c | c.uuid = target).`abstract`.asBoolean();
}

@lazy
rule ViewIdField
	transform s : RDBMS!RdbmsViewIdentifierField
	to t : MIG!RdbmsIdentifierField 
	extends ViewField {
	guard : not RDBMS!RdbmsForeignKey.all.exists(f | f.name = s.name)
}

@lazy
rule ViewValueField
	transform s : RDBMS!RdbmsViewValueField
	to t : MIG!RdbmsValueField 
	extends ViewField {
	guard: not s.tableField.technical 
		   and (not enumClasses.contains(s.tableField.table.name) or s.name.cutFqNameToLastElement() = "code") //hack i only need the code for enums 
}

@lazy
rule Fk
	transform s : RDBMS!RdbmsForeignKey
	to fk : MIG!RdbmsForeignKey 
	extends Element {
		guard : not s.inheritenceBased
		var typeName = s.rdbmsTypeName;
		if (not typeName.isDefined()) {
			typeName = s.type.rdbmsTypeName;
		}		
		fk.rdbmsTypeName = typeName;
		fk.size = s.size;
		fk.precision = s.precision;
		fk.scale = s.scale;
		fk.storageByte = s.storageByte;
		fk.mandatory = s.mandatory;
		
	    fk.referenceKey = MIG!RdbmsIdentifierField.all.selectOne(f | f.name = s.referenceKey.name);
	    
	    fk.foreignKeySqlName = s.foreignKeySqlName;
	    var byUuid = MIG!RdbmsTable.all.selectOne(t | t.uuid = s.table.uuid);
	    if (byUuid.isDefined()) {
	    	fk.table =  byUuid;	
	    } else {
	    	fk.table =  MIG!RdbmsTable.all.selectOne(t | t.name = s.table.name);
	    }		

		fk.mandatory = s.mandatory;
		
		fk.deleteOnCascade = s.deleteOnCascade;
		fk.readOnly = s.readOnly;
}

@lazy
rule Junction
	transform s : RDBMS!RdbmsJunctionTable
	to j : MIG!RdbmsJunctionTable 
	extends Element {
		for (i in s.fields.select(f | f.isTypeOf(RDBMS!RdbmsIdentifierField))) {
			var p : RDBMS!RdbmsIdentifierField = new RDBMS!RdbmsIdentifierField;
			p.name = i.name;
			p.sqlName = i.sqlName;
			p.rdbmsTypeName = i.rdbmsTypeName;
			p.uuid =  i.uuid;
			p.rdbmsTypeName = i.rdbmsTypeName;
			p.size = i.size;
			p.precision = i.precision;
			p.scale = i.scale;
			p.storageByte = i.storageByte;
			p.mandatory = i.mandatory;
			p.shortName = i.sqlName;
			j.fields.add(p);
		}
		
		var n = s.name.split(" to ").collect(s | s.cutFqNameToLastElement());
		j.sqlName = n.first() + "_" + n.second() + "_" + s.field1.name + "_" + s.field2.name;

		j.field1 = s.field1.equivalent();
		j.field2 = s.field2.equivalent();
}

operation String cutFqNameToLastElement() : String {
	var start = self.lastindexOf(".");
	return self.substring(start + 1, self.length());
}

operation String isExcludedField(viewName : String) : Boolean {
	var e = ecxludedFields.collect(e | "Anakin." + e + "_ViewField@Anakin." + viewName + "_View");
	return e.contains(self) ;
}

operation MIG!RdbmsTable originalTableName() : String {
	return "t_"  + self.shortName.substring(2).toLowerCase();
}

post {
	for (fk in RDBMS!RdbmsForeignKey.all) {
	    var refKey = MIG!RdbmsIdentifierField.all.selectOne(f | f.name = fk.referenceKey.name);
	    var fkName = "Anakin." + fk.name;
	    var isMandatory = PSM!JRole.all.selectOne(r | r.uuid = fkName and r.lower > 0).isDefined();
	    var table = MIG!RdbmsTable.all.selectOne(t | t.name = fk.table.name);
	    if (refKey.isDefined() 
	    	and table.isDefined() 
	    	and ((isMandatory or allAssociations) or additionalRoles.contains(fkName)) 
	    	and not ecxludedFields.contains(fk.name)) {
			fk.equivalent();
	    }
	}
	for (j in RDBMS!RdbmsJunctionTable.all) {
		var table1 = MIG!RdbmsTable.all.selectOne(t | t.name = j.field1.referenceKey.table.name);
		var table2 = MIG!RdbmsTable.all.selectOne(t | t.name = j.field2.referenceKey.table.name);
		var refKey1 = MIG!RdbmsIdentifierField.all.selectOne(f | f.name = j.field1.referenceKey.name);
		var refKey2 = MIG!RdbmsIdentifierField.all.selectOne(f | f.name = j.field1.referenceKey.name);
		if (table1.isDefined() and table2.isDefined() and refKey1.isDefined() and refKey2.isDefined()) {
			MIG!RdbmsModel.all.first().rdbmsTables.add(j.equivalent()); 
		}
	}
	"END".println();
	
}