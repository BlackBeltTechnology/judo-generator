import "mergeTransformations.etl";

import "../util.eol";

rule MergeTables
	merge newTable : NEW!RdbmsTable
	with oldTable : PREVIOUS!RdbmsTable
	into target : TARGET!RdbmsTableOperation {
	guard : not oldTable.fields.collect(field | field.uuid).includesAll(newTable.fields.collect(field | field.uuid)) 
				or not newTable.fields.collect(field | field.uuid).includesAll(oldTable.fields.collect(field | field.uuid))
			newTable.sqlName.println("Tábla: ");
			newTable.uuid.println("Tábla: ");
			target.uuid = uuid3(newTable.uuid, "MODIFY");
			target.sqlName = newTable.sqlName + "_OPERATION_MODIFY";
			target.name = newTable.name + "_OPERATION_MODIFY";
			
			target.operationType = TARGET!RdbmsTableOperationType#MODIFY;
			target.table = newTable.equivalent("NewTableToTargetTable");
			
			var newFieldUuids = newTable.fields.collect(newField | newField.uuid);
			var deletedFields : OrderedSet(TARGET!RdbmsField) = oldTable.fields.select(field | newFieldUuids.excludes(field.uuid));
			for (field in deletedFields) {
				var fieldOperation = new TARGET!RdbmsDeleteFieldOperation();
				fieldOperation.uuid = uuid3(field.uuid, "_RdbmsDeleteFieldOperation");
				fieldOperation.name = field.name + "_RdbmsDeleteFieldOperation";
				fieldOperation.field = field.equivalent();
				target.deleteFieldOperations.add(fieldOperation);
			}
			
			var oldFieldUuids = oldTable.fields.collect(oldField | oldField.uuid);
			var createdFields : OrderedSet(TARGET!RdbmsField) = newTable.fields.select(field | oldFieldUuids.excludes(field.uuid));
			for (field in createdFields) {
				var fieldOperation = new TARGET!RdbmsCreateFieldOperation();
				fieldOperation.uuid = uuid3(field.uuid, "_RdbmsCreateFieldOperation");
				fieldOperation.name = field.name + "_RdbmsCreateFieldOperation";
				fieldOperation.field = field.equivalent();
				target.createFieldOperations.add(fieldOperation);
			}
			
			var createdFieldUuids = createdFields.collect(field | field.uuid);
			var remainingFields : OrderedSet(TARGET!RdbmsField) = newTable.fields.select(field | createdFieldUuids.excludes(field.uuid));
			for (field in remainingFields) {
				var oldField = oldTable.fields.select(oldField | oldField.uuid = field.uuid).first();
				newTable.sqlName.println("Tábla: ");
				field.sqlName.println("Field: ");
				if (field.type.uuid <> oldField.type.uuid) {
					var fieldOperation = new TARGET!RdbmsModifyFieldOperation();
					fieldOperation.uuid = uuid3(field.uuid, "_RdbmsModifyFieldOperation");
					fieldOperation.name = field.name + "_RdbmsModifyFieldOperation";
					fieldOperation.field = field.equivalent();
					fieldOperation.typeChanged = true;
					target.modifyFieldOperations.add(fieldOperation);
				}
			}
		}
	