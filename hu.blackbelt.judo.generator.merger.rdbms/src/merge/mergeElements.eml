import "../util.eol";
import "mergeOperations.eol";

pre {
	var targetModel : TARGET!RdbmsModel = NEW!RdbmsModel.all.first().transformModel();
	transformFieldTypes();
}

rule MergeTables
	merge newTable : NEW!RdbmsTable
	with oldTable : PREVIOUS!RdbmsTable
	into target : TARGET!RdbmsTableOperation {
	guard : not oldTable.fields.collect(field | field.uuid).includesAll(newTable.fields.collect(field | field.uuid)) 
				or not newTable.fields.collect(field | field.uuid).includesAll(oldTable.fields.collect(field | field.uuid))
			target.uuid = newTable.uuid + "_MODIFY";
			target.sqlName = newTable.sqlName + "_OPERATION_MODIFY";
			target.name = newTable.name + "_OPERATION_MODIFY";
			
			target.operationType = TARGET!RdbmsTableOperationType#MODIFY;
			target.table = newTable.transformTable();
			
			var newFieldUuids = newTable.fields.collect(newField | newField.uuid);
			var deletedFields : OrderedSet(TARGET!RdbmsField) = oldTable.fields.select(field | newFieldUuids.excludes(field.uuid));
			for (field in deletedFields) {
				var fieldOperation = new TARGET!RdbmsDeleteFieldOperation();
				fieldOperation.uuid = field.uuid +"_RdbmsDeleteFieldOperation";
				fieldOperation.name = field.name + "_RdbmsDeleteFieldOperation";
				fieldOperation.field = field.transformField();
				target.table.fields.add(fieldOperation.field);
				target.deleteFieldOperations.add(fieldOperation);
			}
			
			var oldFieldUuids = oldTable.fields.collect(oldField | oldField.uuid);
			var createdFields : OrderedSet(TARGET!RdbmsField) = newTable.fields.select(field | oldFieldUuids.excludes(field.uuid));
			for (field in createdFields) {
				var fieldOperation = new TARGET!RdbmsCreateFieldOperation();
				fieldOperation.uuid = field.uuid + "_RdbmsCreateFieldOperation";
				fieldOperation.name = field.name + "_RdbmsCreateFieldOperation";
				fieldOperation.field = target.table.fields.select(f | f.uuid = field.uuid).first();
				target.createFieldOperations.add(fieldOperation);
			}
			
			var createdFieldUuids = createdFields.collect(field | field.uuid);
			var remainingFields : OrderedSet(TARGET!RdbmsField) = newTable.fields.select(field | createdFieldUuids.excludes(field.uuid));
			for (field in remainingFields) {
				var oldField = oldTable.fields.select(oldField | oldField.uuid = field.uuid).first();
				if (field.type.uuid <> oldField.type.uuid or field.mandatory <> oldField.mandatory) {
					var fieldOperation = new TARGET!RdbmsModifyFieldOperation();
					fieldOperation.uuid = field.uuid + "_RdbmsModifyFieldOperation";
					fieldOperation.name = field.name + "_RdbmsModifyFieldOperation";
					fieldOperation.field = target.table.fields.select(f | f.uuid = field.uuid).first();
					
					if (field.type.uuid <> oldField.type.uuid) {
						fieldOperation.typeChanged = true;
					}
					if (field.mandatory <> oldField.mandatory) {
						fieldOperation.mandatoryChanged = true;
					}
						
					target.modifyFieldOperations.add(fieldOperation);
				}
			}
		}
		
post {

	var prevUuids = PREVIOUS!RdbmsTable.all.collect(table | table.uuid);
	var newUuids = NEW!RdbmsTable.all.collect(table | table.uuid);

	var deletedTables : Sequence(PREVIOUS!RdbmsTable)= PREVIOUS!RdbmsTable.all.select(table | newUuids.excludes(table.uuid));
	for (table in deletedTables) {
		table.createDeleteTableOperation();
	}
	
	var createdTables : Sequence(NEW!RdbmsTable)= NEW!RdbmsTable.all.select(table | prevUuids.excludes(table.uuid));
	for (table in createdTables) {
		table.createCreateTableOperation();
	}
	
	targetModel.rdbmsTables.addAll(TARGET!RdbmsTable.all);
	targetModel.rdbmsFieldTypes.addAll(TARGET!RdbmsFieldType.all);
	targetModel.tableOperations.addAll(TARGET!RdbmsTableOperation.all);
}
	