import "../../operations/_importAll.eol";

@primary
rule SabreClassDocument
	transform s : Class
	to        t : SABRE!document {
	guard: s.isDocument()

	s.name.println("PRIMARY RULE :: SabreClassDocument: ");
	sabreModel.document.add(t);
	t.name = s.name.decapitalize();

    s.primitiveProperties().collect(p | p.name).println("    Primitives: ");
	t.primitive.addAll(s.primitiveProperties().collect(p | p.equivalent("SabrePropertyPrimitive")));	

    s.classProperties().collect(p | p.name).println("    Classes: ");
	t.structure.addAll(s.classProperties().collect(p | p.association.compositedClass().equivalent("SabreClassStructure")));	

    s.classListProperties().collect(p | p.name).println("    List of Classes: ");
	t.list.addAll(s.classListProperties().collect(p | p.equivalent("SabrePropertyList")));	
}

@lazy
rule SabreClassStructure
	transform s : Class
	to        t : SABRE!structure {
	
	s.name.println("LAZY RULE :: SabreClassStructure: ");
	t.name = s.name.decapitalize();

    s.primitiveProperties().collect(p | p.name).println("    Primitives: ");
	t.primitive.addAll(s.primitiveProperties().collect(p | p.equivalent("SabrePropertyPrimitive")));	

    s.classProperties().collect(p | p.name).println("    Classes: ");
	t.structure.addAll(s.classProperties().collect(p | p.association.compositedClass().equivalent("SabreClassStructure")));	

    s.classListProperties().collect(p | p.name).println("    List of Classes: ");
	t.list.addAll(s.classListProperties().collect(p | p.equivalent("SabrePropertyList")));	
}
