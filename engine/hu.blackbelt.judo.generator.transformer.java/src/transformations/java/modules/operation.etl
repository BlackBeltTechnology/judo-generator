import "../../../operations/_importAll.eol";
import "element.etl";
import "type.etl";

@abstract
rule JOperation 
	transform s : PSM!JOperation
	to t : JAVA!JvmMethod
	extends JElement {
		
}

@primary
rule OriginOperation 
	transform s : PSM!JOperation
	to t : JAVA!JvmMethod
	extends JOperation {
		t.fillFrom(s, "OriginClass", "OriginClass");
}

rule BoOperation 
	transform s : PSM!JOperation
	to t : JAVA!JvmMethod
	extends JOperation {
		t.fillFrom(s, "BoClass", "BoClass");
}

rule BoServiceOperation 
	transform s : PSM!JOperation
	to t : JAVA!JvmMethod
	extends JOperation {
		t.fillFrom(s, "BoService", "BoClass");
}

rule BoServiceAbstractOperation 
	transform s : PSM!JOperation
	to t : JAVA!JvmMethod
	extends JOperation {
		t.fillFrom(s, "BoServiceAbstract", "BoClass");
}

rule BoServiceWrapperOperation 
	transform s : PSM!JOperation
	to t : JAVA!JvmMethod
	extends JOperation {
		t.fillFrom(s, "BoServiceWrapper", "BoClass");
}

operation JAVA!JvmMethod fillFrom (source : PSM!JOperation, ownerClassRuleName : String, returnTypeRuleName : String) : Any {
	self.uuid = uuid3(source.uuid, ownerClassRuleName);
	self.ownerClass = source.ownerClass.equivalent(ownerClassRuleName);
	self.origin ::= source;
	self.kind = source.kind.toJava();
	self.classBased = source.classBased;
	var out = source.parameters.select(p | not p.input).first();
	if (out.isDefined() and out.type.isDefined()) {
		self.type = out.type.transformType(returnTypeRuleName, out.upper = -1);
	} else {
		self.type = voidType();
	}
}