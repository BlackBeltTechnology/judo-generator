<?xml version="1.0" encoding="UTF-8"?>
<project default="main">

	<property name="target.dir.name" value="target-ant" />
	<property name="root.dir" location="." />
	<property name="_src.dir" location="${root.dir}/src" />
	<property name="target.dir" location="${target.dir.name}" />

	<property name="transformed.dir" location="${target.dir}/resources" />

	<property name="model.file.extension" value="model" />
	<property name="model.src.dir" location="${_src.dir}/model" />

	<property name="psm.model.file.name" value="test_opm" />
	<property name="psm.hutn.location" location="${model.src.dir}/${psm.model.file.name}.hutn" />


	<property name="third.party.project.dir" location="../hu.blackbelt.judo.third.party" />
	
	<property name="psm.model.location" location="${transformed.dir}/${psm.model.file.name}.${model.file.extension}" />
	<property name="psm.model.name" value="PSM" />

	<property name="psm.meta.project.dir" location="../hu.blackbelt.judo.meta.psm" />
	<property name="psm.meta.location" location="${psm.meta.project.dir}/model/psm.ecore" />
	<property name="psm.meta.uri" value="http://blackbelt.hu/judo/meta/psm" />
	<property name="psm.library.dir" location="${psm.meta.project.dir}/library" />
	<property name="psmtypes.model.location" location="${psm.library.dir}/psmTypes.model" />


	
	<property name="hutn.parser.project.dir" location="../../hu.blackbelt.judo.workaround.ant.hutn.parser" />
	
	<property name="main.class.name" value="hu.blackbelt.judo.workaround.ant.hutn.parser.Main" />
	

	<path id="ant.taskdef.classpath">
		<fileset dir="${third.party.project.dir}/lib/ant" includes="**/*.jar" />
	</path>

	<taskdef resource="net/sf/antcontrib/antlib.xml" classpathref="ant.taskdef.classpath" />
	<taskdef resource="org/eclipse/epsilon/workflow/tasks/tasks.xml" classpathref="ant.taskdef.classpath" loaderref="epsilon.loader" />
	<taskdef resource="org/eclipse/epsilon/workflow/tasks/emf/tasks.xml"  loaderref="epsilon.loader" />

	<target name="prepare">
		<mkdir dir="${target.dir}" />
		<mkdir dir="${transformed.dir}" />
		<delete file="${psm.model.location}" failonerror="false" />
		<touch file="${psm.model.location}" />
		<path id="hutn.parse.classpath">
			<path refid="ant.taskdef.classpath" />
			<pathelement location="${hutn.parser.project.dir}/${target.dir.name}/hutnTomodelParser.jar" />
		</path>
	</target>

	<target name="prepareForMaven">
		<mkdir dir="${transformed.dir}" />
		<delete file="${psm.model.location}" failonerror="false" />
		<touch file="${psm.model.location}" />
		<path id="hutn.parse.classpath">
			<path refid="ant.taskdef.classpath" />
			<path path="${maven_compile_classpath}" />
		</path>
	</target>

	<target name="parseHutn" unless="">
		<copy file="${psm.hutn.location}" tofile="${transformed.dir}/${psm.model.file.name}_psmtypestokenreplaced.hutn" />
		<pathconvert targetos="unix" property="psm.meta.project.dir.fixed">
			<path location="${psm.meta.project.dir}"/>
		</pathconvert>
		<replace token="@@@PSM_TYPES_TOKEN@@@" value="${psm.meta.project.dir.fixed}" file="${transformed.dir}/${psm.model.file.name}_psmtypestokenreplaced.hutn" />
		<java fork="true" classname="${main.class.name}" failonerror="true">
			<classpath>
				<path refid="hutn.parse.classpath" />
			</classpath>
			<arg value="${transformed.dir}/${psm.model.file.name}_psmtypestokenreplaced.hutn" />
			<arg value="${transformed.dir}" />
			<arg value="${psm.model.file.name}.${model.file.extension}" />
			<arg value="${psm.meta.uri}" />
			<arg value="${psm.meta.location}" />
			<arg value="${psmtypes.model.location}" />
		</java>
	</target>

	<target name="mainFromMaven" depends="prepareForMaven, parseHutn" />
	<target name="mainFromCommandLine" depends="prepare, parseHutn" />
	<target name="main" depends="prepare, parseHutn" />

</project>