@cached
operation RUNTIME!EReference referenceIdentifierSqlName() : String {
    return "C_" +  self.sqlName() + "_ID";
}

@cached
operation RUNTIME!EReference referenceInverseIdentifierSqlName() : String {
    return "C_" +  self.eContainingClass.classSqlName() + "_" + self.sqlName() + "_ID";
}

@cached
operation RUNTIME!EReference referenceFkSqlName() : String {
	// return "FK_" + md5(self.fqName()).replaceAll("-","").substring(0,27);
	return "FK_" + self.eContainingClass.classSqlName() + "_" + self.sqlName();
}

@cached
operation RUNTIME!EReference referenceInvFkSqlName() : String {
	// return "FK_" + md5(self.fqName()).replaceAll("-","").substring(0,27);
	return "FK_INV_" + self.eContainingClass.classSqlName() + "_" + self.sqlName();
}


@cached
operation RUNTIME!EReference referenceManyToManyTableSqlName() : String {
	// return "FK_" + md5(self.fqName()).replaceAll("-","").substring(0,27);
	// return "FK_INV_" + self.eReferenceType.classSqlName() + "_" + self.eContainingClass.classSqlName();
	var f1 = self;
	var f2 = self.eOpposite;
	/*if (f1.name > f2.name) {
		f1 = f2;
		f2 = self;
	} */
	return "T_" + abbreviate(f1.eReferenceType.classSqlName() + "_" + f2.sqlName() + "_" + f2.eReferenceType.classSqlName() + "_" + f1.sqlName(), 28).toUpperCase();
}

@cached
operation RUNTIME!EReference isFirst() : Boolean {
	var ref1 : RUNTIME!EReference = self;
	var ref2 : RUNTIME!EReference = self.eOpposite;

	if (ref2.isUndefined()) {
		return true;
	}

   if (ref1.name.compareTo(ref2.name) < 0) {
		return true;
   }
   return false;
}

