<?xml version="1.0" encoding="UTF-8"?>
<xmi:XMI xmi:version="20131001" xmlns:xmi="http://www.omg.org/spec/XMI/20131001" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:MagicDrawProfile="http://www.omg.org/spec/UML/20131001/MagicDrawProfile" xmlns:ValidationProfile="http://UML_Standard_Profile/Validation_Profile/_11_5_f720368_1159529670215_231387_1" xmlns:ecore="http://www.eclipse.org/emf/2002/Ecore" xmlns:uml="http://www.eclipse.org/uml2/5.0.0/UML" xsi:schemaLocation="http://www.omg.org/spec/UML/20131001/MagicDrawProfile UML_Standard_Profile.MagicDraw_Profile.profile.uml#_PH8A0p7dEeypSrJXJSy5zw http://UML_Standard_Profile/Validation_Profile/_11_5_f720368_1159529670215_231387_1 UML_Standard_Profile.Validation_Profile.profile.uml#_PH8KY57dEeypSrJXJSy5zw">
  <uml:Profile xmi:id="30476223-79aa-4010-9f95-48da72574461" name="PIM Validation Profile" visibility="public" URI="" metamodelReference="846882e6-dcaa-4bd7-8291-02039864f345">
    <eAnnotations xmi:id="_PINQBp7dEeypSrJXJSy5zw" source="http://www.eclipse.org/uml2/2.0.0/UML">
      <contents xmi:type="ecore:EPackage" xmi:id="_PINQB57dEeypSrJXJSy5zw" name="PIMValidationProfile" nsURI="http:///schemas/PIMValidationProfile/_O7GeoJ7dEeypSrJXJSy5zw/0" nsPrefix="PIMValidationProfile">
        <eAnnotations xmi:id="_PINQCJ7dEeypSrJXJSy5zw" source="http://www.eclipse.org/uml2/2.0.0/UML">
          <details xmi:id="_PINQCZ7dEeypSrJXJSy5zw" key="originalName" value="PIM Validation Profile"/>
        </eAnnotations>
        <eSubpackages xmi:id="_PINQCp7dEeypSrJXJSy5zw" name="PIMValidations" nsURI="http:///PIMValidationProfile/PIMValidations.ecore" nsPrefix="PIMValidationProfile.PIMValidations">
          <eAnnotations xmi:id="_PINQC57dEeypSrJXJSy5zw" source="http://www.eclipse.org/uml2/2.0.0/UML">
            <details xmi:id="_PINQDJ7dEeypSrJXJSy5zw" key="originalName" value="PIM Validations"/>
          </eAnnotations>
          <eAnnotations xmi:id="_PINQDZ7dEeypSrJXJSy5zw" source="http://www.eclipse.org/uml2/4.0.0/UML" references="4400ef4e-b3ea-47b1-be03-35568a9f37f9"/>
          <eSubpackages xmi:id="_PINQDp7dEeypSrJXJSy5zw" name="TESTINGSuite" nsURI="http:///PIMValidationProfile/PIMValidations/TESTINGSuite.ecore" nsPrefix="PIMValidationProfile.PIMValidations.TESTINGSuite">
            <eAnnotations xmi:id="_PINQD57dEeypSrJXJSy5zw" source="http://www.eclipse.org/uml2/2.0.0/UML">
              <details xmi:id="_PINQEJ7dEeypSrJXJSy5zw" key="originalName" value="TESTING Suite"/>
            </eAnnotations>
            <eAnnotations xmi:id="_PINQEZ7dEeypSrJXJSy5zw" source="http://www.eclipse.org/uml2/4.0.0/UML" references="97a8cb3c-9081-4c2f-9ca3-6d44984de03c"/>
            <eAnnotations xmi:id="_PINQEp7dEeypSrJXJSy5zw" source="http://www.eclipse.org/emf/2002/GenModel">
              <details xmi:id="_PINQE57dEeypSrJXJSy5zw" key="documentation" value="self.visibility &lt;> VisibilityKind::private"/>
            </eAnnotations>
            <eSubpackages xmi:id="_PINQFJ7dEeypSrJXJSy5zw" name="testPackage" nsURI="http:///PIMValidationProfile/PIMValidations/TESTINGSuite/testPackage.ecore" nsPrefix="PIMValidationProfile.PIMValidations.TESTINGSuite.testPackage">
              <eAnnotations xmi:id="_PINQFZ7dEeypSrJXJSy5zw" source="http://www.eclipse.org/uml2/4.0.0/UML" references="2674016d-994a-4622-8d62-ead0c3718fc1"/>
              <eAnnotations xmi:id="_PINQFp7dEeypSrJXJSy5zw" source="http://www.eclipse.org/emf/2002/GenModel">
                <details xmi:id="_PINQF57dEeypSrJXJSy5zw" key="documentation" value="THIS.name              &#xD;&#xA;bo.allInstances()->collect(e | e.oclAsType(Package))->union(Model.allInstances()->asSet())&#xD;&#xA;self.owner.oclAsType(Class).general"/>
              </eAnnotations>
            </eSubpackages>
          </eSubpackages>
          <eSubpackages xmi:id="_PINQGJ7dEeypSrJXJSy5zw" name="RoleValidation" nsURI="http:///PIMValidationProfile/PIMValidations/RoleValidation.ecore" nsPrefix="PIMValidationProfile.PIMValidations.RoleValidation">
            <eAnnotations xmi:id="_PINQGZ7dEeypSrJXJSy5zw" source="http://www.eclipse.org/uml2/2.0.0/UML">
              <details xmi:id="_PINQGp7dEeypSrJXJSy5zw" key="originalName" value="Role Validation"/>
            </eAnnotations>
            <eAnnotations xmi:id="_PINQG57dEeypSrJXJSy5zw" source="http://www.eclipse.org/uml2/4.0.0/UML" references="9d4029e4-1f85-49d4-a0bd-b0420fd25b3f"/>
            <eAnnotations xmi:id="_PINQHJ7dEeypSrJXJSy5zw" source="http://www.eclipse.org/emf/2002/GenModel">
              <details xmi:id="_PINQHZ7dEeypSrJXJSy5zw" key="documentation" value="self.oclAsType(Association).memberEnd->forAll(r | r.name.size() > 0)&#xD;&#xA;let mandatoryEnds : Set(Property) = self.memberEnd->select(p | p.lower > 0 and not p.isDerived)->asSet() in&#xA;    self.ownedEnd->excludesAll(mandatoryEnds)    &#xA;&#xD;&#xA;self.memberEnd->forAll(p | p.lower = 0 or&#xA;                           (p.lower &lt;> 0 and p.upper = 1))    &#xA;&#xD;&#xA;self.memberEnd->select(p | p.lower &lt;> 0)->size() &lt; 2&#xD;&#xA;not (self.aggregation = AggregationKind::composite) or &#xA;    (self.aggregation = AggregationKind::composite and &#xA;     self.association.memberEnd&#xA;         ->forAll(e | self.association.memberEnd&#xA;                          ->select(oe | oe &lt;> e)&#xA;                          ->forAll( oe | e.aggregation &lt;> AggregationKind::composite or&#xA;                                        (e.aggregation = AggregationKind::composite and&#xA;                                         oe.lower &lt;> 0 and &#xA;                                         oe.upper = 1))))                &#xA;&#xD;&#xA;self.memberEnd&#xA;    ->forAll(e | self.memberEnd&#xA;                     ->select(oe | oe &lt;> e)&#xA;                     ->forAll( oe | e.aggregation &lt;> AggregationKind::shared or&#xA;                                   (e.aggregation = AggregationKind::shared and&#xA;                                    e.lower = 0 and &#xA;                                    oe.upper = 1)))&#xA;&#xA;&#xD;&#xA;self.specification.oclAsType(LiteralString).value->forAll(l | l.matches('[^ \\t\\n\\f\\r\\x0B]+'))&#xA;--self.specification.oclAsType(OpaqueExpression)._'body'->forAll(l | l.size() > 0)&#xA;&#xD;&#xA;self.specification.oclAsType(OpaqueExpression)._'body'->exists(l | l.matches('[^\\t\\n\\f\\r\\x0B]+'))&#xA;&#xD;&#xA;not  self.oclIsTypeOf(JudoProfile::derived) or&#xA;    (self.oclIsTypeOf(JudoProfile::derived) and&#xA;     self.association.oclIsUndefined()) or&#xA;    (self.oclIsTypeOf(JudoProfile::derived) and&#xA;     self.association.ownedEnd->includesAll( self.association.memberEnd->select(e | e &lt;> self)))        &#xD;&#xA;not  self.oclIsTypeOf(JudoProfile::derived) or&#xA;    (self.oclIsTypeOf(JudoProfile::derived) and&#xA;     self.association.oclIsUndefined()) or&#xA;    (self.oclIsTypeOf(JudoProfile::derived) and&#xA; not self.association.oclIsUndefined() and self.visibility = VisibilityKind::protected) &#xD;&#xA;if (self.featuringClassifier.oclIsTypeOf(Class)  and&#xA;   self.association &lt;> null ) then &#xA;let theOwner : PackageableElement = self.featuringClassifier&#xA;                                        .oclAsType(PackageableElement) in&#xA;  let allOwners : Collection(PackageableElement) = theOwner->closure(owningPackage)&#xA;                                                           ->collect(oclAsType(PackageableElement))&#xA;                                                           ->including(theOwner) in&#xA;    let isGeneratorSource : Boolean = allOwners->selectByType(JudoProfile::bo)->notEmpty() or&#xA;                                      allOwners->selectByType(JudoProfile::dto)->notEmpty() or&#xA;                                      allOwners->selectByType(JudoProfile::rest)->notEmpty() &#xA;                                      in&#xA;      let ancestors : Collection(Class) = theOwner.oclAsType(Class)&#xA;                                                  ->closure(general.oclAsType(Class)) in&#xA;        if isGeneratorSource then&#xA;          ancestors->collect(ownedAttribute.name)&#xA;                   ->forAll(n | not n.equalsIgnoreCase(self.name))        &#xA;        else&#xA;          true&#xA;        endif&#xA;else &#xA;  true&#xA;endif&#xA;&#xD;&#xA;if (self.featuringClassifier.oclIsTypeOf(Class) and&#xA;    self.association &lt;> null ) &#xA;    then &#xA;let theOwner : PackageableElement = self.featuringClassifier                            -- Owner (Class) of the Property (Attribute or Role)&#xA;                                        .oclAsType(PackageableElement) in&#xA;  if not theOwner.oclAsType(Class).general->isEmpty() then&#xA;  let allOwners : Collection(PackageableElement) = theOwner->closure(owningPackage)     -- Package hierarchy above the owner Class&#xA;                                                           ->collect(oclAsType(PackageableElement)) in&#xA;    let isGeneratorSource : Boolean = true --allOwners->selectByType(JudoProfile::bo)->notEmpty() or -- Rule is Applicable WITHIN a Package to be generated&#xA;                                      -- allOwners->selectByType(JudoProfile::dto)->notEmpty() or&#xA;                                      -- allOwners->selectByType(JudoProfile::rest)->notEmpty() &#xA;                                      in&#xA;      let ancestors : Collection(Class) = theOwner.oclAsType(Class)                     -- All Ancestor of the ownerClass&#xA;                                                  ->closure(general.oclAsType(Class)) in&#xA;        let shortnames : Collection(JudoProfile::shortname) = JudoProfile::shortname.allInstances() in&#xA;          let s : Sequence(JudoProfile::shortname) = JudoProfile::shortname.allInstances()   -- All shortName constraints on this Property &#xA;                                                                           ->select( sn | sn.constrainedElement->includes(self) )&#xA;                                                                           ->asSequence() in&#xA;          if isGeneratorSource then&#xA;              if (s->size() = 1 and                                                       -- check if we have exactly 1 shortname stereotype WITH &#xA;                  s.constrainedElement->size() = 1) then                                  -- exactly 1 specification&#xA;                let sName : String = s->first().specification.oclAsType(LiteralString).value in&#xA;                  -- version one - compare self_s shortname with Attribute &amp; Role NAMES - Python code validates according to this interpretation&#xA;                  let ancAttributes : Collection(Property) = ancestors.ownedAttribute&#xA;                                                                      ->reject(association &lt;> null) in  &#xA;                    ancAttributes->forAll(name.equalsIgnoreCase(sName))         -- This attribute's / Role's shortname is Valid if no any ancestor's &#xA;                                                                                -- attribute's / Role's name is equal to it         &#xA;&#xA;                  -- version two - compare self's shortname with Attribute &amp; Role SHORTNAMES - !!! Put select &amp; collect's result in a let expression &#xA;--                  ancestors.ownedAttribute      -- CHECK WHETHER select filters nulls out -> in this case the following select should come one line after&#xA;--                           ->select(a | shortnames->exists(constrainedElement->includes(a)))    -- select those Attributes &amp; Roles where Shortname is given&#xA;--                           ->collect(a | shortnames->select(constrainedElement->includes(a))    -- collect the corresponding shortnames&#xA;--                                                   ->first()&#xA;--                                                   .specification&#xA;--                                                   .oclAsType(LiteralString).value)&#xA;--                           ->forAll(n | not n.equalsIgnoreCase(sName))                    -- This property's shortname is Valid if no any ancestor's property's&#xA;                                                                                            -- shortname equals to it         &#xA;              else     &#xA;                false                                                                     -- more than 1 shortname on the Property OR &#xA;                                                                                          -- more than 1 specification belongs to the stereotype &#xA;              endif&#xA;          else&#xA;            true&#xA;          endif     &#xA;  else&#xA;      true&#xA;  endif&#xA;else &#xA;  true                                          -- this Property does not belong to a Class OR&#xA;                                                -- is an Association Role -> restriction does not apply - as current understanding&#xA;endif&#xA;&#xD;&#xA;function traverse(node, path) {&#xA;  if (path.length == 0) {&#xA;    return node&#xA;  } else {&#xA;    nextPathElementRole = getNamedElement(node.getOwnedAttribute(), path[0]);     &#xA;    &#xA;    if (nextPathElementRole != null) {&#xA;        nextPathElement = nextPathElementRole.getType(); &#xA;        if (nextPathElement) {&#xA;            restOfPath = path.slice();&#xA;            restOfPath.shift();&#xA;            return traverse(nextPathElement, restOfPath);&#xA;        } else {&#xA;            return null;&#xA;        }&#xA;    } &#xA;    &#xA;    return null;&#xA;  }&#xA;}&#xA;&#xA;function getNamedElement(list, name) {&#xA;    if (list.length == 0) {&#xA;        return null;&#xA;    } else {&#xA;        li = list.listIterator();&#xA;        while (li.hasNext()) {&#xA;            nItem = li.next();&#xA;            if (nItem.name === name) {&#xA;                return nItem;&#xA;            }&#xA;        }&#xA;        &#xA;        return null;&#xA;    }&#xA;}&#xA;&#xA;// Validation Rule&#xA;if (THIS.isDerived() &amp;&amp; THIS.association != null) {                           &#xA;  if (THIS.getDefaultValue()) {&#xA;    var expr = THIS.getDefaultValue().value&#xA;    var len = expr.length&#xA;    &#xA;    if (expr[0] == &quot;[&quot;) { &#xA;      var exprPath = expr.substring(1, len-1).split(&quot;.&quot;);&#xA;      traverse( THIS.owner, exprPath) ? true : false;&#xA;    } else true;  // Role is derived, Spec is given, but not in '{expr}' form, implies valid &#xA;  } else true;   // Role is derived, but has no Specification --> Python code (AEND_NAVIGATION_ERROR) permits such case as Valid&#xA;} else true; "/>
            </eAnnotations>
          </eSubpackages>
          <eSubpackages xmi:id="_PINQHp7dEeypSrJXJSy5zw" name="ConstraintValidation" nsURI="http:///PIMValidationProfile/PIMValidations/ConstraintValidation.ecore" nsPrefix="PIMValidationProfile.PIMValidations.ConstraintValidation">
            <eAnnotations xmi:id="_PINQH57dEeypSrJXJSy5zw" source="http://www.eclipse.org/uml2/2.0.0/UML">
              <details xmi:id="_PINQIJ7dEeypSrJXJSy5zw" key="originalName" value="Constraint Validation"/>
            </eAnnotations>
            <eAnnotations xmi:id="_PINQIZ7dEeypSrJXJSy5zw" source="http://www.eclipse.org/uml2/4.0.0/UML" references="e7ec005c-e802-471a-bcd8-a7eaa3727c3a"/>
            <eAnnotations xmi:id="_PINQIp7dEeypSrJXJSy5zw" source="http://www.eclipse.org/emf/2002/GenModel">
              <details xmi:id="_PINQI57dEeypSrJXJSy5zw" key="documentation" value="let judo_max_len : Integer = 6 in&#xA;self.specification.oclAsType(LiteralString).value->forAll(b | b.size() &lt;= judo_max_len)&#xA;&#xA;-- MD-ben modellezve:&#xA;-- self.specification.oclAsType(OpaqueExpression)._'body'->forAll(b | b.size() &lt;= judo_max_len)"/>
            </eAnnotations>
          </eSubpackages>
          <eSubpackages xmi:id="_PINQJJ7dEeypSrJXJSy5zw" name="AttributeValidation" nsURI="http:///PIMValidationProfile/PIMValidations/AttributeValidation.ecore" nsPrefix="PIMValidationProfile.PIMValidations.AttributeValidation">
            <eAnnotations xmi:id="_PINQJZ7dEeypSrJXJSy5zw" source="http://www.eclipse.org/uml2/2.0.0/UML">
              <details xmi:id="_PINQJp7dEeypSrJXJSy5zw" key="originalName" value="Attribute Validation"/>
            </eAnnotations>
            <eAnnotations xmi:id="_PINQJ57dEeypSrJXJSy5zw" source="http://www.eclipse.org/uml2/4.0.0/UML" references="879f58bb-beba-4f3b-bed9-6d3c7d82f941"/>
            <eAnnotations xmi:id="_PINQKJ7dEeypSrJXJSy5zw" source="http://www.eclipse.org/emf/2002/GenModel">
              <details xmi:id="_PINQKZ7dEeypSrJXJSy5zw" key="documentation" value="let theOwner : PackageableElement = self.featuringClassifier&#xA;                                        .oclAsType(PackageableElement) in&#xA;  let ancestors : Collection(PackageableElement) = theOwner->closure(owningPackage)&#xA;                                                           ->collect(oclAsType(PackageableElement))&#xA;                                                           ->including(theOwner) in&#xA;    let isGeneratorSource : Boolean = ancestors->selectByType(JudoProfile::bo)->notEmpty() or&#xA;                                      ancestors->selectByType(JudoProfile::dto)->notEmpty() or&#xA;                                      ancestors->selectByType(JudoProfile::rest)->notEmpty() in&#xA;      if isGeneratorSource then&#xA;        self.name.matches('^[A-Za-z][A-Za-z0-9_]*$')        &#xA;      else&#xA;        true&#xA;      endif&#xA;&#xA;-- self.name.matches('^[A-Za-z][A-Za-z0-9_]*$')&#xA;&#xA;&#xA;-- ha a &quot;tulaj&quot; (featuringClassifier) felmenői (ancestors) között van&#xA;--    (&lt;&lt;bo>> VAGY &lt;&lt;dto>> VAGY &lt;&lt;rest>>) &#xA;--    AKKOR ==> a névnek a minta szerintinek kell lennie&#xA;--    ELLENKEZŐ ESETBEN  nem  (==> true : valid a név)  &#xD;&#xA;not self.isDerived or&#xA;(self.isDerived and not self.oclIsTypeOf(JudoProfile::calculated)) &#xD;&#xA;let pimTypesModel : Model = Model.allInstances()->select(m | m.name = 'PIM Types')&#xA;                                                ->asSequence()&#xA;                                                ->first() in&#xA;    let judoPrimitiveTypes : Set(PrimitiveType) = PrimitiveType.allInstances()->select(pt | pt.owner = pimTypesModel) in&#xA;        let umlPrimitiveTypePkg : Package =  Package.allInstances()&#xA;                                                ->select( pkg | pkg.owner = Model.allInstances()&#xA;                                                                                ->select(m | m.name = 'UML2 Metamodel')&#xA;                                                                                ->asSequence()&#xA;                                                                                ->first())&#xA;                                                ->asSequence()&#xA;                                                ->first() in&#xA;            let umlPrimitiveType : Set(PrimitiveType) = PrimitiveType.allInstances()->select(pt | pt.owner = umlPrimitiveTypePkg) in&#xA;                                                      &#xA;-- Q: is this inv. should be checked on non-association member properties ONLY? --> Chosen: YES &#xA;                not self.association.oclIsUndefined() or                &#xA;                umlPrimitiveType->union(judoPrimitiveTypes)->includes(self.type)                            &#xA;&#xD;&#xA;self.constrainedElement->select(e | e.oclIsTypeOf(Property))->forAll(p | p.oclAsType(Property).lower &lt;> 1)&#xD;&#xA;if (self.featuringClassifier.oclIsTypeOf(Class) and&#xA;    self.association = null ) then &#xA;let theOwner : PackageableElement = self.featuringClassifier&#xA;                                        .oclAsType(PackageableElement) in&#xA;  let allOwners : Collection(PackageableElement) = theOwner->closure(owningPackage)&#xA;                                                           ->collect(oclAsType(PackageableElement))&#xA;                                                           ->including(theOwner) in&#xA;    let isGeneratorSource : Boolean = allOwners->selectByType(JudoProfile::bo)->notEmpty() or&#xA;                                       allOwners->selectByType(JudoProfile::dto)->notEmpty() or&#xA;                                       allOwners->selectByType(JudoProfile::rest)->notEmpty() &#xA;                                      in&#xA;      let ancestors : Collection(Class) = theOwner.oclAsType(Class)&#xA;                                                  ->closure(general.oclAsType(Class)) in&#xA;        if isGeneratorSource then&#xA;          ancestors->collect(ownedAttribute.name)&#xA;                   ->forAll(n | not n.equalsIgnoreCase(self.name))        &#xA;        else&#xA;          true&#xA;        endif&#xA;else &#xA;  true&#xA;endif&#xA;&#xA;-- ha a &quot;tulaj&quot; (featuringClassifier) felmenői (ancestors) között van&#xA;--    (&lt;&lt;bo>> VAGY &lt;&lt;dto>> VAGY &lt;&lt;rest>>) &#xA;--    AKKOR ==> a névnek a minta szerintinek kell lennie&#xA;--    ELLENKEZŐ ESETBEN  nem  (==> true : valid a név)&#xD;&#xA;if (self.featuringClassifier.oclIsTypeOf(Class) and&#xA;    self.association = null ) &#xA;    then &#xA;let theOwner : PackageableElement = self.featuringClassifier                            -- Owner (Class) of the Property (Attribute or Role)&#xA;                                        .oclAsType(PackageableElement) in&#xA;  if not theOwner.oclAsType(Class).general->isEmpty() then&#xA;  let allOwners : Collection(PackageableElement) = theOwner->closure(owningPackage)     -- Package hierarchy above the owner Class&#xA;                                                           ->collect(oclAsType(PackageableElement)) in&#xA;    let isGeneratorSource : Boolean = true --allOwners->selectByType(JudoProfile::bo)->notEmpty() or -- Rule is Applicable WITHIN a Package to be generated&#xA;                                      -- allOwners->selectByType(JudoProfile::dto)->notEmpty() or&#xA;                                      -- allOwners->selectByType(JudoProfile::rest)->notEmpty() &#xA;                                      in&#xA;      let ancestors : Collection(Class) = theOwner.oclAsType(Class)                     -- All Ancestor of the ownerClass&#xA;                                                  ->closure(general.oclAsType(Class)) in&#xA;        let shortnames : Collection(JudoProfile::shortname) = JudoProfile::shortname.allInstances() in&#xA;          let s : Sequence(JudoProfile::shortname) = JudoProfile::shortname.allInstances()   -- All shortName constraints on this Property &#xA;                                                                           ->select( sn | sn.constrainedElement->includes(self) )&#xA;                                                                           ->asSequence() in&#xA;          if isGeneratorSource then&#xA;              if (s->size() = 1 and                                                       -- check if we have exactly 1 shortname stereotype WITH &#xA;                  s.constrainedElement->size() = 1) then                                  -- exactly 1 specification&#xA;                let sName : String = s->first().specification.oclAsType(LiteralString).value in&#xA;                  -- version one - compare self_s shortname with Attribute &amp; Role NAMES - Python code validates according to this interpretation&#xA;                  let ancAttributes : Collection(Property) = ancestors.ownedAttribute&#xA;                                                                      ->reject(association &lt;> null) in  &#xA;                    ancAttributes->forAll(name.equalsIgnoreCase(sName))         -- This attribute's / Role's shortname is Valid if no any ancestor's &#xA;                                                                                -- attribute's / Role's name is equal to it         &#xA;&#xA;                  -- version two - compare self's shortname with Attribute &amp; Role SHORTNAMES - !!! Put select &amp; collect's result in a let expression &#xA;--                  ancestors.ownedAttribute      -- CHECK WHETHER select filters nulls out -> in this case the following select should come one line after&#xA;--                           ->select(a | shortnames->exists(constrainedElement->includes(a)))    -- select those Attributes &amp; Roles where Shortname is given&#xA;--                           ->collect(a | shortnames->select(constrainedElement->includes(a))    -- collect the corresponding shortnames&#xA;--                                                   ->first()&#xA;--                                                   .specification&#xA;--                                                   .oclAsType(LiteralString).value)&#xA;--                           ->forAll(n | not n.equalsIgnoreCase(sName))                    -- This property's shortname is Valid if no any ancestor's property's&#xA;                                                                                            -- shortname equals to it         &#xA;              else     &#xA;                false                                                                     -- more than 1 shortname on the Property OR &#xA;                                                                                          -- more than 1 specification belongs to the stereotype &#xA;              endif&#xA;          else&#xA;            true&#xA;          endif&#xA;   else &#xA;      true&#xA;   endif&#xA;else &#xA;  true                                          -- this Property does not belong to a Class OR&#xA;                                                -- is an Association Role -> restriction does not apply - as current understanding&#xA;endif&#xA;&#xD;&#xA;function traverse(node, path) {&#xA;  if (path.length == 0) {&#xA;    return node&#xA;  } else {&#xA;    nextPathElementRole = getNamedElement(node.getOwnedAttribute(), path[0]);     &#xA;    &#xA;    if (nextPathElementRole != null) {&#xA;        nextPathElement = nextPathElementRole.getType(); &#xA;        if (nextPathElement) {&#xA;            restOfPath = path.slice();&#xA;            restOfPath.shift();&#xA;            return traverse(nextPathElement, restOfPath);&#xA;        } else {&#xA;            return null;&#xA;        }&#xA;    } &#xA;    &#xA;    return null;&#xA;  }&#xA;}&#xA;&#xA;function getNamedElement(list, name) {&#xA;    if (list.length == 0) {&#xA;        return null;&#xA;    } else {&#xA;        li = list.listIterator();&#xA;        while (li.hasNext()) {&#xA;            nItem = li.next();&#xA;            if (nItem.name === name) {&#xA;                return nItem;&#xA;            }&#xA;        }&#xA;        &#xA;        return null;&#xA;    }&#xA;}&#xA;&#xA;// Validation Rule&#xA;if (THIS.isDerived() &amp;&amp; THIS.association === null) {                           &#xA;  if (THIS.getDefaultValue()) {&#xA;    var expr = THIS.getDefaultValue().value&#xA;    var len = expr.length&#xA;    &#xA;    if (expr[0] == &quot;{&quot;) { &#xA;      var exprPath = expr.substring(1, len-1).split(&quot;.&quot;);&#xA;  &#xA;      traverse( THIS.owner, exprPath) ? true : false;&#xA;    } else true;  // Attr is derived, Spec is given, but not in '{expr}' form, implies valid &#xA;  } else false;   // Attr is derived, but has no Specification --> CLASS_VALIDATION_ERROR indicates this&#xA;} else true; &#xA;&#xA;"/>
            </eAnnotations>
          </eSubpackages>
          <eSubpackages xmi:id="_PINQKp7dEeypSrJXJSy5zw" name="ClassValidation" nsURI="http:///PIMValidationProfile/PIMValidations/ClassValidation.ecore" nsPrefix="PIMValidationProfile.PIMValidations.ClassValidation">
            <eAnnotations xmi:id="_PINQK57dEeypSrJXJSy5zw" source="http://www.eclipse.org/uml2/2.0.0/UML">
              <details xmi:id="_PINQLJ7dEeypSrJXJSy5zw" key="originalName" value="Class Validation"/>
            </eAnnotations>
            <eAnnotations xmi:id="_PINQLZ7dEeypSrJXJSy5zw" source="http://www.eclipse.org/uml2/4.0.0/UML" references="c7a2a1e2-f580-430a-861a-fd14ab46b901"/>
            <eAnnotations xmi:id="_PINQLp7dEeypSrJXJSy5zw" source="http://www.eclipse.org/emf/2002/GenModel">
              <details xmi:id="_PINQL57dEeypSrJXJSy5zw" key="documentation" value="self.attribute->exists(a | a.oclIsKindOf( JudoProfile::representation ))&#xD;&#xA;self.attribute->select(a | a.oclIsKindOf( JudoProfile::representation ))->size() &lt;= 1&#xD;&#xA;not self.oclIsTypeOf(Class) or&#xA;not self.oclIsTypeOf(AssociationClass) or&#xA;   ((self.oclIsTypeOf(Class) or&#xA;     self.oclIsTypeOf(AssociationClass)) and&#xA;     self.name.matches('^[A-Za-z][A-Za-z0-9_]*$'))&#xD;&#xA;self.general->isEmpty() or&#xA;(not self.general->isEmpty() and&#xA;     self.general->forAll( g | not g.oclIsTypeOf( JudoProfile::implementation)))&#xD;&#xA;Class.allInstances()->select(c | c.general->includes( self) and c.oclIsTypeOf( JudoProfile::implementation) )->size() &lt;= 1&#xD;&#xA;let neighbours : Set(Class) = self.ownedAttribute&#xA;                                  .association->excluding(null)&#xA;                                  .memberEnd&#xA;                                  .UMLClass->excluding(null)&#xA;                                  ->asSet() in&#xA;    neighbours->closure(c | c.ownedAttribute->select(p | p.lower = 1 and p.upper = 1)&#xA;                             .association->excluding(null)&#xA;                             .memberEnd.UMLClass&#xA;                             ->asSet()&#xA;                             ->excluding(null)&#xA;                             ->excluding(c))->excludes(self)  &#xD;&#xA;testNashorn = load(&quot;nashorn:mozilla_compat.js&quot;);&#xA;&#xA;importPackage(&quot;com.nomagic.magicdraw.core&quot;);&#xA;importPackage(&quot;com.nomagic.magicdraw.fileattachments&quot;);&#xA;importPackage(&quot;java.io&quot;);&#xA;importPackage(&quot;com.nomagic.magicdraw.uml&quot;);&#xA;importPackage(&quot;com.nomagic.magicdraw.magicreport.helper&quot;); // ElementHelper&#xA;importPackage(&quot;com.nomagic.uml2.ext.jmi.helpers&quot;); // StereotypesHelper&#xA;&#xA;var logger = Application.getInstance().getGUILog();&#xA;&#xA;function log(msg) {&#xA;    logger.log(&quot;VR >>   &quot; + msg);&#xA;}&#xA;&#xA;&#xA;function getType( obj )&#xA;{&#xA;  return Object.prototype.toString.call(obj);&#xA;}&#xA;&#xA;function traverse(node, path) {&#xA;  if (!path || (path.length == 0)) {&#xA;    return node&#xA;  } else {&#xA;    nextPathElementRole = getNamedElement(node.getOwnedAttribute(), path[0]);     &#xA;    &#xA;    if (nextPathElementRole != null) {&#xA;        nextPathElement = nextPathElementRole.getType(); &#xA;        if (nextPathElement) {&#xA;            restOfPath = path.slice();&#xA;            restOfPath.shift();&#xA;            return traverse(nextPathElement, restOfPath);&#xA;        } else {&#xA;            return null;&#xA;        }&#xA;    } &#xA;    &#xA;    return null;&#xA;  }&#xA;}&#xA;&#xA;function getNamedElement(list, name) {&#xA;    if (list.length == 0) {&#xA;        return null;&#xA;    } else {&#xA;        li = list.listIterator();&#xA;        while (li.hasNext()) {&#xA;            nItem = li.next();&#xA;            if (nItem.name == name) {&#xA;                return nItem;&#xA;            }&#xA;        }&#xA;        &#xA;        return null;&#xA;    }&#xA;}&#xA;&#xA;function getAllOwningPackages(elmt, owners) {&#xA;    if (elmt == null) {&#xA;        return owners;&#xA;    }&#xA;    else {&#xA;        var newOwners = owners.slice();&#xA;        newOwners.push(elmt);&#xA;        return getAllOwningPackages(elmt.getOwningPackage(), newOwners);&#xA;    };&#xA;}&#xA;&#xA;function isDomainElement(elmt) {&#xA;    return StereotypesHelper.hasStereotype(elmt, &quot;bo&quot;) ||&#xA;           StereotypesHelper.hasStereotype(elmt, &quot;dto&quot;) ||&#xA;           StereotypesHelper.hasStereotype(elmt, &quot;rest&quot;);&#xA;}&#xA;&#xA;function isDomainClass(elmt) {&#xA;    var owningPkgs = getAllOwningPackages(elmt, []);&#xA;    return isDomainElement(elmt) ||&#xA;           owningPkgs.some(isDomainElement);&#xA;}&#xA;&#xA;function isTypeOf(elmt, metaClassName) {&#xA;  return (ElementHelper.getMetaClassName(elmt) == metaClassName); &#xA;}&#xA;function constrainedElements(elmt) {&#xA;    var constrainedElements = THIS.getConstrainedElement();&#xA;    return Java.from( constrainedElements.toArray()); &#xA;}&#xA;&#xA;function ownedElementsOfType(elmt, typeName) {&#xA;    return toA(elmt.getOwnedElement())&#xA;            .filter(function(e) { return isTypeOf(e, typeName)}) ;&#xA;}&#xA;function toA(list) {&#xA;    return Java.from(list.toArray());&#xA;}&#xA;&#xA;function isTraversableDescription(elmt, path) {&#xA;    if (elmt == null)&#xA;        return true;&#xA;&#xA;    var re = new RegExp('\{[a-zA-Z][a-zA-Z0-9_\.]+\}|[^{}]');&#xA;    var matched = re.exec(path);&#xA;    if ( matched !== null) {&#xA;        var subPath = matched[0].substr(1, matched[0].length-2); &#xA;        return (traverse(elmt, subPath.split(&quot;.&quot;)) !== null)&#xA;    } else&#xA;        return false;&#xA;}&#xA;&#xA;&#xA;// - only &lt;&lt;validation>> stereotyped Constraints have this validation rule - so checking of this stereotype is not needed                                                   &#xA;if (constrainedElements(THIS).some(function (ctdElmt) {return isDomainClass(ctdElmt)})) {                                                   &#xA;  ownedElementsOfType(THIS, &quot;Opaque Expression&quot;)                          // get OpaqueExpressions of the Constraint &#xA;   .map(function(e) {return toA(e.getBody())})                          // get bodies of the expressions&#xA;   .reduce(function (acc, val) {return acc.concat(val)}, [])            // flatten the resulting nested array struct [[a b][c d][e]] --> [a b c d e]&#xA;   .every(function(e) {  // log(&quot;e :: &quot; + e)                            // check if EACH (->'every') body text 'starts' with a traverseable dotted expr.&#xA;                         return constrainedElements(THIS).every(function (ctdElmt) { &#xA;                                                                return isTraversableDescription(ctdElmt, e)})})&#xA;} else&#xA;    true;        "/>
            </eAnnotations>
          </eSubpackages>
          <eSubpackages xmi:id="_PINQMJ7dEeypSrJXJSy5zw" name="StateMachineValidation" nsURI="http:///PIMValidationProfile/PIMValidations/StateMachineValidation.ecore" nsPrefix="PIMValidationProfile.PIMValidations.StateMachineValidation">
            <eAnnotations xmi:id="_PINQMZ7dEeypSrJXJSy5zw" source="http://www.eclipse.org/uml2/2.0.0/UML">
              <details xmi:id="_PINQMp7dEeypSrJXJSy5zw" key="originalName" value="StateMachine Validation"/>
            </eAnnotations>
            <eAnnotations xmi:id="_PINQM57dEeypSrJXJSy5zw" source="http://www.eclipse.org/uml2/4.0.0/UML" references="70094490-68f7-43ef-844a-eb114fc2ff99"/>
            <eAnnotations xmi:id="_PINQNJ7dEeypSrJXJSy5zw" source="http://www.eclipse.org/emf/2002/GenModel">
              <details xmi:id="_PINQNZ7dEeypSrJXJSy5zw" key="documentation" value="let smOwner : Element = self.container.stateMachine.owner in&#xA;    self.effect.oclIsUndefined() or&#xA;    self.effect.specification.oclIsUndefined() or&#xA;&#xA;-- no Interface is seeked for operation ownership - only Class&#xA;-- sm owner is implementation and operation owner is either this class or its parent&#xA;    if smOwner.oclIsTypeOf(JudoProfile::implementation) then&#xA;      (self.effect.specification.oclAsType(Operation).owner  = smOwner or &#xA;       smOwner.oclAsType(Class)&#xA;              .generalization&#xA;              ->exists(g | g.general = self.effect&#xA;                                           .specification&#xA;                                           .oclAsType(Operation)&#xA;                                           .owner&#xA;                                           .oclAsType(Class)))&#xA;      else&#xA;        self.effect.specification.oclAsType(Operation).owner  = smOwner&#xA;      endif"/>
            </eAnnotations>
          </eSubpackages>
          <eSubpackages xmi:id="_PINQNp7dEeypSrJXJSy5zw" name="DomainValidation" nsURI="http:///PIMValidationProfile/PIMValidations/DomainValidation.ecore" nsPrefix="PIMValidationProfile.PIMValidations.DomainValidation">
            <eAnnotations xmi:id="_PINQN57dEeypSrJXJSy5zw" source="http://www.eclipse.org/uml2/2.0.0/UML">
              <details xmi:id="_PINQOJ7dEeypSrJXJSy5zw" key="originalName" value="Domain Validation"/>
            </eAnnotations>
            <eAnnotations xmi:id="_PINQOZ7dEeypSrJXJSy5zw" source="http://www.eclipse.org/uml2/4.0.0/UML" references="fc104f10-8253-4cc8-9f4a-f42b590632f4"/>
            <eAnnotations xmi:id="_PINQOp7dEeypSrJXJSy5zw" source="http://www.eclipse.org/emf/2002/GenModel">
              <details xmi:id="_PINQO57dEeypSrJXJSy5zw" key="documentation" value="bo.allInstances()->select(p | p.oclIsTypeOf(Package) and p &lt;> self)->forAll(p | p.name &lt;> self.name)&#xD;&#xA;not this.oclIsTypeOf(shortname) or&#xA;   (this.oclIsTypeOf(shortname) and&#xA;let shortnames : Collection(shortname) = shortname.allInstances() in  &#xA;    let s : Sequence(shortname) = shortname.allInstances()->select( sn | sn.constrainedElement->includes(self) )->asSequence() in&#xA;        let  otherBOs  : Sequence(bo) = bo.allInstances()->excluding(self)->asSequence() in&#xA;        s->size() = 1 and&#xA;        s.constrainedElement->size() = 1 and&#xA;        shortnames->select(sn | sn.specification.oclAsType(LiteralString).value = &#xA;                                 s->first().specification.oclAsType(LiteralString).value)->select( sn | sn.constrainedElement->excludesAll( otherBOs ))->size() = 0)&#xA;"/>
            </eAnnotations>
          </eSubpackages>
        </eSubpackages>
        <eSubpackages xmi:id="_PINQPJ7dEeypSrJXJSy5zw" name="TODOs" nsURI="http:///PIMValidationProfile/TODOs.ecore" nsPrefix="PIMValidationProfile.TODOs">
          <eAnnotations xmi:id="_PINQPZ7dEeypSrJXJSy5zw" source="http://www.eclipse.org/uml2/2.0.0/UML">
            <details xmi:id="_PINQPp7dEeypSrJXJSy5zw" key="originalName" value="TO DOs"/>
          </eAnnotations>
          <eAnnotations xmi:id="_PINQP57dEeypSrJXJSy5zw" source="http://www.eclipse.org/uml2/4.0.0/UML" references="9150a271-1697-4349-a0bb-40c5bd50eea3"/>
        </eSubpackages>
      </contents>
    </eAnnotations>
    <packageImport xmi:id="846882e6-dcaa-4bd7-8291-02039864f345">
      <importedPackage xmi:type="uml:Model" href="pathmap://UML_METAMODELS/UML.metamodel.uml#_0"/>
    </packageImport>
    <packageImport xmi:id="_0primitiveTypesPIM_Validation_Profile">
      <importedPackage xmi:type="uml:Model" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#_0"/>
    </packageImport>
    <packageImport xmi:id="_0javaPrimitiveTypesPIM_Validation_Profile">
      <importedPackage xmi:type="uml:Model" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#_0"/>
    </packageImport>
    <packagedElement xmi:type="uml:Package" xmi:id="4400ef4e-b3ea-47b1-be03-35568a9f37f9" name="PIM Validations" visibility="public" URI="">
      <packagedElement xmi:type="uml:Package" xmi:id="97a8cb3c-9081-4c2f-9ca3-6d44984de03c" name="TESTING Suite" visibility="public" URI="">
        <ownedRule xmi:id="7c82be08-c27d-45bd-94b7-cfa4b25ea058" name="roleIsNotPrivate" visibility="public">
          <ownedComment xmi:id="553c947e-3167-4b42-ba98-c0ec7d1a8411" annotatedElement="7c82be08-c27d-45bd-94b7-cfa4b25ea058" body="[István] Ilyen szabály szerintem nincs. Bár a Modelio esetén valóban volt egy olyan (máig kiderítetlen) furcsa viselkedés, hogy a private elemek nem kerültek be a RAMC-ba és ezért célszerű volt ezt a láthatóságot kerülni, de szerintem etttől még nincs ilyen Judo korlát.&#xA;[TIbor] OK - Privivel egyeztettem, kivehető"/>
          <constrainedElement xmi:type="uml:Class" href="pathmap://UML_METAMODELS/UML.metamodel.uml#Property"/>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="9abe80b3-82af-4aac-bb23-458f4ebd5a1c" name="" visibility="public">
            <language>OCL2.0</language>
            <body>self.visibility &lt;> VisibilityKind::private</body>
          </specification>
        </ownedRule>
        <packagedElement xmi:type="uml:Package" xmi:id="2674016d-994a-4622-8d62-ead0c3718fc1" name="testPackage" visibility="public" URI="">
          <ownedRule xmi:id="bda4f726-ad26-4d56-8419-e9cdd5d75902" name="testClosure" visibility="public">
            <constrainedElement xmi:type="uml:Class" href="pathmap://UML_METAMODELS/UML.metamodel.uml#Package"/>
            <specification xmi:type="uml:OpaqueExpression" xmi:id="7259a601-9d1e-4556-b996-a360a914ef2b" name="" visibility="public">
              <language>JavaScript</language>
              <body>THIS.name              </body>
            </specification>
          </ownedRule>
          <ownedRule xmi:id="60882d77-ad95-4c8b-ba40-a0efb7365881" name="testsOnProperty" visibility="public">
            <constrainedElement xmi:type="uml:Stereotype" href="JudoProfile.profile.uml#f815ee60-7e4b-4d7f-be1b-d7b8c20562c9"/>
            <specification xmi:type="uml:OpaqueExpression" xmi:id="5df83cdb-f298-475b-9ed9-3586ab73edf6" name="" visibility="public">
              <language>OCL2.0</language>
              <body>bo.allInstances()->collect(e | e.oclAsType(Package))->union(Model.allInstances()->asSet())</body>
            </specification>
          </ownedRule>
          <ownedRule xmi:id="ad45a1a4-b0ae-4040-870f-60e7e85738f3" name="attributeUniqueInGeneralAxis" visibility="public">
            <constrainedElement xmi:type="uml:Class" href="pathmap://UML_METAMODELS/UML.metamodel.uml#Property"/>
            <specification xmi:type="uml:OpaqueExpression" xmi:id="ab47b7bc-c2cb-42fa-ab79-40a55b658341" name="" visibility="public">
              <language>OCL2.0</language>
              <body>self.owner.oclAsType(Class).general</body>
            </specification>
          </ownedRule>
        </packagedElement>
      </packagedElement>
      <packagedElement xmi:type="uml:Package" xmi:id="9d4029e4-1f85-49d4-a0bd-b0420fd25b3f" name="Role Validation" visibility="public" URI="">
        <ownedRule xmi:id="929e186e-dce0-461f-b485-d64b843ccd4b" name="roleNameExists" visibility="public">
          <constrainedElement xmi:type="uml:Class" href="pathmap://UML_METAMODELS/UML.metamodel.uml#Association"/>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="1ce87980-9252-4876-b102-097da3392036" name="" visibility="public">
            <language>OCL2.0</language>
            <body>self.oclAsType(Association).memberEnd->forAll(r | r.name.size() > 0)</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="9a03516e-d1ff-4a0a-b768-b54091380768" name="roleMandatoryAssociationEndIsNavigable" visibility="public">
          <constrainedElement xmi:type="uml:Class" href="pathmap://UML_METAMODELS/UML.metamodel.uml#Association"/>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="1568c567-fd28-44c4-8840-80465947ba92" name="" visibility="public">
            <language>OCL2.0</language>
            <body>let mandatoryEnds : Set(Property) = self.memberEnd->select(p | p.lower > 0 and not p.isDerived)->asSet() in
    self.ownedEnd->excludesAll(mandatoryEnds)    
</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="82814128-504d-4b69-9867-7a3273df30f7" name="roleMandatoryRoleIsNotList" visibility="public">
          <constrainedElement xmi:type="uml:Class" href="pathmap://UML_METAMODELS/UML.metamodel.uml#Association"/>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="432663a9-9089-41ba-af28-c8be0ec6de37" name="" visibility="public">
            <language>OCL2.0</language>
            <body>self.memberEnd->forAll(p | p.lower = 0 or
                           (p.lower &lt;> 0 and p.upper = 1))    
</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="14314ef9-1a46-4731-a22c-3ba3718b5de4" name="roleMaxOneMandatoryRole" visibility="public">
          <constrainedElement xmi:type="uml:Class" href="pathmap://UML_METAMODELS/UML.metamodel.uml#Association"/>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="b6046750-2ef2-40e7-96c8-301cbb88fd9c" name="" visibility="public">
            <language>OCL2.0</language>
            <body>self.memberEnd->select(p | p.lower &lt;> 0)->size() &lt; 2</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="ab86ebd3-caf3-482a-8519-f28ea887719a" name="roleCompositionIsMandatory" visibility="public">
          <constrainedElement xmi:type="uml:Class" href="pathmap://UML_METAMODELS/UML.metamodel.uml#Property"/>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="6ec9c657-9947-49c8-a4d0-09fe12ac98dc" name="" visibility="public">
            <language>OCL2.0</language>
            <body>not (self.aggregation = AggregationKind::composite) or 
    (self.aggregation = AggregationKind::composite and 
     self.association.memberEnd
         ->forAll(e | self.association.memberEnd
                          ->select(oe | oe &lt;> e)
                          ->forAll( oe | e.aggregation &lt;> AggregationKind::composite or
                                        (e.aggregation = AggregationKind::composite and
                                         oe.lower &lt;> 0 and 
                                         oe.upper = 1))))                
</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="96df9f67-2e7e-4333-9a0a-e3d0cecb5019" name="roleAggregationEndIsNotListAndOtherEndIsNotMandatory" visibility="public">
          <ownedComment xmi:id="826afc36-3fb5-44d5-8b5a-b14ab9da0bf1" annotatedElement="96df9f67-2e7e-4333-9a0a-e3d0cecb5019" body="Original rule: MESSAGE.AEND_INVALID_AGGREGATION"/>
          <constrainedElement xmi:type="uml:Class" href="pathmap://UML_METAMODELS/UML.metamodel.uml#Association"/>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="13389b4e-3b7e-45ab-b068-a01fede85e46" name="" visibility="public">
            <language>OCL2.0</language>
            <body>self.memberEnd
    ->forAll(e | self.memberEnd
                     ->select(oe | oe &lt;> e)
                     ->forAll( oe | e.aggregation &lt;> AggregationKind::shared or
                                   (e.aggregation = AggregationKind::shared and
                                    e.lower = 0 and 
                                    oe.upper = 1)))

</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="da8143b4-e5d2-41c3-a577-1fdbd50f0061" name="roleDerivedExpressionHasSpecification" visibility="public">
          <constrainedElement xmi:type="uml:Stereotype" href="JudoProfile.profile.uml#9a5f3b07-06ee-43a1-ab38-d9ef8d1ef77b"/>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="bd528b38-312c-4761-853c-33a275df6c65" name="" visibility="public">
            <language>OCL2.0</language>
            <body>self.specification.oclAsType(LiteralString).value->forAll(l | l.matches('[^ \\t\\n\\f\\r\\x0B]+'))
--self.specification.oclAsType(OpaqueExpression)._'body'->forAll(l | l.size() > 0)
</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="69751413-6208-402e-9c9e-356771a08e3e" name="roleDerivedDescriptionHasSpecification" visibility="public">
          <constrainedElement xmi:type="uml:Stereotype" href="JudoProfile.profile.uml#b7bb1f9e-7595-4c73-ab45-8a5a83ee7250"/>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="7e724d37-f67e-4aa5-b76f-3fcb58a4b43d" name="" visibility="public">
            <language>OCL2.0</language>
            <body>self.specification.oclAsType(OpaqueExpression)._'body'->exists(l | l.matches('[^\\t\\n\\f\\r\\x0B]+'))
</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="67669f23-5058-4da2-9794-08c9f655bdb1" name="roleDerivedRoleConsumerIsNotNavigable" visibility="public">
          <constrainedElement xmi:type="uml:Class" href="pathmap://UML_METAMODELS/UML.metamodel.uml#Property"/>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="a2f5ce04-b179-4187-a1f6-1bcf00a4c755" name="" visibility="public">
            <language>OCL2.0</language>
            <body>not  self.oclIsTypeOf(JudoProfile::derived) or
    (self.oclIsTypeOf(JudoProfile::derived) and
     self.association.oclIsUndefined()) or
    (self.oclIsTypeOf(JudoProfile::derived) and
     self.association.ownedEnd->includesAll( self.association.memberEnd->select(e | e &lt;> self)))        </body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="019e3557-29a5-4be3-96f8-9c723fd7049c" name="roleDerivedIsProtected" visibility="public">
          <constrainedElement xmi:type="uml:Class" href="pathmap://UML_METAMODELS/UML.metamodel.uml#Property"/>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="a9e94fcf-0d92-4b69-b752-49b4a573867f" name="" visibility="public">
            <language>OCL2.0</language>
            <body>not  self.oclIsTypeOf(JudoProfile::derived) or
    (self.oclIsTypeOf(JudoProfile::derived) and
     self.association.oclIsUndefined()) or
    (self.oclIsTypeOf(JudoProfile::derived) and
 not self.association.oclIsUndefined() and self.visibility = VisibilityKind::protected) </body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="1f5bd828-c887-4da5-9f77-130b8f03d1c6" name="roleNameIsUniqueInAncestorAxis" visibility="public">
          <constrainedElement xmi:type="uml:Class" href="pathmap://UML_METAMODELS/UML.metamodel.uml#Property"/>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="decbf9a4-5a15-4189-95d0-01dd8b28a6b1" name="" visibility="public">
            <language>OCL2.0</language>
            <body>if (self.featuringClassifier.oclIsTypeOf(Class)  and
   self.association &lt;> null ) then 
let theOwner : PackageableElement = self.featuringClassifier
                                        .oclAsType(PackageableElement) in
  let allOwners : Collection(PackageableElement) = theOwner->closure(owningPackage)
                                                           ->collect(oclAsType(PackageableElement))
                                                           ->including(theOwner) in
    let isGeneratorSource : Boolean = allOwners->selectByType(JudoProfile::bo)->notEmpty() or
                                      allOwners->selectByType(JudoProfile::dto)->notEmpty() or
                                      allOwners->selectByType(JudoProfile::rest)->notEmpty() 
                                      in
      let ancestors : Collection(Class) = theOwner.oclAsType(Class)
                                                  ->closure(general.oclAsType(Class)) in
        if isGeneratorSource then
          ancestors->collect(ownedAttribute.name)
                   ->forAll(n | not n.equalsIgnoreCase(self.name))        
        else
          true
        endif
else 
  true
endif
</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="f9d533c3-d007-40d5-9eaa-aa04f634837f" name="roleShortNameIsUniqueInAncestorAxis" visibility="public">
          <constrainedElement xmi:type="uml:Class" href="pathmap://UML_METAMODELS/UML.metamodel.uml#Property"/>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="09760538-eba7-4de0-aa7e-964b2c0a9cc5" name="" visibility="public">
            <language>OCL2.0</language>
            <body>if (self.featuringClassifier.oclIsTypeOf(Class) and
    self.association &lt;> null ) 
    then 
let theOwner : PackageableElement = self.featuringClassifier                            -- Owner (Class) of the Property (Attribute or Role)
                                        .oclAsType(PackageableElement) in
  if not theOwner.oclAsType(Class).general->isEmpty() then
  let allOwners : Collection(PackageableElement) = theOwner->closure(owningPackage)     -- Package hierarchy above the owner Class
                                                           ->collect(oclAsType(PackageableElement)) in
    let isGeneratorSource : Boolean = true --allOwners->selectByType(JudoProfile::bo)->notEmpty() or -- Rule is Applicable WITHIN a Package to be generated
                                      -- allOwners->selectByType(JudoProfile::dto)->notEmpty() or
                                      -- allOwners->selectByType(JudoProfile::rest)->notEmpty() 
                                      in
      let ancestors : Collection(Class) = theOwner.oclAsType(Class)                     -- All Ancestor of the ownerClass
                                                  ->closure(general.oclAsType(Class)) in
        let shortnames : Collection(JudoProfile::shortname) = JudoProfile::shortname.allInstances() in
          let s : Sequence(JudoProfile::shortname) = JudoProfile::shortname.allInstances()   -- All shortName constraints on this Property 
                                                                           ->select( sn | sn.constrainedElement->includes(self) )
                                                                           ->asSequence() in
          if isGeneratorSource then
              if (s->size() = 1 and                                                       -- check if we have exactly 1 shortname stereotype WITH 
                  s.constrainedElement->size() = 1) then                                  -- exactly 1 specification
                let sName : String = s->first().specification.oclAsType(LiteralString).value in
                  -- version one - compare self_s shortname with Attribute &amp; Role NAMES - Python code validates according to this interpretation
                  let ancAttributes : Collection(Property) = ancestors.ownedAttribute
                                                                      ->reject(association &lt;> null) in  
                    ancAttributes->forAll(name.equalsIgnoreCase(sName))         -- This attribute's / Role's shortname is Valid if no any ancestor's 
                                                                                -- attribute's / Role's name is equal to it         

                  -- version two - compare self's shortname with Attribute &amp; Role SHORTNAMES - !!! Put select &amp; collect's result in a let expression 
--                  ancestors.ownedAttribute      -- CHECK WHETHER select filters nulls out -> in this case the following select should come one line after
--                           ->select(a | shortnames->exists(constrainedElement->includes(a)))    -- select those Attributes &amp; Roles where Shortname is given
--                           ->collect(a | shortnames->select(constrainedElement->includes(a))    -- collect the corresponding shortnames
--                                                   ->first()
--                                                   .specification
--                                                   .oclAsType(LiteralString).value)
--                           ->forAll(n | not n.equalsIgnoreCase(sName))                    -- This property's shortname is Valid if no any ancestor's property's
                                                                                            -- shortname equals to it         
              else     
                false                                                                     -- more than 1 shortname on the Property OR 
                                                                                          -- more than 1 specification belongs to the stereotype 
              endif
          else
            true
          endif     
  else
      true
  endif
else 
  true                                          -- this Property does not belong to a Class OR
                                                -- is an Association Role -> restriction does not apply - as current understanding
endif
</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="98a32112-62c2-4b58-b6c5-c7f46bf673be" name="roleNavigationIsValid" visibility="public">
          <constrainedElement xmi:type="uml:Class" href="pathmap://UML_METAMODELS/UML.metamodel.uml#Property"/>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="60dbdf0a-1863-417e-a18d-eedc08391083" name="" visibility="public">
            <language>JavaScript</language>
            <body>function traverse(node, path) {
  if (path.length == 0) {
    return node
  } else {
    nextPathElementRole = getNamedElement(node.getOwnedAttribute(), path[0]);     
    
    if (nextPathElementRole != null) {
        nextPathElement = nextPathElementRole.getType(); 
        if (nextPathElement) {
            restOfPath = path.slice();
            restOfPath.shift();
            return traverse(nextPathElement, restOfPath);
        } else {
            return null;
        }
    } 
    
    return null;
  }
}

function getNamedElement(list, name) {
    if (list.length == 0) {
        return null;
    } else {
        li = list.listIterator();
        while (li.hasNext()) {
            nItem = li.next();
            if (nItem.name === name) {
                return nItem;
            }
        }
        
        return null;
    }
}

// Validation Rule
if (THIS.isDerived() &amp;&amp; THIS.association != null) {                           
  if (THIS.getDefaultValue()) {
    var expr = THIS.getDefaultValue().value
    var len = expr.length
    
    if (expr[0] == &quot;[&quot;) { 
      var exprPath = expr.substring(1, len-1).split(&quot;.&quot;);
      traverse( THIS.owner, exprPath) ? true : false;
    } else true;  // Role is derived, Spec is given, but not in '{expr}' form, implies valid 
  } else true;   // Role is derived, but has no Specification --> Python code (AEND_NAVIGATION_ERROR) permits such case as Valid
} else true; </body>
          </specification>
        </ownedRule>
      </packagedElement>
      <packagedElement xmi:type="uml:Package" xmi:id="e7ec005c-e802-471a-bcd8-a7eaa3727c3a" name="Constraint Validation" visibility="public" URI="">
        <ownedRule xmi:id="78fd3064-d86e-4c89-b966-98e647b704fa" name="shortNameLength" visibility="public">
          <constrainedElement xmi:type="uml:Stereotype" href="JudoProfile.profile.uml#36717008-b71c-4af5-a622-6e56cabce0ac"/>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="ef7b2bf4-5798-4637-9b43-044ef631238e" name="" visibility="public">
            <language>OCL2.0</language>
            <body>let judo_max_len : Integer = 6 in
self.specification.oclAsType(LiteralString).value->forAll(b | b.size() &lt;= judo_max_len)

-- MD-ben modellezve:
-- self.specification.oclAsType(OpaqueExpression)._'body'->forAll(b | b.size() &lt;= judo_max_len)</body>
          </specification>
        </ownedRule>
      </packagedElement>
      <packagedElement xmi:type="uml:Package" xmi:id="879f58bb-beba-4f3b-bed9-6d3c7d82f941" name="Attribute Validation" visibility="public" URI="">
        <ownedRule xmi:id="8560b79d-2e3b-439a-ab24-3f44087cbe8d" name="attributeNamePattern" visibility="public">
          <constrainedElement xmi:type="uml:Class" href="pathmap://UML_METAMODELS/UML.metamodel.uml#Property"/>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="e970cefb-7adf-4f87-9111-089636ba7bb6" name="" visibility="public">
            <language>OCL2.0</language>
            <body>let theOwner : PackageableElement = self.featuringClassifier
                                        .oclAsType(PackageableElement) in
  let ancestors : Collection(PackageableElement) = theOwner->closure(owningPackage)
                                                           ->collect(oclAsType(PackageableElement))
                                                           ->including(theOwner) in
    let isGeneratorSource : Boolean = ancestors->selectByType(JudoProfile::bo)->notEmpty() or
                                      ancestors->selectByType(JudoProfile::dto)->notEmpty() or
                                      ancestors->selectByType(JudoProfile::rest)->notEmpty() in
      if isGeneratorSource then
        self.name.matches('^[A-Za-z][A-Za-z0-9_]*$')        
      else
        true
      endif

-- self.name.matches('^[A-Za-z][A-Za-z0-9_]*$')


-- ha a &quot;tulaj&quot; (featuringClassifier) felmenői (ancestors) között van
--    (&lt;&lt;bo>> VAGY &lt;&lt;dto>> VAGY &lt;&lt;rest>>) 
--    AKKOR ==> a névnek a minta szerintinek kell lennie
--    ELLENKEZŐ ESETBEN  nem  (==> true : valid a név)  </body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="49b3dc66-5df6-44b6-b741-d9020f5fda83" name="attributeDerivedIsNotCalculated" visibility="public">
          <constrainedElement xmi:type="uml:Class" href="pathmap://UML_METAMODELS/UML.metamodel.uml#Property"/>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="1c4ff30f-f815-41d5-b427-d24d38bcab8e" name="" visibility="public">
            <language>OCL2.0</language>
            <body>not self.isDerived or
(self.isDerived and not self.oclIsTypeOf(JudoProfile::calculated)) </body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="29aa7bec-c8b6-45ab-8fa7-f8922be4fd2c" name="attrDerivedPropertyIsOfBaseType" visibility="public">
          <constrainedElement xmi:type="uml:Class" href="pathmap://UML_METAMODELS/UML.metamodel.uml#Element"/>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="867b2f1b-d384-4a9b-b300-a9f0a621e130" name="" visibility="public">
            <language>OCL2.0</language>
            <body>let pimTypesModel : Model = Model.allInstances()->select(m | m.name = 'PIM Types')
                                                ->asSequence()
                                                ->first() in
    let judoPrimitiveTypes : Set(PrimitiveType) = PrimitiveType.allInstances()->select(pt | pt.owner = pimTypesModel) in
        let umlPrimitiveTypePkg : Package =  Package.allInstances()
                                                ->select( pkg | pkg.owner = Model.allInstances()
                                                                                ->select(m | m.name = 'UML2 Metamodel')
                                                                                ->asSequence()
                                                                                ->first())
                                                ->asSequence()
                                                ->first() in
            let umlPrimitiveType : Set(PrimitiveType) = PrimitiveType.allInstances()->select(pt | pt.owner = umlPrimitiveTypePkg) in
                                                      
-- Q: is this inv. should be checked on non-association member properties ONLY? --> Chosen: YES 
                not self.association.oclIsUndefined() or                
                umlPrimitiveType->union(judoPrimitiveTypes)->includes(self.type)                            
</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="351ce3d0-f80a-47d8-8679-1ebfce03d3d6" name="attributeListAttrIsOptional" visibility="public">
          <constrainedElement xmi:type="uml:Stereotype" href="JudoProfile.profile.uml#1ec76253-522b-4f6d-b3b2-4facfa441f7f"/>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="36c0b6d9-9202-491d-afdd-c3ac7b605a5a" name="" visibility="public">
            <language>OCL2.0</language>
            <body>self.constrainedElement->select(e | e.oclIsTypeOf(Property))->forAll(p | p.oclAsType(Property).lower &lt;> 1)</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="574cac45-8509-49f1-a88f-51fb672a90fc" name="attrNameIsUniqueInAncestorAxis" visibility="public">
          <constrainedElement xmi:type="uml:Class" href="pathmap://UML_METAMODELS/UML.metamodel.uml#Property"/>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="f92b41f0-03e6-4497-939b-93457e0948ad" name="" visibility="public">
            <language>OCL2.0</language>
            <body>if (self.featuringClassifier.oclIsTypeOf(Class) and
    self.association = null ) then 
let theOwner : PackageableElement = self.featuringClassifier
                                        .oclAsType(PackageableElement) in
  let allOwners : Collection(PackageableElement) = theOwner->closure(owningPackage)
                                                           ->collect(oclAsType(PackageableElement))
                                                           ->including(theOwner) in
    let isGeneratorSource : Boolean = allOwners->selectByType(JudoProfile::bo)->notEmpty() or
                                       allOwners->selectByType(JudoProfile::dto)->notEmpty() or
                                       allOwners->selectByType(JudoProfile::rest)->notEmpty() 
                                      in
      let ancestors : Collection(Class) = theOwner.oclAsType(Class)
                                                  ->closure(general.oclAsType(Class)) in
        if isGeneratorSource then
          ancestors->collect(ownedAttribute.name)
                   ->forAll(n | not n.equalsIgnoreCase(self.name))        
        else
          true
        endif
else 
  true
endif

-- ha a &quot;tulaj&quot; (featuringClassifier) felmenői (ancestors) között van
--    (&lt;&lt;bo>> VAGY &lt;&lt;dto>> VAGY &lt;&lt;rest>>) 
--    AKKOR ==> a névnek a minta szerintinek kell lennie
--    ELLENKEZŐ ESETBEN  nem  (==> true : valid a név)</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="4387c2a1-760c-44ea-9ff2-17ae9f845969" name="attrShortNameIsUniqueInAncestorAxis" visibility="public">
          <constrainedElement xmi:type="uml:Class" href="pathmap://UML_METAMODELS/UML.metamodel.uml#Property"/>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="bb42d176-0c8d-460e-8a0f-e7ed707be573" name="" visibility="public">
            <language>OCL2.0</language>
            <body>if (self.featuringClassifier.oclIsTypeOf(Class) and
    self.association = null ) 
    then 
let theOwner : PackageableElement = self.featuringClassifier                            -- Owner (Class) of the Property (Attribute or Role)
                                        .oclAsType(PackageableElement) in
  if not theOwner.oclAsType(Class).general->isEmpty() then
  let allOwners : Collection(PackageableElement) = theOwner->closure(owningPackage)     -- Package hierarchy above the owner Class
                                                           ->collect(oclAsType(PackageableElement)) in
    let isGeneratorSource : Boolean = true --allOwners->selectByType(JudoProfile::bo)->notEmpty() or -- Rule is Applicable WITHIN a Package to be generated
                                      -- allOwners->selectByType(JudoProfile::dto)->notEmpty() or
                                      -- allOwners->selectByType(JudoProfile::rest)->notEmpty() 
                                      in
      let ancestors : Collection(Class) = theOwner.oclAsType(Class)                     -- All Ancestor of the ownerClass
                                                  ->closure(general.oclAsType(Class)) in
        let shortnames : Collection(JudoProfile::shortname) = JudoProfile::shortname.allInstances() in
          let s : Sequence(JudoProfile::shortname) = JudoProfile::shortname.allInstances()   -- All shortName constraints on this Property 
                                                                           ->select( sn | sn.constrainedElement->includes(self) )
                                                                           ->asSequence() in
          if isGeneratorSource then
              if (s->size() = 1 and                                                       -- check if we have exactly 1 shortname stereotype WITH 
                  s.constrainedElement->size() = 1) then                                  -- exactly 1 specification
                let sName : String = s->first().specification.oclAsType(LiteralString).value in
                  -- version one - compare self_s shortname with Attribute &amp; Role NAMES - Python code validates according to this interpretation
                  let ancAttributes : Collection(Property) = ancestors.ownedAttribute
                                                                      ->reject(association &lt;> null) in  
                    ancAttributes->forAll(name.equalsIgnoreCase(sName))         -- This attribute's / Role's shortname is Valid if no any ancestor's 
                                                                                -- attribute's / Role's name is equal to it         

                  -- version two - compare self's shortname with Attribute &amp; Role SHORTNAMES - !!! Put select &amp; collect's result in a let expression 
--                  ancestors.ownedAttribute      -- CHECK WHETHER select filters nulls out -> in this case the following select should come one line after
--                           ->select(a | shortnames->exists(constrainedElement->includes(a)))    -- select those Attributes &amp; Roles where Shortname is given
--                           ->collect(a | shortnames->select(constrainedElement->includes(a))    -- collect the corresponding shortnames
--                                                   ->first()
--                                                   .specification
--                                                   .oclAsType(LiteralString).value)
--                           ->forAll(n | not n.equalsIgnoreCase(sName))                    -- This property's shortname is Valid if no any ancestor's property's
                                                                                            -- shortname equals to it         
              else     
                false                                                                     -- more than 1 shortname on the Property OR 
                                                                                          -- more than 1 specification belongs to the stereotype 
              endif
          else
            true
          endif
   else 
      true
   endif
else 
  true                                          -- this Property does not belong to a Class OR
                                                -- is an Association Role -> restriction does not apply - as current understanding
endif
</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="5a51487a-dc59-4713-822b-6224d80e90ca" name="attrNavigationIsValid" visibility="public">
          <constrainedElement xmi:type="uml:Class" href="pathmap://UML_METAMODELS/UML.metamodel.uml#Property"/>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="ad17e73f-bffc-4ad1-9f70-852a236a85ec" name="" visibility="public">
            <language>JavaScript</language>
            <body>function traverse(node, path) {
  if (path.length == 0) {
    return node
  } else {
    nextPathElementRole = getNamedElement(node.getOwnedAttribute(), path[0]);     
    
    if (nextPathElementRole != null) {
        nextPathElement = nextPathElementRole.getType(); 
        if (nextPathElement) {
            restOfPath = path.slice();
            restOfPath.shift();
            return traverse(nextPathElement, restOfPath);
        } else {
            return null;
        }
    } 
    
    return null;
  }
}

function getNamedElement(list, name) {
    if (list.length == 0) {
        return null;
    } else {
        li = list.listIterator();
        while (li.hasNext()) {
            nItem = li.next();
            if (nItem.name === name) {
                return nItem;
            }
        }
        
        return null;
    }
}

// Validation Rule
if (THIS.isDerived() &amp;&amp; THIS.association === null) {                           
  if (THIS.getDefaultValue()) {
    var expr = THIS.getDefaultValue().value
    var len = expr.length
    
    if (expr[0] == &quot;{&quot;) { 
      var exprPath = expr.substring(1, len-1).split(&quot;.&quot;);
  
      traverse( THIS.owner, exprPath) ? true : false;
    } else true;  // Attr is derived, Spec is given, but not in '{expr}' form, implies valid 
  } else false;   // Attr is derived, but has no Specification --> CLASS_VALIDATION_ERROR indicates this
} else true; 

</body>
          </specification>
        </ownedRule>
      </packagedElement>
      <packagedElement xmi:type="uml:Package" xmi:id="c7a2a1e2-f580-430a-861a-fd14ab46b901" name="Class Validation" visibility="public" URI="">
        <ownedRule xmi:id="aa6cce52-f933-489f-bce2-cfdc3c533479" name="classExistenceOfRepresentation" visibility="public">
          <constrainedElement xmi:type="uml:Class" href="pathmap://UML_METAMODELS/UML.metamodel.uml#Class"/>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="762be354-7c2e-4966-b409-a0d96c23b1ec" name="" visibility="public">
            <language>OCL2.0</language>
            <body>self.attribute->exists(a | a.oclIsKindOf( JudoProfile::representation ))</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="eaff652a-56f1-4948-b033-577ed0872c99" name="classExcessiveNumberOfRepresentations" visibility="public">
          <constrainedElement xmi:type="uml:Class" href="pathmap://UML_METAMODELS/UML.metamodel.uml#Class"/>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="338a7f27-be04-4d38-8fcd-66597e4c7a29" name="" visibility="public">
            <language>OCL2.0</language>
            <body>self.attribute->select(a | a.oclIsKindOf( JudoProfile::representation ))->size() &lt;= 1</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="e9dcf736-003f-4905-8408-c957b7d3f246" name="classNamePattern" visibility="public">
          <constrainedElement xmi:type="uml:Class" href="pathmap://UML_METAMODELS/UML.metamodel.uml#Class"/>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="df3fcadf-78b1-46d7-86ac-560000d2d7e1" name="" visibility="public">
            <language>OCL2.0</language>
            <body>not self.oclIsTypeOf(Class) or
not self.oclIsTypeOf(AssociationClass) or
   ((self.oclIsTypeOf(Class) or
     self.oclIsTypeOf(AssociationClass)) and
     self.name.matches('^[A-Za-z][A-Za-z0-9_]*$'))</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="99af5224-bf2a-4da9-a5ae-b353b07c7e97" name="classNoImplementationClassInheritance" visibility="public">
          <constrainedElement xmi:type="uml:Class" href="pathmap://UML_METAMODELS/UML.metamodel.uml#Class"/>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="dba16538-e80d-4b54-abfe-789c7ae16026" name="" visibility="public">
            <language>OCL2.0</language>
            <body>self.general->isEmpty() or
(not self.general->isEmpty() and
     self.general->forAll( g | not g.oclIsTypeOf( JudoProfile::implementation)))</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="e2153d55-a7a9-46cf-b7ae-10ef2753a144" name="classOneImplementationChild" visibility="public">
          <constrainedElement xmi:type="uml:Class" href="pathmap://UML_METAMODELS/UML.metamodel.uml#Class"/>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="08181dfe-726c-4b88-abcc-e1da7065d331" name="" visibility="public">
            <language>OCL2.0</language>
            <body>Class.allInstances()->select(c | c.general->includes( self) and c.oclIsTypeOf( JudoProfile::implementation) )->size() &lt;= 1</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="c5f17de0-4f18-41f4-9a83-f31f9863f166" name="classNoCircularDependency" visibility="public">
          <constrainedElement xmi:type="uml:Class" href="pathmap://UML_METAMODELS/UML.metamodel.uml#Class"/>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="6fed9a44-8b6a-4ba8-af95-103e8f7e55ba" name="" visibility="public">
            <language>OCL2.0</language>
            <body>let neighbours : Set(Class) = self.ownedAttribute
                                  .association->excluding(null)
                                  .memberEnd
                                  .UMLClass->excluding(null)
                                  ->asSet() in
    neighbours->closure(c | c.ownedAttribute->select(p | p.lower = 1 and p.upper = 1)
                             .association->excluding(null)
                             .memberEnd.UMLClass
                             ->asSet()
                             ->excluding(null)
                             ->excluding(c))->excludes(self)  </body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="b853302a-5547-4077-be84-96bfa3738c16" name="classTraverseableValidationExpression" visibility="public">
          <constrainedElement xmi:type="uml:Stereotype" href="JudoProfile.profile.uml#da94893a-628c-436f-b6ba-b8097ea51686"/>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="f21f6706-21e9-4f08-9806-1e81f5e585cd" name="" visibility="public">
            <language>JavaScript</language>
            <body>testNashorn = load(&quot;nashorn:mozilla_compat.js&quot;);

importPackage(&quot;com.nomagic.magicdraw.core&quot;);
importPackage(&quot;com.nomagic.magicdraw.fileattachments&quot;);
importPackage(&quot;java.io&quot;);
importPackage(&quot;com.nomagic.magicdraw.uml&quot;);
importPackage(&quot;com.nomagic.magicdraw.magicreport.helper&quot;); // ElementHelper
importPackage(&quot;com.nomagic.uml2.ext.jmi.helpers&quot;); // StereotypesHelper

var logger = Application.getInstance().getGUILog();

function log(msg) {
    logger.log(&quot;VR >>   &quot; + msg);
}


function getType( obj )
{
  return Object.prototype.toString.call(obj);
}

function traverse(node, path) {
  if (!path || (path.length == 0)) {
    return node
  } else {
    nextPathElementRole = getNamedElement(node.getOwnedAttribute(), path[0]);     
    
    if (nextPathElementRole != null) {
        nextPathElement = nextPathElementRole.getType(); 
        if (nextPathElement) {
            restOfPath = path.slice();
            restOfPath.shift();
            return traverse(nextPathElement, restOfPath);
        } else {
            return null;
        }
    } 
    
    return null;
  }
}

function getNamedElement(list, name) {
    if (list.length == 0) {
        return null;
    } else {
        li = list.listIterator();
        while (li.hasNext()) {
            nItem = li.next();
            if (nItem.name == name) {
                return nItem;
            }
        }
        
        return null;
    }
}

function getAllOwningPackages(elmt, owners) {
    if (elmt == null) {
        return owners;
    }
    else {
        var newOwners = owners.slice();
        newOwners.push(elmt);
        return getAllOwningPackages(elmt.getOwningPackage(), newOwners);
    };
}

function isDomainElement(elmt) {
    return StereotypesHelper.hasStereotype(elmt, &quot;bo&quot;) ||
           StereotypesHelper.hasStereotype(elmt, &quot;dto&quot;) ||
           StereotypesHelper.hasStereotype(elmt, &quot;rest&quot;);
}

function isDomainClass(elmt) {
    var owningPkgs = getAllOwningPackages(elmt, []);
    return isDomainElement(elmt) ||
           owningPkgs.some(isDomainElement);
}

function isTypeOf(elmt, metaClassName) {
  return (ElementHelper.getMetaClassName(elmt) == metaClassName); 
}
function constrainedElements(elmt) {
    var constrainedElements = THIS.getConstrainedElement();
    return Java.from( constrainedElements.toArray()); 
}

function ownedElementsOfType(elmt, typeName) {
    return toA(elmt.getOwnedElement())
            .filter(function(e) { return isTypeOf(e, typeName)}) ;
}
function toA(list) {
    return Java.from(list.toArray());
}

function isTraversableDescription(elmt, path) {
    if (elmt == null)
        return true;

    var re = new RegExp('\{[a-zA-Z][a-zA-Z0-9_\.]+\}|[^{}]');
    var matched = re.exec(path);
    if ( matched !== null) {
        var subPath = matched[0].substr(1, matched[0].length-2); 
        return (traverse(elmt, subPath.split(&quot;.&quot;)) !== null)
    } else
        return false;
}


// - only &lt;&lt;validation>> stereotyped Constraints have this validation rule - so checking of this stereotype is not needed                                                   
if (constrainedElements(THIS).some(function (ctdElmt) {return isDomainClass(ctdElmt)})) {                                                   
  ownedElementsOfType(THIS, &quot;Opaque Expression&quot;)                          // get OpaqueExpressions of the Constraint 
   .map(function(e) {return toA(e.getBody())})                          // get bodies of the expressions
   .reduce(function (acc, val) {return acc.concat(val)}, [])            // flatten the resulting nested array struct [[a b][c d][e]] --> [a b c d e]
   .every(function(e) {  // log(&quot;e :: &quot; + e)                            // check if EACH (->'every') body text 'starts' with a traverseable dotted expr.
                         return constrainedElements(THIS).every(function (ctdElmt) { 
                                                                return isTraversableDescription(ctdElmt, e)})})
} else
    true;        </body>
          </specification>
        </ownedRule>
      </packagedElement>
      <packagedElement xmi:type="uml:Package" xmi:id="70094490-68f7-43ef-844a-eb114fc2ff99" name="StateMachine Validation" visibility="public" URI="">
        <ownedRule xmi:id="1fadb8c7-faef-4266-baef-84b8c095e7e3" name="smTransOpOwnerIsTransOwnerOrParent" visibility="public">
          <constrainedElement xmi:type="uml:Class" href="pathmap://UML_METAMODELS/UML.metamodel.uml#Transition"/>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="b01ef613-3f2a-4590-8567-82800c3c7980" name="" visibility="public">
            <language>OCL2.0</language>
            <body>let smOwner : Element = self.container.stateMachine.owner in
    self.effect.oclIsUndefined() or
    self.effect.specification.oclIsUndefined() or

-- no Interface is seeked for operation ownership - only Class
-- sm owner is implementation and operation owner is either this class or its parent
    if smOwner.oclIsTypeOf(JudoProfile::implementation) then
      (self.effect.specification.oclAsType(Operation).owner  = smOwner or 
       smOwner.oclAsType(Class)
              .generalization
              ->exists(g | g.general = self.effect
                                           .specification
                                           .oclAsType(Operation)
                                           .owner
                                           .oclAsType(Class)))
      else
        self.effect.specification.oclAsType(Operation).owner  = smOwner
      endif</body>
          </specification>
        </ownedRule>
      </packagedElement>
      <packagedElement xmi:type="uml:Package" xmi:id="fc104f10-8253-4cc8-9f4a-f42b590632f4" name="Domain Validation" visibility="public" URI="">
        <ownedRule xmi:id="51fd9a86-8aab-410a-9133-5a2c0f3fe233" name="domainUniqueName" visibility="public">
          <constrainedElement xmi:type="uml:Stereotype" href="JudoProfile.profile.uml#f815ee60-7e4b-4d7f-be1b-d7b8c20562c9"/>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="6aa60e31-dae4-466c-af9a-4380a7b8d381" name="" visibility="public">
            <language>OCL2.0</language>
            <body>bo.allInstances()->select(p | p.oclIsTypeOf(Package) and p &lt;> self)->forAll(p | p.name &lt;> self.name)</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="ea9bfc81-b3d7-495d-9fd4-af4c67c1406d" name="domainUniqueShortName" visibility="public">
          <constrainedElement xmi:type="uml:Stereotype" href="JudoProfile.profile.uml#f815ee60-7e4b-4d7f-be1b-d7b8c20562c9"/>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="d33b49ad-6e24-4462-a0fd-ff11adc56655" name="" visibility="public">
            <language>OCL2.0</language>
            <body>not this.oclIsTypeOf(shortname) or
   (this.oclIsTypeOf(shortname) and
let shortnames : Collection(shortname) = shortname.allInstances() in  
    let s : Sequence(shortname) = shortname.allInstances()->select( sn | sn.constrainedElement->includes(self) )->asSequence() in
        let  otherBOs  : Sequence(bo) = bo.allInstances()->excluding(self)->asSequence() in
        s->size() = 1 and
        s.constrainedElement->size() = 1 and
        shortnames->select(sn | sn.specification.oclAsType(LiteralString).value = 
                                 s->first().specification.oclAsType(LiteralString).value)->select( sn | sn.constrainedElement->excludesAll( otherBOs ))->size() = 0)
</body>
          </specification>
        </ownedRule>
      </packagedElement>
    </packagedElement>
    <packagedElement xmi:type="uml:Package" xmi:id="9150a271-1697-4349-a0bb-40c5bd50eea3" name="TO DOs" visibility="public" URI=""/>
    <profileApplication xmi:id="0c5b9926-4921-4fec-9112-7888a201496dprofileApplicationPIM_Validation_Profile">
      <eAnnotations xmi:id="_POU8w57dEeypSrJXJSy5zw" source="http://www.eclipse.org/uml2/2.0.0/UML">
        <references xmi:type="ecore:EPackage" href="UML_Standard_Profile.MagicDraw_Profile.profile.uml#_PH8A0p7dEeypSrJXJSy5zw"/>
      </eAnnotations>
      <appliedProfile href="UML_Standard_Profile.MagicDraw_Profile.profile.uml#0c5b9926-4921-4fec-9112-7888a201496d"/>
    </profileApplication>
    <profileApplication xmi:id="cecd26f2-f173-4068-8576-423be9e4e477profileApplicationPIM_Validation_Profile">
      <eAnnotations xmi:id="_PO_D857dEeypSrJXJSy5zw" source="http://www.eclipse.org/uml2/2.0.0/UML">
        <references xmi:type="ecore:EPackage" href="UML_Standard_Profile.Validation_Profile.profile.uml#_PH8KY57dEeypSrJXJSy5zw"/>
      </eAnnotations>
      <appliedProfile href="UML_Standard_Profile.Validation_Profile.profile.uml#cecd26f2-f173-4068-8576-423be9e4e477"/>
    </profileApplication>
  </uml:Profile>
  <MagicDrawProfile:TODO_Owner xmi:id="_POU8xJ7dEeypSrJXJSy5zw" base_Element="7c82be08-c27d-45bd-94b7-cfa4b25ea058">
    <TODO>&lt;html>
  &lt;head>
		&lt;style>
			p {padding:0px; margin:0px;}
		&lt;/style>
	&lt;/head>
  &lt;body>
    &lt;p>
&amp;#160;

    &lt;/p>

&lt;/body>
&lt;/html></TODO>
  </MagicDrawProfile:TODO_Owner>
  <MagicDrawProfile:TODO_Owner xmi:id="_POU8yJ7dEeypSrJXJSy5zw" base_Element="ea9bfc81-b3d7-495d-9fd4-af4c67c1406d">
    <TODO>&lt;html>
  &lt;head>
		&lt;style>
			p {padding:0px; margin:0px;}
		&lt;/style>
	&lt;/head>
  &lt;body>
    &lt;ul>
      &lt;li>
[Istv&amp;aacute;n] Ellen&amp;#337;rizend&amp;#337;! T&amp;eacute;nyleg kell minden &lt;b>bo&lt;/b>-s csomagra egy &lt;b>shortname&lt;/b> constraint? A &lt;b>Car &lt;/b>modellben p&amp;eacute;ld&amp;aacute;ul nincs ilyen.

      &lt;/li>
      &lt;li>
[Tibor] Done (TODO t&amp;ouml;rl&amp;eacute;sre ker&amp;uuml;l, ha a jelenlegi TODO&amp;#160;csomg elk&amp;eacute;sz&amp;uuml;lt)

      &lt;/li>
    &lt;/ul>
    &lt;p>
&amp;#160;

    &lt;/p>

&lt;/body>
&lt;/html></TODO>
  </MagicDrawProfile:TODO_Owner>
  <MagicDrawProfile:TODO_Owner xmi:id="_POU8yZ7dEeypSrJXJSy5zw" base_Element="e9dcf736-003f-4905-8408-c957b7d3f246">
    <TODO>&lt;html>
  &lt;head>
		&lt;style>
			p {padding:0px; margin:0px;}
		&lt;/style>
	&lt;/head>
  &lt;body>
    &lt;ul>
      &lt;li>
[Istv&amp;aacute;n] Ez &amp;iacute;gy fel&amp;uuml;lvizsg&amp;aacute;land&amp;oacute;, mert vonatkozik minden &lt;b>Class&lt;/b> -b&amp;oacute;l sz&amp;aacute;rmaz&amp;oacute; elemre is, &amp;iacute;gy pl. egy &lt;b>StateMachine&lt;/b>-re is. Ennek kapcs&amp;aacute;n &amp;aacute;tgondoland&amp;oacute; az is, hogy a &lt;b>StateMachine&lt;/b>-b&amp;#337;l minek is kellene gener&amp;aacute;l&amp;oacute;dnia ill. j&amp;oacute;-e a mostani koncepci&amp;oacute; (azaz, hogy vmif&amp;eacute;le property j&amp;ouml;n l&amp;eacute;tre)?

      &lt;/li>
      &lt;li>
[Tibor] Done        
&lt;br>A Class hierarchi&amp;aacute;b&amp;oacute;l a Class-t &amp;eacute;s az AssociationClass-t v&amp;aacute;lasztottam ki egyel&amp;#337;re.        
&lt;br>(TODO t&amp;ouml;rl&amp;eacute;sre ker&amp;uuml;l, ha a jelenlegi TODO&amp;#160;csomg elk&amp;eacute;sz&amp;uuml;lt)

      &lt;/li>
    &lt;/ul>
&lt;/body>
&lt;/html></TODO>
  </MagicDrawProfile:TODO_Owner>
  <MagicDrawProfile:TODO_Owner xmi:id="_POU8yp7dEeypSrJXJSy5zw" base_Element="8560b79d-2e3b-439a-ab24-3f44087cbe8d">
    <TODO>&lt;html>
  &lt;head>
		&lt;style>
			p {padding:0px; margin:0px;}
		&lt;/style>
	&lt;/head>
  &lt;body>
    &lt;ul>
      &lt;li>
[Istv&amp;aacute;n] Fel&amp;uuml;lvizsg&amp;aacute;land&amp;oacute;! Ez a szab&amp;aacute;ly j&amp;oacute; es&amp;eacute;llyel csak a specifikus stereotype-&amp;uacute; &lt;b>package&lt;/b>-ben &lt;b>class&lt;/b>-okra l&amp;eacute;vő (ill. specifikus stereotype-al ell&amp;aacute;tott &lt;b>class&lt;/b>-okra) igaz.
        &lt;ul>
          &lt;li>
K&amp;eacute;rd&amp;eacute;s:&amp;#160;&lt;i>melyik ez a specifikus stereotype ill. melyek ezek?&lt;/i>

          &lt;/li>
        &lt;/ul>

      &lt;/li>
    &lt;/ul>
    &lt;p>
&amp;#160;

    &lt;/p>

&lt;/body>
&lt;/html></TODO>
  </MagicDrawProfile:TODO_Owner>
  <MagicDrawProfile:TODO_Owner xmi:id="_POU8y57dEeypSrJXJSy5zw" base_Element="96df9f67-2e7e-4333-9a0a-e3d0cecb5019">
    <TODO>&lt;html>
  &lt;head>
		&lt;style>
			p {padding:0px; margin:0px;}
		&lt;/style>
	&lt;/head>
  &lt;body>
    &lt;ul>
      &lt;li>
[Istvan] Fel&amp;uuml;lvizsg&amp;aacute;land&amp;oacute;! Val&amp;oacute;sz&amp;iacute;n&amp;#369;leg enn&amp;eacute;l is fel van cser&amp;eacute;lve az agggreg&amp;aacute;ci&amp;oacute;s v&amp;eacute;gpontra ill. az ellenkez&amp;#337; v&amp;eacute;gpontra vonatkoz&amp;oacute; szab&amp;aacute;ly.

      &lt;/li>
      &lt;li>
[Tibor] Done

      &lt;/li>
    &lt;/ul>
&lt;/body>
&lt;/html></TODO>
  </MagicDrawProfile:TODO_Owner>
  <MagicDrawProfile:TODO_Owner xmi:id="_POU8zJ7dEeypSrJXJSy5zw" base_Element="ab86ebd3-caf3-482a-8519-f28ea887719a">
    <TODO>&lt;html>
  &lt;head>
		&lt;style>
			p {padding:0px; margin:0px;}
		&lt;/style>
	&lt;/head>
  &lt;body>
    &lt;ul>
      &lt;li>
[Istvan] Nem t&amp;#369;nik j&amp;oacute;nak, mert egy kompozit aggreg&amp;aacute;lt attrib&amp;uacute;tum lehet [0..*] multiplicit&amp;aacute;ssal. Azt gondolom, hogy itt fel van cser&amp;eacute;lve a k&amp;eacute;t oldal. Modell szinten nem az a kompozit attrib&amp;uacute;tum, ahol a rombusz van, hanem az &amp;aacute;tellenes.

      &lt;/li>
      &lt;li>
[Tibor] Done

      &lt;/li>
    &lt;/ul>
&lt;/body>
&lt;/html></TODO>
  </MagicDrawProfile:TODO_Owner>
  <MagicDrawProfile:TODO_Owner xmi:id="_POU8zZ7dEeypSrJXJSy5zw" base_Element="82814128-504d-4b69-9867-7a3273df30f7">
    <TODO>&lt;html>
  &lt;head>
		&lt;style>
			p {padding:0px; margin:0px;}
		&lt;/style>
	&lt;/head>
  &lt;body>
    &lt;ul>
      &lt;li>
[Istvan] Ez nem t&amp;#369;nik j&amp;oacute;nak! pl. egy kompozit aggreg&amp;aacute;ci&amp;oacute; befoglal&amp;oacute; ('eg&amp;eacute;sz') oldal&amp;aacute;n&amp;aacute;l a multiplicit&amp;aacute;s [1] vagy [0..1], &amp;iacute;gy az mindenk&amp;eacute;ppen elbukik ezen a szab&amp;aacute;lyon.

      &lt;/li>
      &lt;li>
[Tibor] ezeken a helyzeteken nem kellene elbuknia:
        &lt;ul>
          &lt;li>
ha multiplicity =&amp;#160;1, akkor a szab&amp;aacute;ly m&amp;aacute;sodik fele szerint valid -&amp;gt; (p.lower &amp;lt;&amp;gt; 0 and p.upper =&amp;#160;1)

          &lt;/li>
          &lt;li>
ha multiplicity = [0..1], akkor a szab&amp;aacute;ly els&amp;#337; fele szerint valid -&amp;gt; p.lower =&amp;#160;0

          &lt;/li>
        &lt;/ul>

      &lt;/li>
    &lt;/ul>
&lt;/body>
&lt;/html></TODO>
  </MagicDrawProfile:TODO_Owner>
  <MagicDrawProfile:TODO_Owner xmi:id="_POU8zp7dEeypSrJXJSy5zw" base_Element="9d4029e4-1f85-49d4-a0bd-b0420fd25b3f">
    <TODO>&lt;html>
  &lt;head>
		&lt;style>
			p {padding:0px; margin:0px;}
		&lt;/style>
	&lt;/head>
  &lt;body>
    &lt;ul>
      &lt;li>
[Istvan] Az &amp;ouml;sszes Role-ra vonatkoz&amp;oacute; valid&amp;aacute;ci&amp;oacute;s szab&amp;aacute;lyt fel&amp;uuml;l kellene vizsg&amp;aacute;lni, hogy ne &amp;aacute;ltal&amp;aacute;nosan minden asszoci&amp;aacute;ci&amp;oacute;s v&amp;eacute;gpontra vonatkozzanak, hanem csak a relev&amp;aacute;ns (? - bo/dto) elemekre vonatkozzanak.

      &lt;/li>
    &lt;/ul>
    &lt;p>
&amp;#160;

    &lt;/p>

&lt;/body>
&lt;/html></TODO>
  </MagicDrawProfile:TODO_Owner>
  <MagicDrawProfile:SmartPackage xmi:id="_POets57dEeypSrJXJSy5zw" base_Package="9150a271-1697-4349-a0bb-40c5bd50eea3" query="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;yes&quot;?>&#xA;&lt;unionExpressionSpecification xmlns=&quot;http://www.nomagic.com/schemas/MagicDraw/StructuredExpression/2013&quot;>&#xA;    &lt;taggedValues>&#xA;        &lt;entry key=&quot;name&quot;>&#xA;            &lt;value>Query&lt;/value>&#xA;        &lt;/entry>&#xA;        &lt;entry key=&quot;ROOT_UNION&quot;>&#xA;            &lt;value>true&lt;/value>&#xA;        &lt;/entry>&#xA;    &lt;/taggedValues>&#xA;    &lt;value xsi:type=&quot;callExpressionSpecification&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;>&#xA;        &lt;taggedValues>&#xA;            &lt;entry key=&quot;name&quot;>&#xA;                &lt;value>Find1&lt;/value>&#xA;            &lt;/entry>&#xA;        &lt;/taggedValues>&#xA;        &lt;argument xsi:type=&quot;stringExpressionSpecification&quot;>&#xA;            &lt;value>*&lt;/value>&#xA;        &lt;/argument>&#xA;        &lt;argument xsi:type=&quot;collectionExpressionSpecification&quot; ordered=&quot;false&quot; unique=&quot;false&quot;>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;4400ef4e-b3ea-47b1-be03-35568a9f37f9&quot;/>&#xA;        &lt;/argument>&#xA;        &lt;argument xsi:type=&quot;collectionExpressionSpecification&quot; ordered=&quot;false&quot; unique=&quot;false&quot;>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;cf3b4931-e2f1-4e9e-810d-6a9da4d709f1&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;374b2eb5-7038-4303-ab46-1f680e20639b&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;a367f045-aaac-42e7-a457-bb62082410f5&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;da493eef-399f-4821-8bec-082eda57f495&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;e8fe3fce-d838-499c-9705-17023762da4a&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;7ec080e2-ddd6-4882-a8b2-46182097cdd1&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;eafa6b9c-fbe5-4b77-a3cb-f9bb8059b831&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;69eaa126-340d-4baf-8761-672b3aa178fd&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;b4a7c8fd-56bb-4cdd-a8fd-557fe174c27d&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;78157a35-2553-47a8-9ad3-7e66a2c35472&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;99d42ae0-ceb5-493c-a135-e035d7a135c4&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;97a47731-da5f-442e-95e8-7da0636a02f1&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;49c0cf42-3d32-4ae1-ad8f-f334b6da481b&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;4b6b0eff-e901-4a34-843c-ecb0e1de172f&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;89d6db2a-5ac1-40dd-85e8-9d4da773a20b&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;1fc0fb0e-99df-41e0-9917-851387d1cb91&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;1ad7ef33-2546-47ef-9b63-d199e63fc6be&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;19fd620d-ab03-46c0-b951-e821f70b1558&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;a3a46e0a-c634-498f-838d-c51bc9566a97&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;b9fa5f68-c943-4cac-9c49-3be02b8d5d62&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;524c66d7-9abd-48d6-9107-cbc7d93b71d3&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;68021e43-52ff-46ea-9343-b5fab0d26689&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;922317d7-53d6-42b6-973d-21a0870ba1c5&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;6f02e1ca-49cd-46ff-bfa3-74adcfc26f4c&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;ddadb9f0-76cf-45c1-9a2e-3385e42f2fa6&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;f5162812-9899-4da7-8a60-d9d4f5ca8286&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;4a14645e-a347-4271-8e04-9a4adf32aa38&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;77edb760-8bd7-4443-9a1a-88d68001f81d&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;9484f535-df90-442b-9076-0c3f72d0ce36&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;0809e239-154d-41d8-b044-794729d6dfee&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;870fa954-8ffd-4b9a-ab36-8fddcf221f84&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;baa4968e-1870-434f-93f6-b7f8529f7433&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;dd9d1eba-f16c-410c-965b-52314596a90f&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;c5211b98-bb91-4feb-ac99-fc8f97e73b9f&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;e3b34cfa-a7ea-45f4-9447-1d7f08b56a11&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;219fc77a-3c2c-4ca7-8a5c-a518eeed3c3c&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;04a187ee-1574-4cb0-bec2-2d74a83d21dd&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;28e10036-0445-4447-a44c-03fcbbfcefdd&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;e50b4d96-f0ba-4755-a2ee-ec736c7cd555&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;41764232-b101-49a0-86d3-0d0dedc480cb&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;8efa6d73-dabd-41a6-8bc9-9824b218048c&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;0275ba0e-371f-40a0-bbb4-d772bc59d845&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;59e21246-fd5c-47f8-81db-8c7a424902bd&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;64e00c11-33c5-4ca1-81d7-0cda935b1bb8&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;6724b405-e222-4d89-a125-53a76622ae87&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;871239c8-d5a0-4d24-b424-519bd6e8b11d&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;fcaa3be5-82a1-4c32-b95a-80914bf2234b&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;3769bf68-962c-4aab-a9ff-ea74cd932009&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;b83933fa-eb5c-45f2-97e1-e0f043abb6c8&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;2443b2fe-3bc4-4dbe-b591-418df2d81215&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;033d2629-e089-4584-b43f-02f07d51ea19&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;92daba77-11c9-48bd-bfb4-bf7e33c0769c&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;72a127f6-6e40-4828-8c19-b5eb1a440e57&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;23afdba5-d6cc-491a-adfe-efc951089297&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;787525a3-ec14-4d45-be0f-13cfda15f4d7&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;b9ceaf13-40d3-44f8-97da-e3fe441c558c&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;a9b30774-326c-4e28-ad1c-a0be4352ba86&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;11bae723-2c73-4ea5-a0a5-bc42f30a8644&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;6d4791e5-a524-4b8d-a53e-5fd6967d233a&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;2d583c88-3278-4134-9c99-6c0ea4723304&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;d159c71b-1238-4c63-b095-83381ecd7c09&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;2a5a1ddc-5368-4dbd-bd35-49b4a9302246&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;a6e9952c-3961-4fcb-b0a3-1f57d3faf580&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;39146598-a206-4143-a5e2-a3457ead0815&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;b54d18cb-f1c1-4878-9e07-1233137b9c67&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;903d400f-cd23-491a-a067-e3b481ae7497&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;a3aeadeb-0751-460d-b84f-258c3569e4a1&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;754e21d6-d5b2-4050-a9f8-9e4796d6b569&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;0f1b45e1-7a96-4c5f-973b-120d6f759605&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;ce8841e6-5d21-4b1e-b6dc-d9bae615ed58&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;f7b120ff-10d7-4c56-a219-807bb6f9963f&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;448cba23-691e-4cef-a5b5-587687a7d183&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;774df233-9578-49f9-a9b0-b8e2db158878&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;5e56f39f-a5e6-49b9-bafc-e91ee7355ecd&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;09150f99-e5e1-447c-b0bd-ffb8a14ece32&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;a00cbad5-1e46-4881-8437-c6beb597e9e2&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;2fe50e8a-4274-4078-82da-37f985d175a2&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;9456307b-ffca-4ccd-ad61-5cfd0542fc81&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;14a1dbaf-ba8e-4bbc-b3d9-721be1a061e2&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;d18447c6-3dc8-475e-b35f-50f51f1f73ef&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;7766159a-0096-424d-a752-4b89eca080d2&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;782d256f-93d5-45f3-9c20-5953f62edefc&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;432aaff4-97d5-44a1-a308-664ced0f74d3&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;94eabeb2-ba99-48df-9dbb-a1c3d1b01694&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;c740c2c8-beca-4424-b686-b2af02b14585&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;d83db50f-6b44-49ae-ab7b-1515a42ba3c1&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;e5a55260-a40c-403d-86ea-22ad1186d805&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;06d72160-3e3b-4d2c-9ee9-bb7c52c26ef9&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;8fa2ce9d-7022-46ea-bc46-16e8c6d222a8&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;fed0a0fd-902d-43d5-8c54-c08bce53f18c&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;c353c7bb-e9eb-4115-98a8-ec46a9c9f6d3&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;02bb9a84-48f3-4ebc-b847-162caabab152&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;66864968-5bc2-44a6-ae77-b773756904e2&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;9481a935-970c-428d-b539-ca2dced55db6&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;89b93fff-c5a7-4063-9854-e2b0b98753d2&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;ff0c9166-ebe4-4156-92bc-7ae653b96417&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;72d0b848-ec62-4195-b007-2a0c97417b66&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;0b304d36-0d3c-4bb6-b15b-16f18612b878&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;5ebe934d-7c5a-4e93-8a48-6c9593fc60c6&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;d159ce86-678e-477a-8778-f839de65c5a6&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;b506ef54-ea7c-4379-8be8-371787bb82da&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;7f9b4527-17b6-4662-9083-c5771730ed92&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;9774105b-52b1-4e17-9aa5-d7264d2163ab&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;e97aeece-7c21-4642-839a-73bc430a89d3&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;f74b39e3-1c8b-4917-801f-a7a2783e2622&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;83e9bc9f-f1f1-4526-be69-6af467e09a2a&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;ae08f99b-c9a5-4fde-b7a4-cc2e8d26c416&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;d049c62e-84d8-4d4e-b6fd-f1cd6fb35466&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;b78cabf2-d030-45dd-a5be-c1117242787f&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;a2be02d5-7580-4e27-945a-dd3360b4b2c6&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;fc69d46b-9139-4655-b6d9-3247703644fa&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;13ff994b-2213-4da1-a805-b53093b27fce&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;ca231d62-1a6d-4a6e-bd17-67debbe49997&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;2c76641e-105a-4863-81ef-4d0a94b22f33&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;6a98803a-51a8-4ee6-af8e-9330b82ec190&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;aa900a05-3170-480b-ae0b-8f62b543e06c&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;858e1344-9b07-4f08-9b4b-92afe4d46d58&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;053ca38e-eda7-4107-a6ee-520060787d1e&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;209d97de-5824-45af-b60a-93f5976d0c1f&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;999f8b39-e052-4104-81c5-f499a776ba59&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;455cd67a-42f0-4e5f-b1c9-acc11442a0d2&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;37271af1-8904-4e79-85d9-7ddfcb21fc26&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;23f48247-ec31-4f4c-8fb8-f87776c1cce8&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;f96c2219-315a-4f20-ae56-b02bc76c079d&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;9bdebadc-4e4f-4054-aa16-460f78485c7b&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;804e74a1-8e79-4a91-826f-78bd652d0217&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;fc2ed304-ecbe-4baf-a519-5142af0bebe0&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;5d723926-59e0-4244-a1b9-e7c1c778dd4b&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;42e43b7f-a362-4980-aa7c-2a9d25876708&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;90f5fcce-edae-4d34-856b-2e7133953f84&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;39a18917-d8bf-4723-a20d-5989cb0de5b4&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;ce1e78b4-7da5-4c6c-b63c-f45f79326df7&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;e68272fd-4097-43b0-9e8c-2d8eea566945&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;d7591f81-53ec-4d83-81ff-3f47a9e8ca48&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;9bbedd3b-f5c0-42bd-9aee-28c8293a0ce6&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;37d3d944-df2b-4d7d-8a8e-23b3c8b7b8c6&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;d3b003fc-9e63-48b2-83b4-00406ba1284b&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;76b90c90-c81a-414a-9f93-162b4a721480&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;6cf84668-1134-4bbc-81d2-e4a70f6190f7&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;450fbeab-b9eb-4412-bb25-8d7f1fe9ad9f&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;94837395-eb5a-467c-888a-4480c2ec420c&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;ebe582ec-508f-4f4a-ad99-d54a1e5b7d33&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;83b23172-11af-41dc-8803-ed76e9477509&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;b7378ad8-cc37-43b3-8c7a-e6acd12a2d2a&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;e896df7c-229f-45bc-8af8-39e065c06e0e&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;2563b25d-466b-4626-a16b-43aa1c555e66&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;65228039-737a-42ac-b658-7150f3071b3b&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;9bbe62fd-abdd-4717-818d-9d5262b5ee46&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;cebc4d78-347f-4f4b-a784-30c43bd8ba46&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;49889b74-6d92-4942-9736-01b35fc2a20c&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;6e22ca59-3b58-4ad5-9b34-8830f37e301c&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;604fef98-2c33-4899-8114-244aec508058&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;401901dc-25de-4e47-8b64-266c666f1677&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;cf4b0f5c-be12-488a-908d-123a62adf082&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;59a7591c-9e4b-42b3-80bc-d040afd30d5f&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;f1742bfa-bb4b-4a86-bcd0-be20cd7f87d5&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;2b23b57c-c848-44d0-894c-cba5c2d1828c&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;4ff14743-e669-4730-adf2-6b1aad8593b1&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;56463727-a496-4172-9bad-278e75a52d10&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;2ee7bd70-a912-4120-be5b-97734b0ac17c&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;9091eee8-c67c-4c9d-9f9b-ec4554f08d1a&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;9daac49c-dec7-4b8f-a35e-7110c1391d2c&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;51e5aab3-d4c0-4aac-b65a-cecbaadfe10f&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;3c70bab0-77c7-4498-a9f8-4f5f6a6fb7c3&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;df7b1224-314b-46c3-aa70-9fe50cd85713&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;2246dcd1-5d5c-4d94-b612-81e09c53c9f8&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;f0f1c868-32f7-4b61-a4ba-da41615391c9&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;4d6649e9-2563-447f-8b9f-bc27c063dc40&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;61c200be-982e-4f9a-8c42-b90559a14066&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;22201264-7d8f-457d-b09b-b4c32645dc18&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;4a66566d-300b-4cc3-ba6d-81339ef5aa46&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;847498aa-28f2-4df7-811f-72e955a43334&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;331d5140-12df-4b21-9e43-fbbd1e9f5f38&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;96f3fcb6-c831-4115-bc64-bcb8795b9421&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;fa7ec298-c691-4c27-9777-29c7e26f721a&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;f3c9c4a3-d9ae-4467-8d23-0f014bee4b26&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;91498099-254b-41ce-937a-234c779f5ae8&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;8f248181-8a6b-4407-bb36-ba1f6f0de58c&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;29db990d-f216-4d91-9ceb-055e787e6f0e&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;be2eea98-9356-4356-b9ba-68d8520f902b&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;4ef8e18d-7157-404f-9997-84805829f771&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;ab765ccd-6bf2-41f7-98d0-c1705b9729f6&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;e68268c5-0ca7-4fc7-a5e3-4c57d04339cc&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;a1f1e954-f431-4269-86f6-bf25bdc38db1&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;6666d594-6b96-4cc1-87f5-0f02ee7476d6&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;a4cf54e7-39f8-4f34-8440-7cd2f654e11d&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;bab2d5c9-b278-4c11-b2e3-a197bb8d89d2&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;4e279482-03d6-4052-ac22-45e77fcb29d8&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;cb4f57ef-124a-40cc-a7ee-1fd3f8e90397&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;ce030466-383e-4657-aa08-3fc704b22bcb&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;3d348e75-071e-4359-9f46-4274fb2bf6dc&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;7eec7cc9-ed9e-4c16-b7ee-50ec3a32cafb&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;eced096e-2f47-481f-ae76-ae571f3683ea&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;0aef1a02-1280-40a9-a408-2f8f6fb4fda6&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;7d344917-4415-4415-b52c-6e35284da42a&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;e3e206d4-ae4a-428d-8dea-f98f65c25b34&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;f97157a5-10eb-43d6-9c3a-63f500025f32&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;a42e0792-e3cb-4003-9512-4b2326734463&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;75630bce-b1fe-4e71-912a-ca15f043ae6a&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;17a2221f-b514-44fb-916f-83406bfb33f1&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;02f64d1e-4e1b-4a25-a165-4e70e0a0692c&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;f8c4ef00-8cc5-4367-8d4a-225715ebf5c1&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;85b958e7-7708-4ccb-af4b-795003cc932e&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;e336aea2-d74d-4491-9cb8-e667db7aaa51&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;7c01ddd9-f476-405c-bda1-7696b0b931f3&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;ce6a55b5-4c30-4355-92d8-07df7b8a5ddd&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;31b7a319-9ba6-467a-8164-f4468e3d8153&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;9cc3e474-acfb-4fc3-aca1-12616b834f5e&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;d876afe1-6964-4e5f-81ad-8c1f67e6ce33&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;1d168502-c23f-4d0e-869e-96e339799846&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;f1c3a334-8180-4732-a8f2-c092c4d74d6c&quot;/>&#xA;        &lt;/argument>&#xA;        &lt;argument xsi:type=&quot;booleanExpressionSpecification&quot; value=&quot;true&quot;/>&#xA;        &lt;argument xsi:type=&quot;stringExpressionSpecification&quot;>&#xA;            &lt;value>&amp;lt;?xml version='1.0' encoding='UTF-8'?&amp;gt;&#xA;&#xA;&amp;lt;PropertyVisitorAcceptor&amp;gt;&#xA;&#x9;&amp;lt;mdElement elementClass='PropertyManager'&amp;gt;&#xA;&#x9;&#x9;&amp;lt;mdElement elementClass='StringProperty'&amp;gt;&#xA;&#x9;&#x9;&#x9;&amp;lt;propertyID&amp;gt;QPROP:Element:TO_DO&amp;lt;/propertyID&amp;gt;&#xA;&#x9;&#x9;&#x9;&amp;lt;value&amp;gt;*&amp;lt;/value&amp;gt;&#xA;&#x9;&#x9;&#x9;&amp;lt;multiline xmi:value='true'/&amp;gt;&#xA;&#x9;&#x9;&amp;lt;/mdElement&amp;gt;&#xA;&#x9;&amp;lt;/mdElement&amp;gt;&#xA;&amp;lt;/PropertyVisitorAcceptor&amp;gt;&lt;/value>&#xA;        &lt;/argument>&#xA;        &lt;argument xsi:type=&quot;stringExpressionSpecification&quot;>&#xA;            &lt;value>&lt;/value>&#xA;        &lt;/argument>&#xA;        &lt;argument xsi:type=&quot;booleanExpressionSpecification&quot; value=&quot;false&quot;/>&#xA;        &lt;argument xsi:type=&quot;booleanExpressionSpecification&quot; value=&quot;false&quot;/>&#xA;        &lt;argument xsi:type=&quot;booleanExpressionSpecification&quot; value=&quot;true&quot;/>&#xA;        &lt;argument xsi:type=&quot;booleanExpressionSpecification&quot; value=&quot;false&quot;/>&#xA;        &lt;argument xsi:type=&quot;booleanExpressionSpecification&quot; value=&quot;false&quot;/>&#xA;        &lt;argument xsi:type=&quot;booleanExpressionSpecification&quot; value=&quot;false&quot;/>&#xA;        &lt;expression xsi:type=&quot;interpretElementExpressionSpecification&quot;>&#xA;            &lt;element xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;d7fec376-d2a8-481f-9652-2ee1484b35e4&quot;/>&#xA;        &lt;/expression>&#xA;    &lt;/value>&#xA;&lt;/unionExpressionSpecification>&#xA;"/>
  <ValidationProfile:validationSuite xmi:id="_PO_D9J7dEeypSrJXJSy5zw" base_Package="fc104f10-8253-4cc8-9f4a-f42b590632f4"/>
  <ValidationProfile:validationSuite xmi:id="_PO_D9Z7dEeypSrJXJSy5zw" base_Package="70094490-68f7-43ef-844a-eb114fc2ff99"/>
  <ValidationProfile:validationSuite xmi:id="_PO_D9p7dEeypSrJXJSy5zw" base_Package="c7a2a1e2-f580-430a-861a-fd14ab46b901"/>
  <ValidationProfile:validationSuite xmi:id="_PO_D957dEeypSrJXJSy5zw" base_Package="879f58bb-beba-4f3b-bed9-6d3c7d82f941"/>
  <ValidationProfile:validationSuite xmi:id="_PO_D-J7dEeypSrJXJSy5zw" base_Package="e7ec005c-e802-471a-bcd8-a7eaa3727c3a"/>
  <ValidationProfile:validationSuite xmi:id="_PO_D-Z7dEeypSrJXJSy5zw" base_Package="9d4029e4-1f85-49d4-a0bd-b0420fd25b3f"/>
  <ValidationProfile:validationRule xmi:id="_PPI0957dEeypSrJXJSy5zw" base_Constraint="7c82be08-c27d-45bd-94b7-cfa4b25ea058" abbreviation="PIM::VISIBILITY" errorMessage="Private association end." severity="warning"/>
  <ValidationProfile:validationRule xmi:id="_PPI0-J7dEeypSrJXJSy5zw" base_Constraint="51fd9a86-8aab-410a-9133-5a2c0f3fe233" abbreviation="PIM::NAME" errorMessage="Domain does not have unique shortname in the application"/>
  <ValidationProfile:validationRule xmi:id="_PPI0-Z7dEeypSrJXJSy5zw" base_Constraint="1fadb8c7-faef-4266-baef-84b8c095e7e3" abbreviation="PIM::STATEMACHINE" errorMessage="External operation reference."/>
  <ValidationProfile:validationRule xmi:id="_PPI0-p7dEeypSrJXJSy5zw" base_Constraint="c5f17de0-4f18-41f4-9a83-f31f9863f166" abbreviation="PIM::REFERENCE" errorMessage="Circular mandatory dependency between classes"/>
  <ValidationProfile:validationRule xmi:id="_PPI0-57dEeypSrJXJSy5zw" base_Constraint="b853302a-5547-4077-be84-96bfa3738c16" abbreviation="PIM::NAVIGATION"/>
  <ValidationProfile:validationRule xmi:id="_PPI0_J7dEeypSrJXJSy5zw" base_Constraint="e2153d55-a7a9-46cf-b7ae-10ef2753a144" abbreviation="PIM::INHERITANCE" errorMessage="Class has more than one subtypes with implementation stereotype."/>
  <ValidationProfile:validationRule xmi:id="_PPI0_Z7dEeypSrJXJSy5zw" base_Constraint="e9dcf736-003f-4905-8408-c957b7d3f246" abbreviation="PIM::NAME" errorMessage="Wrong class name."/>
  <ValidationProfile:validationRule xmi:id="_PPI0_p7dEeypSrJXJSy5zw" base_Constraint="99af5224-bf2a-4da9-a5ae-b353b07c7e97" abbreviation="PIM::INHERITANCE" errorMessage="Class can not be inherited from an implementation class. "/>
  <ValidationProfile:validationRule xmi:id="_PPI0_57dEeypSrJXJSy5zw" base_Constraint="eaff652a-56f1-4948-b033-577ed0872c99" abbreviation="PIM::REPRESENTATION " errorMessage="Class has more than one representation attributes." severity="warning"/>
  <ValidationProfile:validationRule xmi:id="_PPI1AJ7dEeypSrJXJSy5zw" base_Constraint="aa6cce52-f933-489f-bce2-cfdc3c533479" abbreviation="PIM::REPRESENTATION" errorMessage="Class has no representation attribute." severity="warning"/>
  <ValidationProfile:validationRule xmi:id="_PPI1AZ7dEeypSrJXJSy5zw" base_Constraint="5a51487a-dc59-4713-822b-6224d80e90ca"/>
  <ValidationProfile:validationRule xmi:id="_PPI1Ap7dEeypSrJXJSy5zw" base_Constraint="4387c2a1-760c-44ea-9ff2-17ae9f845969" abbreviation="PIM::NAME" errorMessage="Attribute does not have unique shortname in the application"/>
  <ValidationProfile:validationRule xmi:id="_PPI1A57dEeypSrJXJSy5zw" base_Constraint="574cac45-8509-49f1-a88f-51fb672a90fc"/>
  <ValidationProfile:validationRule xmi:id="_PPI1BJ7dEeypSrJXJSy5zw" base_Constraint="351ce3d0-f80a-47d8-8679-1ebfce03d3d6" abbreviation="PIM::ASSOCIATION" errorMessage="Mandatory association end should not be a list."/>
  <ValidationProfile:validationRule xmi:id="_PPI1BZ7dEeypSrJXJSy5zw" base_Constraint="49b3dc66-5df6-44b6-b741-d9020f5fda83" abbreviation="PIM::DERIVATION" errorMessage="Invalid validation rule expression"/>
  <ValidationProfile:validationRule xmi:id="_PPI1Bp7dEeypSrJXJSy5zw" base_Constraint="8560b79d-2e3b-439a-ab24-3f44087cbe8d" abbreviation="PIM::NAME" errorMessage="Wrong attribute name."/>
  <ValidationProfile:validationRule xmi:id="_PPI1B57dEeypSrJXJSy5zw" base_Constraint="78fd3064-d86e-4c89-b966-98e647b704fa" abbreviation="PIM::NAME" errorMessage="Too long short name (>6)." severity="warning"/>
  <ValidationProfile:validationRule xmi:id="_PPI1CJ7dEeypSrJXJSy5zw" base_Constraint="98a32112-62c2-4b58-b6c5-c7f46bf673be" abbreviation="PIM::NAVIGATION" errorMessage="Derived association has navigation error in its value expression."/>
  <ValidationProfile:validationRule xmi:id="_PPI1CZ7dEeypSrJXJSy5zw" base_Constraint="f9d533c3-d007-40d5-9eaa-aa04f634837f"/>
  <ValidationProfile:validationRule xmi:id="_PPI1Cp7dEeypSrJXJSy5zw" base_Constraint="1f5bd828-c887-4da5-9f77-130b8f03d1c6"/>
  <ValidationProfile:validationRule xmi:id="_PPI1C57dEeypSrJXJSy5zw" base_Constraint="69751413-6208-402e-9c9e-356771a08e3e" abbreviation="PIM::SPECIFICATION" errorMessage="Derived association has no description."/>
  <ValidationProfile:validationRule xmi:id="_PPI1DJ7dEeypSrJXJSy5zw" base_Constraint="da8143b4-e5d2-41c3-a577-1fdbd50f0061" abbreviation="PIM::SPECIFICATION" errorMessage="Derived association has no expression"/>
  <ValidationProfile:validationRule xmi:id="_PPI1DZ7dEeypSrJXJSy5zw" base_Constraint="96df9f67-2e7e-4333-9a0a-e3d0cecb5019" abbreviation="PIM::NAVIGATION" errorMessage="Invalid aggregation."/>
  <ValidationProfile:validationRule xmi:id="_PPI1Dp7dEeypSrJXJSy5zw" base_Constraint="ab86ebd3-caf3-482a-8519-f28ea887719a" abbreviation="PIM::MULTIPLICITY" errorMessage="Invalid composition."/>
  <ValidationProfile:validationRule xmi:id="_PPI1D57dEeypSrJXJSy5zw" base_Constraint="14314ef9-1a46-4731-a22c-3ba3718b5de4" abbreviation="PIM::MULTIPLICITY" errorMessage="Association is not allowed to be mandatory on both ends."/>
  <ValidationProfile:validationRule xmi:id="_PPI1EJ7dEeypSrJXJSy5zw" base_Constraint="82814128-504d-4b69-9867-7a3273df30f7" abbreviation="PIM::MULTIPLICITY" errorMessage="Mandatory association end should not be a list."/>
  <ValidationProfile:validationRule xmi:id="_PPI1EZ7dEeypSrJXJSy5zw" base_Constraint="9a03516e-d1ff-4a0a-b768-b54091380768" abbreviation="PIM::NAVIGATION" errorMessage="Mandatory association end should be navigable."/>
  <ValidationProfile:validationRule xmi:id="_PPI1Ep7dEeypSrJXJSy5zw" base_Constraint="929e186e-dce0-461f-b485-d64b843ccd4b" abbreviation="PIM::NAME" errorMessage="Missing role name."/>
  <ValidationProfile:validationRule xmi:id="_PPI1E57dEeypSrJXJSy5zw" base_Constraint="ad45a1a4-b0ae-4040-870f-60e7e85738f3" abbreviation="PIM::NAME"/>
  <ValidationProfile:validationRule xmi:id="_PPI1FJ7dEeypSrJXJSy5zw" base_Constraint="60882d77-ad95-4c8b-ba40-a0efb7365881" abbreviation="IN_TESTING_PHASE"/>
  <ValidationProfile:validationRule xmi:id="_PPI1FZ7dEeypSrJXJSy5zw" base_Constraint="bda4f726-ad26-4d56-8419-e9cdd5d75902" abbreviation="IN_TESTING_PHASE"/>
</xmi:XMI>
