<?xml version="1.0" encoding="UTF-8"?>
<xmi:XMI xmi:version="20131001" xmlns:xmi="http://www.omg.org/spec/XMI/20131001" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:MagicDrawProfile="http://www.omg.org/spec/UML/20131001/MagicDrawProfile" xmlns:ValidationProfile="http://UML_Standard_Profile/Validation_Profile/_11_5_f720368_1159529670215_231387_1" xmlns:ecore="http://www.eclipse.org/emf/2002/Ecore" xmlns:uml="http://www.eclipse.org/uml2/5.0.0/UML" xsi:schemaLocation="http://www.omg.org/spec/UML/20131001/MagicDrawProfile UML_Standard_Profile.MagicDraw_Profile.profile.uml#_z57a0if0EeuFcMB2y3vzaw http://UML_Standard_Profile/Validation_Profile/_11_5_f720368_1159529670215_231387_1 UML_Standard_Profile.Validation_Profile.profile.uml#_z6bxIif0EeuFcMB2y3vzaw">
  <uml:Profile xmi:id="_18_5_1_ede0357_1506094392783_652113_5402" name="PIM Validation Profile" visibility="public" URI="" metamodelReference="_18_5_1_ede0357_1506094392784_745991_5404">
    <eAnnotations xmi:id="_z6cYdCf0EeuFcMB2y3vzaw" source="http://www.eclipse.org/uml2/2.0.0/UML">
      <contents xmi:type="ecore:EPackage" xmi:id="_z6cYdSf0EeuFcMB2y3vzaw" name="PIMValidationProfile" nsURI="http:///schemas/PIMValidationProfile/_z54-kCf0EeuFcMB2y3vzaw/0" nsPrefix="PIMValidationProfile">
        <eAnnotations xmi:id="_z6cYdif0EeuFcMB2y3vzaw" source="http://www.eclipse.org/uml2/2.0.0/UML">
          <details xmi:id="_z6cYdyf0EeuFcMB2y3vzaw" key="originalName" value="PIM Validation Profile"/>
        </eAnnotations>
        <eSubpackages xmi:id="_z6cYeCf0EeuFcMB2y3vzaw" name="PIMValidations" nsURI="http:///PIMValidationProfile/PIMValidations.ecore" nsPrefix="PIMValidationProfile.PIMValidations">
          <eAnnotations xmi:id="_z6cYeSf0EeuFcMB2y3vzaw" source="http://www.eclipse.org/uml2/2.0.0/UML">
            <details xmi:id="_z6cYeif0EeuFcMB2y3vzaw" key="originalName" value="PIM Validations"/>
          </eAnnotations>
          <eAnnotations xmi:id="_z6cYeyf0EeuFcMB2y3vzaw" source="http://www.eclipse.org/uml2/4.0.0/UML" references="_18_5_1_ede0357_1506094392784_666626_5403"/>
          <eSubpackages xmi:id="_z6cYfCf0EeuFcMB2y3vzaw" name="TESTINGSuite" nsURI="http:///PIMValidationProfile/PIMValidations/TESTINGSuite.ecore" nsPrefix="PIMValidationProfile.PIMValidations.TESTINGSuite">
            <eAnnotations xmi:id="_z6cYfSf0EeuFcMB2y3vzaw" source="http://www.eclipse.org/uml2/2.0.0/UML">
              <details xmi:id="_z6cYfif0EeuFcMB2y3vzaw" key="originalName" value="TESTING Suite"/>
            </eAnnotations>
            <eAnnotations xmi:id="_z6cYfyf0EeuFcMB2y3vzaw" source="http://www.eclipse.org/uml2/4.0.0/UML" references="_18_5_1_ede0357_1506094392785_882649_5405"/>
            <eAnnotations xmi:id="_z6cYgCf0EeuFcMB2y3vzaw" source="http://www.eclipse.org/emf/2002/GenModel">
              <details xmi:id="_z6cYgSf0EeuFcMB2y3vzaw" key="documentation" value="self.visibility &lt;> VisibilityKind::private"/>
            </eAnnotations>
            <eSubpackages xmi:id="_z6cYgif0EeuFcMB2y3vzaw" name="testPackage" nsURI="http:///PIMValidationProfile/PIMValidations/TESTINGSuite/testPackage.ecore" nsPrefix="PIMValidationProfile.PIMValidations.TESTINGSuite.testPackage">
              <eAnnotations xmi:id="_z6cYgyf0EeuFcMB2y3vzaw" source="http://www.eclipse.org/uml2/4.0.0/UML" references="_18_5_1_ede0357_1506094392786_274922_5414"/>
              <eAnnotations xmi:id="_z6cYhCf0EeuFcMB2y3vzaw" source="http://www.eclipse.org/emf/2002/GenModel">
                <details xmi:id="_z6cYhSf0EeuFcMB2y3vzaw" key="documentation" value="THIS.name              &#xA;bo.allInstances()->collect(e | e.oclAsType(Package))->union(Model.allInstances()->asSet())&#xA;self.owner.oclAsType(Class).general"/>
              </eAnnotations>
            </eSubpackages>
          </eSubpackages>
          <eSubpackages xmi:id="_z6cYhif0EeuFcMB2y3vzaw" name="RoleValidation" nsURI="http:///PIMValidationProfile/PIMValidations/RoleValidation.ecore" nsPrefix="PIMValidationProfile.PIMValidations.RoleValidation">
            <eAnnotations xmi:id="_z6cYhyf0EeuFcMB2y3vzaw" source="http://www.eclipse.org/uml2/2.0.0/UML">
              <details xmi:id="_z6cYiCf0EeuFcMB2y3vzaw" key="originalName" value="Role Validation"/>
            </eAnnotations>
            <eAnnotations xmi:id="_z6cYiSf0EeuFcMB2y3vzaw" source="http://www.eclipse.org/uml2/4.0.0/UML" references="_18_5_1_ede0357_1506094392785_566297_5407"/>
            <eAnnotations xmi:id="_z6cYiif0EeuFcMB2y3vzaw" source="http://www.eclipse.org/emf/2002/GenModel">
              <details xmi:id="_z6cYiyf0EeuFcMB2y3vzaw" key="documentation" value="self.oclAsType(Association).memberEnd->forAll(r | r.name.size() > 0)&#xA;let mandatoryEnds : Set(Property) = self.memberEnd->select(p | p.lower > 0 and not p.isDerived)->asSet() in&#xA;    self.ownedEnd->excludesAll(mandatoryEnds)    &#xA;&#xA;self.memberEnd->forAll(p | p.lower = 0 or&#xA;                           (p.lower &lt;> 0 and p.upper = 1))    &#xA;&#xA;self.memberEnd->select(p | p.lower &lt;> 0)->size() &lt; 2&#xA;not (self.aggregation = AggregationKind::composite) or &#xA;    (self.aggregation = AggregationKind::composite and &#xA;     self.association.memberEnd&#xA;         ->forAll(e | self.association.memberEnd&#xA;                          ->select(oe | oe &lt;> e)&#xA;                          ->forAll( oe | e.aggregation &lt;> AggregationKind::composite or&#xA;                                        (e.aggregation = AggregationKind::composite and&#xA;                                         oe.lower &lt;> 0 and &#xA;                                         oe.upper = 1))))                &#xA;&#xA;self.memberEnd&#xA;    ->forAll(e | self.memberEnd&#xA;                     ->select(oe | oe &lt;> e)&#xA;                     ->forAll( oe | e.aggregation &lt;> AggregationKind::shared or&#xA;                                   (e.aggregation = AggregationKind::shared and&#xA;                                    e.lower = 0 and &#xA;                                    oe.upper = 1)))&#xA;&#xA;&#xA;self.specification.oclAsType(LiteralString).value->forAll(l | l.matches('[^ \\t\\n\\f\\r\\x0B]+'))&#xA;--self.specification.oclAsType(OpaqueExpression)._'body'->forAll(l | l.size() > 0)&#xA;&#xA;self.specification.oclAsType(OpaqueExpression)._'body'->exists(l | l.matches('[^\\t\\n\\f\\r\\x0B]+'))&#xA;&#xA;not  self.oclIsTypeOf(JudoProfile::derived) or&#xA;    (self.oclIsTypeOf(JudoProfile::derived) and&#xA;     self.association.oclIsUndefined()) or&#xA;    (self.oclIsTypeOf(JudoProfile::derived) and&#xA;     self.association.ownedEnd->includesAll( self.association.memberEnd->select(e | e &lt;> self)))        &#xA;not  self.oclIsTypeOf(JudoProfile::derived) or&#xA;    (self.oclIsTypeOf(JudoProfile::derived) and&#xA;     self.association.oclIsUndefined()) or&#xA;    (self.oclIsTypeOf(JudoProfile::derived) and&#xA; not self.association.oclIsUndefined() and self.visibility = VisibilityKind::protected) &#xA;if (self.featuringClassifier.oclIsTypeOf(Class)  and&#xA;   self.association &lt;> null ) then &#xA;let theOwner : PackageableElement = self.featuringClassifier&#xA;                                        .oclAsType(PackageableElement) in&#xA;  let allOwners : Collection(PackageableElement) = theOwner->closure(owningPackage)&#xA;                                                           ->collect(oclAsType(PackageableElement))&#xA;                                                           ->including(theOwner) in&#xA;    let isGeneratorSource : Boolean = allOwners->selectByType(JudoProfile::bo)->notEmpty() or&#xA;                                      allOwners->selectByType(JudoProfile::dto)->notEmpty() or&#xA;                                      allOwners->selectByType(JudoProfile::rest)->notEmpty() &#xA;                                      in&#xA;      let ancestors : Collection(Class) = theOwner.oclAsType(Class)&#xA;                                                  ->closure(general.oclAsType(Class)) in&#xA;        if isGeneratorSource then&#xA;          ancestors->collect(ownedAttribute.name)&#xA;                   ->forAll(n | not n.equalsIgnoreCase(self.name))        &#xA;        else&#xA;          true&#xA;        endif&#xA;else &#xA;  true&#xA;endif&#xA;&#xA;if (self.featuringClassifier.oclIsTypeOf(Class) and&#xA;    self.association &lt;> null ) &#xA;    then &#xA;let theOwner : PackageableElement = self.featuringClassifier                            -- Owner (Class) of the Property (Attribute or Role)&#xA;                                        .oclAsType(PackageableElement) in&#xA;  if not theOwner.oclAsType(Class).general->isEmpty() then&#xA;  let allOwners : Collection(PackageableElement) = theOwner->closure(owningPackage)     -- Package hierarchy above the owner Class&#xA;                                                           ->collect(oclAsType(PackageableElement)) in&#xA;    let isGeneratorSource : Boolean = true --allOwners->selectByType(JudoProfile::bo)->notEmpty() or -- Rule is Applicable WITHIN a Package to be generated&#xA;                                      -- allOwners->selectByType(JudoProfile::dto)->notEmpty() or&#xA;                                      -- allOwners->selectByType(JudoProfile::rest)->notEmpty() &#xA;                                      in&#xA;      let ancestors : Collection(Class) = theOwner.oclAsType(Class)                     -- All Ancestor of the ownerClass&#xA;                                                  ->closure(general.oclAsType(Class)) in&#xA;        let shortnames : Collection(JudoProfile::shortname) = JudoProfile::shortname.allInstances() in&#xA;          let s : Sequence(JudoProfile::shortname) = JudoProfile::shortname.allInstances()   -- All shortName constraints on this Property &#xA;                                                                           ->select( sn | sn.constrainedElement->includes(self) )&#xA;                                                                           ->asSequence() in&#xA;          if isGeneratorSource then&#xA;              if (s->size() = 1 and                                                       -- check if we have exactly 1 shortname stereotype WITH &#xA;                  s.constrainedElement->size() = 1) then                                  -- exactly 1 specification&#xA;                let sName : String = s->first().specification.oclAsType(LiteralString).value in&#xA;                  -- version one - compare self_s shortname with Attribute &amp; Role NAMES - Python code validates according to this interpretation&#xA;                  let ancAttributes : Collection(Property) = ancestors.ownedAttribute&#xA;                                                                      ->reject(association &lt;> null) in  &#xA;                    ancAttributes->forAll(name.equalsIgnoreCase(sName))         -- This attribute's / Role's shortname is Valid if no any ancestor's &#xA;                                                                                -- attribute's / Role's name is equal to it         &#xA;&#xA;                  -- version two - compare self's shortname with Attribute &amp; Role SHORTNAMES - !!! Put select &amp; collect's result in a let expression &#xA;--                  ancestors.ownedAttribute      -- CHECK WHETHER select filters nulls out -> in this case the following select should come one line after&#xA;--                           ->select(a | shortnames->exists(constrainedElement->includes(a)))    -- select those Attributes &amp; Roles where Shortname is given&#xA;--                           ->collect(a | shortnames->select(constrainedElement->includes(a))    -- collect the corresponding shortnames&#xA;--                                                   ->first()&#xA;--                                                   .specification&#xA;--                                                   .oclAsType(LiteralString).value)&#xA;--                           ->forAll(n | not n.equalsIgnoreCase(sName))                    -- This property's shortname is Valid if no any ancestor's property's&#xA;                                                                                            -- shortname equals to it         &#xA;              else     &#xA;                false                                                                     -- more than 1 shortname on the Property OR &#xA;                                                                                          -- more than 1 specification belongs to the stereotype &#xA;              endif&#xA;          else&#xA;            true&#xA;          endif     &#xA;  else&#xA;      true&#xA;  endif&#xA;else &#xA;  true                                          -- this Property does not belong to a Class OR&#xA;                                                -- is an Association Role -> restriction does not apply - as current understanding&#xA;endif&#xA;&#xA;function traverse(node, path) {&#xA;  if (path.length == 0) {&#xA;    return node&#xA;  } else {&#xA;    nextPathElementRole = getNamedElement(node.getOwnedAttribute(), path[0]);     &#xA;    &#xA;    if (nextPathElementRole != null) {&#xA;        nextPathElement = nextPathElementRole.getType(); &#xA;        if (nextPathElement) {&#xA;            restOfPath = path.slice();&#xA;            restOfPath.shift();&#xA;            return traverse(nextPathElement, restOfPath);&#xA;        } else {&#xA;            return null;&#xA;        }&#xA;    } &#xA;    &#xA;    return null;&#xA;  }&#xA;}&#xA;&#xA;function getNamedElement(list, name) {&#xA;    if (list.length == 0) {&#xA;        return null;&#xA;    } else {&#xA;        li = list.listIterator();&#xA;        while (li.hasNext()) {&#xA;            nItem = li.next();&#xA;            if (nItem.name === name) {&#xA;                return nItem;&#xA;            }&#xA;        }&#xA;        &#xA;        return null;&#xA;    }&#xA;}&#xA;&#xA;// Validation Rule&#xA;if (THIS.isDerived() &amp;&amp; THIS.association != null) {                           &#xA;  if (THIS.getDefaultValue()) {&#xA;    var expr = THIS.getDefaultValue().value&#xA;    var len = expr.length&#xA;    &#xA;    if (expr[0] == &quot;[&quot;) { &#xA;      var exprPath = expr.substring(1, len-1).split(&quot;.&quot;);&#xA;      traverse( THIS.owner, exprPath) ? true : false;&#xA;    } else true;  // Role is derived, Spec is given, but not in '{expr}' form, implies valid &#xA;  } else true;   // Role is derived, but has no Specification --> Python code (AEND_NAVIGATION_ERROR) permits such case as Valid&#xA;} else true; "/>
            </eAnnotations>
          </eSubpackages>
          <eSubpackages xmi:id="_z6cYjCf0EeuFcMB2y3vzaw" name="ConstraintValidation" nsURI="http:///PIMValidationProfile/PIMValidations/ConstraintValidation.ecore" nsPrefix="PIMValidationProfile.PIMValidations.ConstraintValidation">
            <eAnnotations xmi:id="_z6cYjSf0EeuFcMB2y3vzaw" source="http://www.eclipse.org/uml2/2.0.0/UML">
              <details xmi:id="_z6cYjif0EeuFcMB2y3vzaw" key="originalName" value="Constraint Validation"/>
            </eAnnotations>
            <eAnnotations xmi:id="_z6cYjyf0EeuFcMB2y3vzaw" source="http://www.eclipse.org/uml2/4.0.0/UML" references="_18_5_1_ede0357_1506094392785_637570_5408"/>
            <eAnnotations xmi:id="_z6cYkCf0EeuFcMB2y3vzaw" source="http://www.eclipse.org/emf/2002/GenModel">
              <details xmi:id="_z6cYkSf0EeuFcMB2y3vzaw" key="documentation" value="let judo_max_len : Integer = 6 in&#xA;self.specification.oclAsType(LiteralString).value->forAll(b | b.size() &lt;= judo_max_len)&#xA;&#xA;-- MD-ben modellezve:&#xA;-- self.specification.oclAsType(OpaqueExpression)._'body'->forAll(b | b.size() &lt;= judo_max_len)"/>
            </eAnnotations>
          </eSubpackages>
          <eSubpackages xmi:id="_z6cYkif0EeuFcMB2y3vzaw" name="AttributeValidation" nsURI="http:///PIMValidationProfile/PIMValidations/AttributeValidation.ecore" nsPrefix="PIMValidationProfile.PIMValidations.AttributeValidation">
            <eAnnotations xmi:id="_z6cYkyf0EeuFcMB2y3vzaw" source="http://www.eclipse.org/uml2/2.0.0/UML">
              <details xmi:id="_z6cYlCf0EeuFcMB2y3vzaw" key="originalName" value="Attribute Validation"/>
            </eAnnotations>
            <eAnnotations xmi:id="_z6cYlSf0EeuFcMB2y3vzaw" source="http://www.eclipse.org/uml2/4.0.0/UML" references="_18_5_1_ede0357_1506094392785_535919_5409"/>
            <eAnnotations xmi:id="_z6cYlif0EeuFcMB2y3vzaw" source="http://www.eclipse.org/emf/2002/GenModel">
              <details xmi:id="_z6cYlyf0EeuFcMB2y3vzaw" key="documentation" value="let theOwner : PackageableElement = self.featuringClassifier&#xA;                                        .oclAsType(PackageableElement) in&#xA;  let ancestors : Collection(PackageableElement) = theOwner->closure(owningPackage)&#xA;                                                           ->collect(oclAsType(PackageableElement))&#xA;                                                           ->including(theOwner) in&#xA;    let isGeneratorSource : Boolean = ancestors->selectByType(JudoProfile::bo)->notEmpty() or&#xA;                                      ancestors->selectByType(JudoProfile::dto)->notEmpty() or&#xA;                                      ancestors->selectByType(JudoProfile::rest)->notEmpty() in&#xA;      if isGeneratorSource then&#xA;        self.name.matches('^[A-Za-z][A-Za-z0-9_]*$')        &#xA;      else&#xA;        true&#xA;      endif&#xA;&#xA;-- self.name.matches('^[A-Za-z][A-Za-z0-9_]*$')&#xA;&#xA;&#xA;-- ha a &quot;tulaj&quot; (featuringClassifier) felmenői (ancestors) között van&#xA;--    (&lt;&lt;bo>> VAGY &lt;&lt;dto>> VAGY &lt;&lt;rest>>) &#xA;--    AKKOR ==> a névnek a minta szerintinek kell lennie&#xA;--    ELLENKEZŐ ESETBEN  nem  (==> true : valid a név)  &#xA;not self.isDerived or&#xA;(self.isDerived and not self.oclIsTypeOf(JudoProfile::calculated)) &#xA;let pimTypesModel : Model = Model.allInstances()->select(m | m.name = 'PIM Types')&#xA;                                                ->asSequence()&#xA;                                                ->first() in&#xA;    let judoPrimitiveTypes : Set(PrimitiveType) = PrimitiveType.allInstances()->select(pt | pt.owner = pimTypesModel) in&#xA;        let umlPrimitiveTypePkg : Package =  Package.allInstances()&#xA;                                                ->select( pkg | pkg.owner = Model.allInstances()&#xA;                                                                                ->select(m | m.name = 'UML2 Metamodel')&#xA;                                                                                ->asSequence()&#xA;                                                                                ->first())&#xA;                                                ->asSequence()&#xA;                                                ->first() in&#xA;            let umlPrimitiveType : Set(PrimitiveType) = PrimitiveType.allInstances()->select(pt | pt.owner = umlPrimitiveTypePkg) in&#xA;                                                      &#xA;-- Q: is this inv. should be checked on non-association member properties ONLY? --> Chosen: YES &#xA;                not self.association.oclIsUndefined() or                &#xA;                umlPrimitiveType->union(judoPrimitiveTypes)->includes(self.type)                            &#xA;&#xA;self.constrainedElement->select(e | e.oclIsTypeOf(Property))->forAll(p | p.oclAsType(Property).lower &lt;> 1)&#xA;if (self.featuringClassifier.oclIsTypeOf(Class) and&#xA;    self.association = null ) then &#xA;let theOwner : PackageableElement = self.featuringClassifier&#xA;                                        .oclAsType(PackageableElement) in&#xA;  let allOwners : Collection(PackageableElement) = theOwner->closure(owningPackage)&#xA;                                                           ->collect(oclAsType(PackageableElement))&#xA;                                                           ->including(theOwner) in&#xA;    let isGeneratorSource : Boolean = allOwners->selectByType(JudoProfile::bo)->notEmpty() or&#xA;                                       allOwners->selectByType(JudoProfile::dto)->notEmpty() or&#xA;                                       allOwners->selectByType(JudoProfile::rest)->notEmpty() &#xA;                                      in&#xA;      let ancestors : Collection(Class) = theOwner.oclAsType(Class)&#xA;                                                  ->closure(general.oclAsType(Class)) in&#xA;        if isGeneratorSource then&#xA;          ancestors->collect(ownedAttribute.name)&#xA;                   ->forAll(n | not n.equalsIgnoreCase(self.name))        &#xA;        else&#xA;          true&#xA;        endif&#xA;else &#xA;  true&#xA;endif&#xA;&#xA;-- ha a &quot;tulaj&quot; (featuringClassifier) felmenői (ancestors) között van&#xA;--    (&lt;&lt;bo>> VAGY &lt;&lt;dto>> VAGY &lt;&lt;rest>>) &#xA;--    AKKOR ==> a névnek a minta szerintinek kell lennie&#xA;--    ELLENKEZŐ ESETBEN  nem  (==> true : valid a név)&#xA;if (self.featuringClassifier.oclIsTypeOf(Class) and&#xA;    self.association = null ) &#xA;    then &#xA;let theOwner : PackageableElement = self.featuringClassifier                            -- Owner (Class) of the Property (Attribute or Role)&#xA;                                        .oclAsType(PackageableElement) in&#xA;  if not theOwner.oclAsType(Class).general->isEmpty() then&#xA;  let allOwners : Collection(PackageableElement) = theOwner->closure(owningPackage)     -- Package hierarchy above the owner Class&#xA;                                                           ->collect(oclAsType(PackageableElement)) in&#xA;    let isGeneratorSource : Boolean = true --allOwners->selectByType(JudoProfile::bo)->notEmpty() or -- Rule is Applicable WITHIN a Package to be generated&#xA;                                      -- allOwners->selectByType(JudoProfile::dto)->notEmpty() or&#xA;                                      -- allOwners->selectByType(JudoProfile::rest)->notEmpty() &#xA;                                      in&#xA;      let ancestors : Collection(Class) = theOwner.oclAsType(Class)                     -- All Ancestor of the ownerClass&#xA;                                                  ->closure(general.oclAsType(Class)) in&#xA;        let shortnames : Collection(JudoProfile::shortname) = JudoProfile::shortname.allInstances() in&#xA;          let s : Sequence(JudoProfile::shortname) = JudoProfile::shortname.allInstances()   -- All shortName constraints on this Property &#xA;                                                                           ->select( sn | sn.constrainedElement->includes(self) )&#xA;                                                                           ->asSequence() in&#xA;          if isGeneratorSource then&#xA;              if (s->size() = 1 and                                                       -- check if we have exactly 1 shortname stereotype WITH &#xA;                  s.constrainedElement->size() = 1) then                                  -- exactly 1 specification&#xA;                let sName : String = s->first().specification.oclAsType(LiteralString).value in&#xA;                  -- version one - compare self_s shortname with Attribute &amp; Role NAMES - Python code validates according to this interpretation&#xA;                  let ancAttributes : Collection(Property) = ancestors.ownedAttribute&#xA;                                                                      ->reject(association &lt;> null) in  &#xA;                    ancAttributes->forAll(name.equalsIgnoreCase(sName))         -- This attribute's / Role's shortname is Valid if no any ancestor's &#xA;                                                                                -- attribute's / Role's name is equal to it         &#xA;&#xA;                  -- version two - compare self's shortname with Attribute &amp; Role SHORTNAMES - !!! Put select &amp; collect's result in a let expression &#xA;--                  ancestors.ownedAttribute      -- CHECK WHETHER select filters nulls out -> in this case the following select should come one line after&#xA;--                           ->select(a | shortnames->exists(constrainedElement->includes(a)))    -- select those Attributes &amp; Roles where Shortname is given&#xA;--                           ->collect(a | shortnames->select(constrainedElement->includes(a))    -- collect the corresponding shortnames&#xA;--                                                   ->first()&#xA;--                                                   .specification&#xA;--                                                   .oclAsType(LiteralString).value)&#xA;--                           ->forAll(n | not n.equalsIgnoreCase(sName))                    -- This property's shortname is Valid if no any ancestor's property's&#xA;                                                                                            -- shortname equals to it         &#xA;              else     &#xA;                false                                                                     -- more than 1 shortname on the Property OR &#xA;                                                                                          -- more than 1 specification belongs to the stereotype &#xA;              endif&#xA;          else&#xA;            true&#xA;          endif&#xA;   else &#xA;      true&#xA;   endif&#xA;else &#xA;  true                                          -- this Property does not belong to a Class OR&#xA;                                                -- is an Association Role -> restriction does not apply - as current understanding&#xA;endif&#xA;&#xA;function traverse(node, path) {&#xA;  if (path.length == 0) {&#xA;    return node&#xA;  } else {&#xA;    nextPathElementRole = getNamedElement(node.getOwnedAttribute(), path[0]);     &#xA;    &#xA;    if (nextPathElementRole != null) {&#xA;        nextPathElement = nextPathElementRole.getType(); &#xA;        if (nextPathElement) {&#xA;            restOfPath = path.slice();&#xA;            restOfPath.shift();&#xA;            return traverse(nextPathElement, restOfPath);&#xA;        } else {&#xA;            return null;&#xA;        }&#xA;    } &#xA;    &#xA;    return null;&#xA;  }&#xA;}&#xA;&#xA;function getNamedElement(list, name) {&#xA;    if (list.length == 0) {&#xA;        return null;&#xA;    } else {&#xA;        li = list.listIterator();&#xA;        while (li.hasNext()) {&#xA;            nItem = li.next();&#xA;            if (nItem.name === name) {&#xA;                return nItem;&#xA;            }&#xA;        }&#xA;        &#xA;        return null;&#xA;    }&#xA;}&#xA;&#xA;// Validation Rule&#xA;if (THIS.isDerived() &amp;&amp; THIS.association === null) {                           &#xA;  if (THIS.getDefaultValue()) {&#xA;    var expr = THIS.getDefaultValue().value&#xA;    var len = expr.length&#xA;    &#xA;    if (expr[0] == &quot;{&quot;) { &#xA;      var exprPath = expr.substring(1, len-1).split(&quot;.&quot;);&#xA;  &#xA;      traverse( THIS.owner, exprPath) ? true : false;&#xA;    } else true;  // Attr is derived, Spec is given, but not in '{expr}' form, implies valid &#xA;  } else false;   // Attr is derived, but has no Specification --> CLASS_VALIDATION_ERROR indicates this&#xA;} else true; &#xA;&#xA;"/>
            </eAnnotations>
          </eSubpackages>
          <eSubpackages xmi:id="_z6cYmCf0EeuFcMB2y3vzaw" name="ClassValidation" nsURI="http:///PIMValidationProfile/PIMValidations/ClassValidation.ecore" nsPrefix="PIMValidationProfile.PIMValidations.ClassValidation">
            <eAnnotations xmi:id="_z6cYmSf0EeuFcMB2y3vzaw" source="http://www.eclipse.org/uml2/2.0.0/UML">
              <details xmi:id="_z6cYmif0EeuFcMB2y3vzaw" key="originalName" value="Class Validation"/>
            </eAnnotations>
            <eAnnotations xmi:id="_z6cYmyf0EeuFcMB2y3vzaw" source="http://www.eclipse.org/uml2/4.0.0/UML" references="_18_5_1_ede0357_1506094392785_48974_5410"/>
            <eAnnotations xmi:id="_z6cYnCf0EeuFcMB2y3vzaw" source="http://www.eclipse.org/emf/2002/GenModel">
              <details xmi:id="_z6cYnSf0EeuFcMB2y3vzaw" key="documentation" value="self.attribute->exists(a | a.oclIsKindOf( JudoProfile::representation ))&#xA;self.attribute->select(a | a.oclIsKindOf( JudoProfile::representation ))->size() &lt;= 1&#xA;not self.oclIsTypeOf(Class) or&#xA;not self.oclIsTypeOf(AssociationClass) or&#xA;   ((self.oclIsTypeOf(Class) or&#xA;     self.oclIsTypeOf(AssociationClass)) and&#xA;     self.name.matches('^[A-Za-z][A-Za-z0-9_]*$'))&#xA;self.general->isEmpty() or&#xA;(not self.general->isEmpty() and&#xA;     self.general->forAll( g | not g.oclIsTypeOf( JudoProfile::implementation)))&#xA;Class.allInstances()->select(c | c.general->includes( self) and c.oclIsTypeOf( JudoProfile::implementation) )->size() &lt;= 1&#xA;let neighbours : Set(Class) = self.ownedAttribute&#xA;                                  .association->excluding(null)&#xA;                                  .memberEnd&#xA;                                  .UMLClass->excluding(null)&#xA;                                  ->asSet() in&#xA;    neighbours->closure(c | c.ownedAttribute->select(p | p.lower = 1 and p.upper = 1)&#xA;                             .association->excluding(null)&#xA;                             .memberEnd.UMLClass&#xA;                             ->asSet()&#xA;                             ->excluding(null)&#xA;                             ->excluding(c))->excludes(self)  &#xA;testNashorn = load(&quot;nashorn:mozilla_compat.js&quot;);&#xA;&#xA;importPackage(&quot;com.nomagic.magicdraw.core&quot;);&#xA;importPackage(&quot;com.nomagic.magicdraw.fileattachments&quot;);&#xA;importPackage(&quot;java.io&quot;);&#xA;importPackage(&quot;com.nomagic.magicdraw.uml&quot;);&#xA;importPackage(&quot;com.nomagic.magicdraw.magicreport.helper&quot;); // ElementHelper&#xA;importPackage(&quot;com.nomagic.uml2.ext.jmi.helpers&quot;); // StereotypesHelper&#xA;&#xA;var logger = Application.getInstance().getGUILog();&#xA;&#xA;function log(msg) {&#xA;    logger.log(&quot;VR >>   &quot; + msg);&#xA;}&#xA;&#xA;&#xA;function getType( obj )&#xA;{&#xA;  return Object.prototype.toString.call(obj);&#xA;}&#xA;&#xA;function traverse(node, path) {&#xA;  if (!path || (path.length == 0)) {&#xA;    return node&#xA;  } else {&#xA;    nextPathElementRole = getNamedElement(node.getOwnedAttribute(), path[0]);     &#xA;    &#xA;    if (nextPathElementRole != null) {&#xA;        nextPathElement = nextPathElementRole.getType(); &#xA;        if (nextPathElement) {&#xA;            restOfPath = path.slice();&#xA;            restOfPath.shift();&#xA;            return traverse(nextPathElement, restOfPath);&#xA;        } else {&#xA;            return null;&#xA;        }&#xA;    } &#xA;    &#xA;    return null;&#xA;  }&#xA;}&#xA;&#xA;function getNamedElement(list, name) {&#xA;    if (list.length == 0) {&#xA;        return null;&#xA;    } else {&#xA;        li = list.listIterator();&#xA;        while (li.hasNext()) {&#xA;            nItem = li.next();&#xA;            if (nItem.name == name) {&#xA;                return nItem;&#xA;            }&#xA;        }&#xA;        &#xA;        return null;&#xA;    }&#xA;}&#xA;&#xA;function getAllOwningPackages(elmt, owners) {&#xA;    if (elmt == null) {&#xA;        return owners;&#xA;    }&#xA;    else {&#xA;        var newOwners = owners.slice();&#xA;        newOwners.push(elmt);&#xA;        return getAllOwningPackages(elmt.getOwningPackage(), newOwners);&#xA;    };&#xA;}&#xA;&#xA;function isDomainElement(elmt) {&#xA;    return StereotypesHelper.hasStereotype(elmt, &quot;bo&quot;) ||&#xA;           StereotypesHelper.hasStereotype(elmt, &quot;dto&quot;) ||&#xA;           StereotypesHelper.hasStereotype(elmt, &quot;rest&quot;);&#xA;}&#xA;&#xA;function isDomainClass(elmt) {&#xA;    var owningPkgs = getAllOwningPackages(elmt, []);&#xA;    return isDomainElement(elmt) ||&#xA;           owningPkgs.some(isDomainElement);&#xA;}&#xA;&#xA;function isTypeOf(elmt, metaClassName) {&#xA;  return (ElementHelper.getMetaClassName(elmt) == metaClassName); &#xA;}&#xA;function constrainedElements(elmt) {&#xA;    var constrainedElements = THIS.getConstrainedElement();&#xA;    return Java.from( constrainedElements.toArray()); &#xA;}&#xA;&#xA;function ownedElementsOfType(elmt, typeName) {&#xA;    return toA(elmt.getOwnedElement())&#xA;            .filter(function(e) { return isTypeOf(e, typeName)}) ;&#xA;}&#xA;function toA(list) {&#xA;    return Java.from(list.toArray());&#xA;}&#xA;&#xA;function isTraversableDescription(elmt, path) {&#xA;    if (elmt == null)&#xA;        return true;&#xA;&#xA;    var re = new RegExp('\{[a-zA-Z][a-zA-Z0-9_\.]+\}|[^{}]');&#xA;    var matched = re.exec(path);&#xA;    if ( matched !== null) {&#xA;        var subPath = matched[0].substr(1, matched[0].length-2); &#xA;        return (traverse(elmt, subPath.split(&quot;.&quot;)) !== null)&#xA;    } else&#xA;        return false;&#xA;}&#xA;&#xA;&#xA;// - only &lt;&lt;validation>> stereotyped Constraints have this validation rule - so checking of this stereotype is not needed                                                   &#xA;if (constrainedElements(THIS).some(function (ctdElmt) {return isDomainClass(ctdElmt)})) {                                                   &#xA;  ownedElementsOfType(THIS, &quot;Opaque Expression&quot;)                          // get OpaqueExpressions of the Constraint &#xA;   .map(function(e) {return toA(e.getBody())})                          // get bodies of the expressions&#xA;   .reduce(function (acc, val) {return acc.concat(val)}, [])            // flatten the resulting nested array struct [[a b][c d][e]] --> [a b c d e]&#xA;   .every(function(e) {  // log(&quot;e :: &quot; + e)                            // check if EACH (->'every') body text 'starts' with a traverseable dotted expr.&#xA;                         return constrainedElements(THIS).every(function (ctdElmt) { &#xA;                                                                return isTraversableDescription(ctdElmt, e)})})&#xA;} else&#xA;    true;        "/>
            </eAnnotations>
          </eSubpackages>
          <eSubpackages xmi:id="_z6cYnif0EeuFcMB2y3vzaw" name="StateMachineValidation" nsURI="http:///PIMValidationProfile/PIMValidations/StateMachineValidation.ecore" nsPrefix="PIMValidationProfile.PIMValidations.StateMachineValidation">
            <eAnnotations xmi:id="_z6cYnyf0EeuFcMB2y3vzaw" source="http://www.eclipse.org/uml2/2.0.0/UML">
              <details xmi:id="_z6cYoCf0EeuFcMB2y3vzaw" key="originalName" value="StateMachine Validation"/>
            </eAnnotations>
            <eAnnotations xmi:id="_z6cYoSf0EeuFcMB2y3vzaw" source="http://www.eclipse.org/uml2/4.0.0/UML" references="_18_5_1_ede0357_1506094392786_200889_5411"/>
            <eAnnotations xmi:id="_z6cYoif0EeuFcMB2y3vzaw" source="http://www.eclipse.org/emf/2002/GenModel">
              <details xmi:id="_z6cYoyf0EeuFcMB2y3vzaw" key="documentation" value="let smOwner : Element = self.container.stateMachine.owner in&#xA;    self.effect.oclIsUndefined() or&#xA;    self.effect.specification.oclIsUndefined() or&#xA;&#xA;-- no Interface is seeked for operation ownership - only Class&#xA;-- sm owner is implementation and operation owner is either this class or its parent&#xA;    if smOwner.oclIsTypeOf(JudoProfile::implementation) then&#xA;      (self.effect.specification.oclAsType(Operation).owner  = smOwner or &#xA;       smOwner.oclAsType(Class)&#xA;              .generalization&#xA;              ->exists(g | g.general = self.effect&#xA;                                           .specification&#xA;                                           .oclAsType(Operation)&#xA;                                           .owner&#xA;                                           .oclAsType(Class)))&#xA;      else&#xA;        self.effect.specification.oclAsType(Operation).owner  = smOwner&#xA;      endif"/>
            </eAnnotations>
          </eSubpackages>
          <eSubpackages xmi:id="_z6cYpCf0EeuFcMB2y3vzaw" name="DomainValidation" nsURI="http:///PIMValidationProfile/PIMValidations/DomainValidation.ecore" nsPrefix="PIMValidationProfile.PIMValidations.DomainValidation">
            <eAnnotations xmi:id="_z6cYpSf0EeuFcMB2y3vzaw" source="http://www.eclipse.org/uml2/2.0.0/UML">
              <details xmi:id="_z6cYpif0EeuFcMB2y3vzaw" key="originalName" value="Domain Validation"/>
            </eAnnotations>
            <eAnnotations xmi:id="_z6cYpyf0EeuFcMB2y3vzaw" source="http://www.eclipse.org/uml2/4.0.0/UML" references="_18_5_1_ede0357_1506094392786_385328_5412"/>
            <eAnnotations xmi:id="_z6cYqCf0EeuFcMB2y3vzaw" source="http://www.eclipse.org/emf/2002/GenModel">
              <details xmi:id="_z6cYqSf0EeuFcMB2y3vzaw" key="documentation" value="bo.allInstances()->select(p | p.oclIsTypeOf(Package) and p &lt;> self)->forAll(p | p.name &lt;> self.name)&#xA;not this.oclIsTypeOf(shortname) or&#xA;   (this.oclIsTypeOf(shortname) and&#xA;let shortnames : Collection(shortname) = shortname.allInstances() in  &#xA;    let s : Sequence(shortname) = shortname.allInstances()->select( sn | sn.constrainedElement->includes(self) )->asSequence() in&#xA;        let  otherBOs  : Sequence(bo) = bo.allInstances()->excluding(self)->asSequence() in&#xA;        s->size() = 1 and&#xA;        s.constrainedElement->size() = 1 and&#xA;        shortnames->select(sn | sn.specification.oclAsType(LiteralString).value = &#xA;                                 s->first().specification.oclAsType(LiteralString).value)->select( sn | sn.constrainedElement->excludesAll( otherBOs ))->size() = 0)&#xA;"/>
            </eAnnotations>
          </eSubpackages>
        </eSubpackages>
        <eSubpackages xmi:id="_z6cYqif0EeuFcMB2y3vzaw" name="TODOs" nsURI="http:///PIMValidationProfile/TODOs.ecore" nsPrefix="PIMValidationProfile.TODOs">
          <eAnnotations xmi:id="_z6cYqyf0EeuFcMB2y3vzaw" source="http://www.eclipse.org/uml2/2.0.0/UML">
            <details xmi:id="_z6cYrCf0EeuFcMB2y3vzaw" key="originalName" value="TO DOs"/>
          </eAnnotations>
          <eAnnotations xmi:id="_z6cYrSf0EeuFcMB2y3vzaw" source="http://www.eclipse.org/uml2/4.0.0/UML" references="_18_5_2_1c100dd_1511936867791_618924_11693"/>
        </eSubpackages>
      </contents>
    </eAnnotations>
    <packageImport xmi:id="_18_5_1_ede0357_1506094392784_745991_5404">
      <importedPackage xmi:type="uml:Model" href="pathmap://UML_METAMODELS/UML.metamodel.uml#_0"/>
    </packageImport>
    <packageImport xmi:id="_0primitiveTypesPIM_Validation_Profile">
      <importedPackage xmi:type="uml:Model" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#_0"/>
    </packageImport>
    <packageImport xmi:id="_0javaPrimitiveTypesPIM_Validation_Profile">
      <importedPackage xmi:type="uml:Model" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#_0"/>
    </packageImport>
    <packagedElement xmi:type="uml:Package" xmi:id="_18_5_1_ede0357_1506094392784_666626_5403" name="PIM Validations" visibility="public" URI="">
      <packagedElement xmi:type="uml:Package" xmi:id="_18_5_1_ede0357_1506094392785_882649_5405" name="TESTING Suite" visibility="public" URI="">
        <ownedRule xmi:id="_18_5_1_ede0357_1506094392787_247237_5426" name="roleIsNotPrivate" visibility="public">
          <ownedComment xmi:id="_18_5_1_ede0357_1512470223156_577495_5651" annotatedElement="_18_5_1_ede0357_1506094392787_247237_5426" body="[István] Ilyen szabály szerintem nincs. Bár a Modelio esetén valóban volt egy olyan (máig kiderítetlen) furcsa viselkedés, hogy a private elemek nem kerültek be a RAMC-ba és ezért célszerű volt ezt a láthatóságot kerülni, de szerintem etttől még nincs ilyen Judo korlát.&#xA;[TIbor] OK - Privivel egyeztettem, kivehető"/>
          <constrainedElement xmi:type="uml:Class" href="pathmap://UML_METAMODELS/UML.metamodel.uml#Property"/>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_18_5_1_ede0357_1506094392792_14612_5480" name="" visibility="public">
            <language>OCL2.0</language>
            <body>self.visibility &lt;> VisibilityKind::private</body>
          </specification>
        </ownedRule>
        <packagedElement xmi:type="uml:Package" xmi:id="_18_5_1_ede0357_1506094392786_274922_5414" name="testPackage" visibility="public" URI="">
          <ownedRule xmi:id="_18_5_1_ede0357_1506094392790_143624_5457" name="testClosure" visibility="public">
            <constrainedElement xmi:type="uml:Class" href="pathmap://UML_METAMODELS/UML.metamodel.uml#Package"/>
            <specification xmi:type="uml:OpaqueExpression" xmi:id="_18_5_1_ede0357_1506094392797_193371_5530" name="" visibility="public">
              <language>JavaScript</language>
              <body>THIS.name              </body>
            </specification>
          </ownedRule>
          <ownedRule xmi:id="_18_5_1_ede0357_1506094392790_107074_5460" name="testsOnProperty" visibility="public">
            <constrainedElement xmi:type="uml:Stereotype" href="JudoProfile.profile.uml#_czZTXWruEeeJzdLAONIxYA"/>
            <specification xmi:type="uml:OpaqueExpression" xmi:id="_18_5_1_ede0357_1506094392797_95156_5536" name="" visibility="public">
              <language>OCL2.0</language>
              <body>bo.allInstances()->collect(e | e.oclAsType(Package))->union(Model.allInstances()->asSet())</body>
            </specification>
          </ownedRule>
          <ownedRule xmi:id="_18_5_1_ede0357_1506094392789_505509_5441" name="attributeUniqueInGeneralAxis" visibility="public">
            <constrainedElement xmi:type="uml:Class" href="pathmap://UML_METAMODELS/UML.metamodel.uml#Property"/>
            <specification xmi:type="uml:OpaqueExpression" xmi:id="_18_5_1_ede0357_1506094392795_392383_5506" name="" visibility="public">
              <language>OCL2.0</language>
              <body>self.owner.oclAsType(Class).general</body>
            </specification>
          </ownedRule>
        </packagedElement>
      </packagedElement>
      <packagedElement xmi:type="uml:Package" xmi:id="_18_5_1_ede0357_1506094392785_566297_5407" name="Role Validation" visibility="public" URI="">
        <ownedRule xmi:id="_18_5_1_ede0357_1506094392787_390540_5427" name="roleNameExists" visibility="public">
          <constrainedElement xmi:type="uml:Class" href="pathmap://UML_METAMODELS/UML.metamodel.uml#Association"/>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_18_5_1_ede0357_1506094392793_845423_5482" name="" visibility="public">
            <language>OCL2.0</language>
            <body>self.oclAsType(Association).memberEnd->forAll(r | r.name.size() > 0)</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="_18_5_1_ede0357_1506094392788_752552_5428" name="roleMandatoryAssociationEndIsNavigable" visibility="public">
          <constrainedElement xmi:type="uml:Class" href="pathmap://UML_METAMODELS/UML.metamodel.uml#Association"/>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_18_5_1_ede0357_1506094392793_697841_5484" name="" visibility="public">
            <language>OCL2.0</language>
            <body>let mandatoryEnds : Set(Property) = self.memberEnd->select(p | p.lower > 0 and not p.isDerived)->asSet() in
    self.ownedEnd->excludesAll(mandatoryEnds)    
</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="_18_5_1_ede0357_1506094392788_105698_5429" name="roleMandatoryRoleIsNotList" visibility="public">
          <constrainedElement xmi:type="uml:Class" href="pathmap://UML_METAMODELS/UML.metamodel.uml#Association"/>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_18_5_1_ede0357_1506094392793_44359_5486" name="" visibility="public">
            <language>OCL2.0</language>
            <body>self.memberEnd->forAll(p | p.lower = 0 or
                           (p.lower &lt;> 0 and p.upper = 1))    
</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="_18_5_1_ede0357_1506094392788_265051_5430" name="roleMaxOneMandatoryRole" visibility="public">
          <constrainedElement xmi:type="uml:Class" href="pathmap://UML_METAMODELS/UML.metamodel.uml#Association"/>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_18_5_1_ede0357_1506094392793_757868_5488" name="" visibility="public">
            <language>OCL2.0</language>
            <body>self.memberEnd->select(p | p.lower &lt;> 0)->size() &lt; 2</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="_18_5_1_ede0357_1506094392788_234479_5431" name="roleCompositionIsMandatory" visibility="public">
          <constrainedElement xmi:type="uml:Class" href="pathmap://UML_METAMODELS/UML.metamodel.uml#Property"/>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_18_5_1_ede0357_1506094392793_856388_5490" name="" visibility="public">
            <language>OCL2.0</language>
            <body>not (self.aggregation = AggregationKind::composite) or 
    (self.aggregation = AggregationKind::composite and 
     self.association.memberEnd
         ->forAll(e | self.association.memberEnd
                          ->select(oe | oe &lt;> e)
                          ->forAll( oe | e.aggregation &lt;> AggregationKind::composite or
                                        (e.aggregation = AggregationKind::composite and
                                         oe.lower &lt;> 0 and 
                                         oe.upper = 1))))                
</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="_18_5_1_ede0357_1506094392788_115595_5432" name="roleAggregationEndIsNotListAndOtherEndIsNotMandatory" visibility="public">
          <ownedComment xmi:id="_18_5_1_ede0357_1512466598584_293817_5141" annotatedElement="_18_5_1_ede0357_1506094392788_115595_5432" body="Original rule: MESSAGE.AEND_INVALID_AGGREGATION"/>
          <constrainedElement xmi:type="uml:Class" href="pathmap://UML_METAMODELS/UML.metamodel.uml#Association"/>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_18_5_1_ede0357_1506094392794_793300_5492" name="" visibility="public">
            <language>OCL2.0</language>
            <body>self.memberEnd
    ->forAll(e | self.memberEnd
                     ->select(oe | oe &lt;> e)
                     ->forAll( oe | e.aggregation &lt;> AggregationKind::shared or
                                   (e.aggregation = AggregationKind::shared and
                                    e.lower = 0 and 
                                    oe.upper = 1)))

</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="_18_5_1_ede0357_1506094392788_37978_5433" name="roleDerivedExpressionHasSpecification" visibility="public">
          <constrainedElement xmi:type="uml:Stereotype" href="JudoProfile.profile.uml#_czZ6lWruEeeJzdLAONIxYA"/>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_18_5_1_ede0357_1506094392794_483555_5494" name="" visibility="public">
            <language>OCL2.0</language>
            <body>self.specification.oclAsType(LiteralString).value->forAll(l | l.matches('[^ \\t\\n\\f\\r\\x0B]+'))
--self.specification.oclAsType(OpaqueExpression)._'body'->forAll(l | l.size() > 0)
</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="_18_5_1_ede0357_1506094392788_135467_5434" name="roleDerivedDescriptionHasSpecification" visibility="public">
          <constrainedElement xmi:type="uml:Stereotype" href="JudoProfile.profile.uml#_czZ6nGruEeeJzdLAONIxYA"/>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_18_5_1_ede0357_1506094392794_319418_5496" name="" visibility="public">
            <language>OCL2.0</language>
            <body>self.specification.oclAsType(OpaqueExpression)._'body'->exists(l | l.matches('[^\\t\\n\\f\\r\\x0B]+'))
</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="_18_5_1_ede0357_1506094392788_275184_5435" name="roleDerivedRoleConsumerIsNotNavigable" visibility="public">
          <constrainedElement xmi:type="uml:Class" href="pathmap://UML_METAMODELS/UML.metamodel.uml#Property"/>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_18_5_1_ede0357_1506094392794_324697_5498" name="" visibility="public">
            <language>OCL2.0</language>
            <body>not  self.oclIsTypeOf(JudoProfile::derived) or
    (self.oclIsTypeOf(JudoProfile::derived) and
     self.association.oclIsUndefined()) or
    (self.oclIsTypeOf(JudoProfile::derived) and
     self.association.ownedEnd->includesAll( self.association.memberEnd->select(e | e &lt;> self)))        </body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="_18_5_1_ede0357_1506094392788_619469_5436" name="roleDerivedIsProtected" visibility="public">
          <constrainedElement xmi:type="uml:Class" href="pathmap://UML_METAMODELS/UML.metamodel.uml#Property"/>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_18_5_1_ede0357_1506094392794_63419_5500" name="" visibility="public">
            <language>OCL2.0</language>
            <body>not  self.oclIsTypeOf(JudoProfile::derived) or
    (self.oclIsTypeOf(JudoProfile::derived) and
     self.association.oclIsUndefined()) or
    (self.oclIsTypeOf(JudoProfile::derived) and
 not self.association.oclIsUndefined() and self.visibility = VisibilityKind::protected) </body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="_18_5_3_ede0357_1515503349984_222735_5422" name="roleNameIsUniqueInAncestorAxis" visibility="public">
          <constrainedElement xmi:type="uml:Class" href="pathmap://UML_METAMODELS/UML.metamodel.uml#Property"/>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_18_5_3_ede0357_1515503349985_929026_5424" name="" visibility="public">
            <language>OCL2.0</language>
            <body>if (self.featuringClassifier.oclIsTypeOf(Class)  and
   self.association &lt;> null ) then 
let theOwner : PackageableElement = self.featuringClassifier
                                        .oclAsType(PackageableElement) in
  let allOwners : Collection(PackageableElement) = theOwner->closure(owningPackage)
                                                           ->collect(oclAsType(PackageableElement))
                                                           ->including(theOwner) in
    let isGeneratorSource : Boolean = allOwners->selectByType(JudoProfile::bo)->notEmpty() or
                                      allOwners->selectByType(JudoProfile::dto)->notEmpty() or
                                      allOwners->selectByType(JudoProfile::rest)->notEmpty() 
                                      in
      let ancestors : Collection(Class) = theOwner.oclAsType(Class)
                                                  ->closure(general.oclAsType(Class)) in
        if isGeneratorSource then
          ancestors->collect(ownedAttribute.name)
                   ->forAll(n | not n.equalsIgnoreCase(self.name))        
        else
          true
        endif
else 
  true
endif
</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="_18_5_3_ede0357_1515503349985_477267_5423" name="roleShortNameIsUniqueInAncestorAxis" visibility="public">
          <constrainedElement xmi:type="uml:Class" href="pathmap://UML_METAMODELS/UML.metamodel.uml#Property"/>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_18_5_3_ede0357_1515503349985_116568_5425" name="" visibility="public">
            <language>OCL2.0</language>
            <body>if (self.featuringClassifier.oclIsTypeOf(Class) and
    self.association &lt;> null ) 
    then 
let theOwner : PackageableElement = self.featuringClassifier                            -- Owner (Class) of the Property (Attribute or Role)
                                        .oclAsType(PackageableElement) in
  if not theOwner.oclAsType(Class).general->isEmpty() then
  let allOwners : Collection(PackageableElement) = theOwner->closure(owningPackage)     -- Package hierarchy above the owner Class
                                                           ->collect(oclAsType(PackageableElement)) in
    let isGeneratorSource : Boolean = true --allOwners->selectByType(JudoProfile::bo)->notEmpty() or -- Rule is Applicable WITHIN a Package to be generated
                                      -- allOwners->selectByType(JudoProfile::dto)->notEmpty() or
                                      -- allOwners->selectByType(JudoProfile::rest)->notEmpty() 
                                      in
      let ancestors : Collection(Class) = theOwner.oclAsType(Class)                     -- All Ancestor of the ownerClass
                                                  ->closure(general.oclAsType(Class)) in
        let shortnames : Collection(JudoProfile::shortname) = JudoProfile::shortname.allInstances() in
          let s : Sequence(JudoProfile::shortname) = JudoProfile::shortname.allInstances()   -- All shortName constraints on this Property 
                                                                           ->select( sn | sn.constrainedElement->includes(self) )
                                                                           ->asSequence() in
          if isGeneratorSource then
              if (s->size() = 1 and                                                       -- check if we have exactly 1 shortname stereotype WITH 
                  s.constrainedElement->size() = 1) then                                  -- exactly 1 specification
                let sName : String = s->first().specification.oclAsType(LiteralString).value in
                  -- version one - compare self_s shortname with Attribute &amp; Role NAMES - Python code validates according to this interpretation
                  let ancAttributes : Collection(Property) = ancestors.ownedAttribute
                                                                      ->reject(association &lt;> null) in  
                    ancAttributes->forAll(name.equalsIgnoreCase(sName))         -- This attribute's / Role's shortname is Valid if no any ancestor's 
                                                                                -- attribute's / Role's name is equal to it         

                  -- version two - compare self's shortname with Attribute &amp; Role SHORTNAMES - !!! Put select &amp; collect's result in a let expression 
--                  ancestors.ownedAttribute      -- CHECK WHETHER select filters nulls out -> in this case the following select should come one line after
--                           ->select(a | shortnames->exists(constrainedElement->includes(a)))    -- select those Attributes &amp; Roles where Shortname is given
--                           ->collect(a | shortnames->select(constrainedElement->includes(a))    -- collect the corresponding shortnames
--                                                   ->first()
--                                                   .specification
--                                                   .oclAsType(LiteralString).value)
--                           ->forAll(n | not n.equalsIgnoreCase(sName))                    -- This property's shortname is Valid if no any ancestor's property's
                                                                                            -- shortname equals to it         
              else     
                false                                                                     -- more than 1 shortname on the Property OR 
                                                                                          -- more than 1 specification belongs to the stereotype 
              endif
          else
            true
          endif     
  else
      true
  endif
else 
  true                                          -- this Property does not belong to a Class OR
                                                -- is an Association Role -> restriction does not apply - as current understanding
endif
</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="_18_5_3_ede0357_1515521931989_884946_5852" name="roleNavigationIsValid" visibility="public">
          <constrainedElement xmi:type="uml:Class" href="pathmap://UML_METAMODELS/UML.metamodel.uml#Property"/>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_18_5_3_ede0357_1515521931989_854437_5853" name="" visibility="public">
            <language>JavaScript</language>
            <body>function traverse(node, path) {
  if (path.length == 0) {
    return node
  } else {
    nextPathElementRole = getNamedElement(node.getOwnedAttribute(), path[0]);     
    
    if (nextPathElementRole != null) {
        nextPathElement = nextPathElementRole.getType(); 
        if (nextPathElement) {
            restOfPath = path.slice();
            restOfPath.shift();
            return traverse(nextPathElement, restOfPath);
        } else {
            return null;
        }
    } 
    
    return null;
  }
}

function getNamedElement(list, name) {
    if (list.length == 0) {
        return null;
    } else {
        li = list.listIterator();
        while (li.hasNext()) {
            nItem = li.next();
            if (nItem.name === name) {
                return nItem;
            }
        }
        
        return null;
    }
}

// Validation Rule
if (THIS.isDerived() &amp;&amp; THIS.association != null) {                           
  if (THIS.getDefaultValue()) {
    var expr = THIS.getDefaultValue().value
    var len = expr.length
    
    if (expr[0] == &quot;[&quot;) { 
      var exprPath = expr.substring(1, len-1).split(&quot;.&quot;);
      traverse( THIS.owner, exprPath) ? true : false;
    } else true;  // Role is derived, Spec is given, but not in '{expr}' form, implies valid 
  } else true;   // Role is derived, but has no Specification --> Python code (AEND_NAVIGATION_ERROR) permits such case as Valid
} else true; </body>
          </specification>
        </ownedRule>
      </packagedElement>
      <packagedElement xmi:type="uml:Package" xmi:id="_18_5_1_ede0357_1506094392785_637570_5408" name="Constraint Validation" visibility="public" URI="">
        <ownedRule xmi:id="_18_5_1_ede0357_1506094392789_737484_5438" name="shortNameLength" visibility="public">
          <constrainedElement xmi:type="uml:Stereotype" href="JudoProfile.profile.uml#_czZ5cGruEeeJzdLAONIxYA"/>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_18_5_1_ede0357_1506094392794_274890_5502" name="" visibility="public">
            <language>OCL2.0</language>
            <body>let judo_max_len : Integer = 6 in
self.specification.oclAsType(LiteralString).value->forAll(b | b.size() &lt;= judo_max_len)

-- MD-ben modellezve:
-- self.specification.oclAsType(OpaqueExpression)._'body'->forAll(b | b.size() &lt;= judo_max_len)</body>
          </specification>
        </ownedRule>
      </packagedElement>
      <packagedElement xmi:type="uml:Package" xmi:id="_18_5_1_ede0357_1506094392785_535919_5409" name="Attribute Validation" visibility="public" URI="">
        <ownedRule xmi:id="_18_5_1_ede0357_1506094392789_22860_5440" name="attributeNamePattern" visibility="public">
          <constrainedElement xmi:type="uml:Class" href="pathmap://UML_METAMODELS/UML.metamodel.uml#Property"/>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_18_5_1_ede0357_1506094392795_597517_5504" name="" visibility="public">
            <language>OCL2.0</language>
            <body>let theOwner : PackageableElement = self.featuringClassifier
                                        .oclAsType(PackageableElement) in
  let ancestors : Collection(PackageableElement) = theOwner->closure(owningPackage)
                                                           ->collect(oclAsType(PackageableElement))
                                                           ->including(theOwner) in
    let isGeneratorSource : Boolean = ancestors->selectByType(JudoProfile::bo)->notEmpty() or
                                      ancestors->selectByType(JudoProfile::dto)->notEmpty() or
                                      ancestors->selectByType(JudoProfile::rest)->notEmpty() in
      if isGeneratorSource then
        self.name.matches('^[A-Za-z][A-Za-z0-9_]*$')        
      else
        true
      endif

-- self.name.matches('^[A-Za-z][A-Za-z0-9_]*$')


-- ha a &quot;tulaj&quot; (featuringClassifier) felmenői (ancestors) között van
--    (&lt;&lt;bo>> VAGY &lt;&lt;dto>> VAGY &lt;&lt;rest>>) 
--    AKKOR ==> a névnek a minta szerintinek kell lennie
--    ELLENKEZŐ ESETBEN  nem  (==> true : valid a név)  </body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="_18_5_1_ede0357_1506094392789_376695_5442" name="attributeDerivedIsNotCalculated" visibility="public">
          <constrainedElement xmi:type="uml:Class" href="pathmap://UML_METAMODELS/UML.metamodel.uml#Property"/>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_18_5_1_ede0357_1506094392795_135988_5508" name="" visibility="public">
            <language>OCL2.0</language>
            <body>not self.isDerived or
(self.isDerived and not self.oclIsTypeOf(JudoProfile::calculated)) </body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="_18_5_1_ede0357_1506094392789_469734_5443" name="attrDerivedPropertyIsOfBaseType" visibility="public">
          <constrainedElement xmi:type="uml:Class" href="pathmap://UML_METAMODELS/UML.metamodel.uml#Element"/>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_18_5_1_ede0357_1506094392795_249804_5510" name="" visibility="public">
            <language>OCL2.0</language>
            <body>let pimTypesModel : Model = Model.allInstances()->select(m | m.name = 'PIM Types')
                                                ->asSequence()
                                                ->first() in
    let judoPrimitiveTypes : Set(PrimitiveType) = PrimitiveType.allInstances()->select(pt | pt.owner = pimTypesModel) in
        let umlPrimitiveTypePkg : Package =  Package.allInstances()
                                                ->select( pkg | pkg.owner = Model.allInstances()
                                                                                ->select(m | m.name = 'UML2 Metamodel')
                                                                                ->asSequence()
                                                                                ->first())
                                                ->asSequence()
                                                ->first() in
            let umlPrimitiveType : Set(PrimitiveType) = PrimitiveType.allInstances()->select(pt | pt.owner = umlPrimitiveTypePkg) in
                                                      
-- Q: is this inv. should be checked on non-association member properties ONLY? --> Chosen: YES 
                not self.association.oclIsUndefined() or                
                umlPrimitiveType->union(judoPrimitiveTypes)->includes(self.type)                            
</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="_18_5_1_ede0357_1506094392789_741427_5444" name="attributeListAttrIsOptional" visibility="public">
          <constrainedElement xmi:type="uml:Stereotype" href="JudoProfile.profile.uml#_czZ5RmruEeeJzdLAONIxYA"/>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_18_5_1_ede0357_1506094392795_530252_5512" name="" visibility="public">
            <language>OCL2.0</language>
            <body>self.constrainedElement->select(e | e.oclIsTypeOf(Property))->forAll(p | p.oclAsType(Property).lower &lt;> 1)</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="_18_5_3_ede0357_1515493439170_730407_5383" name="attrNameIsUniqueInAncestorAxis" visibility="public">
          <constrainedElement xmi:type="uml:Class" href="pathmap://UML_METAMODELS/UML.metamodel.uml#Property"/>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_18_5_3_ede0357_1515493439176_443981_5384" name="" visibility="public">
            <language>OCL2.0</language>
            <body>if (self.featuringClassifier.oclIsTypeOf(Class) and
    self.association = null ) then 
let theOwner : PackageableElement = self.featuringClassifier
                                        .oclAsType(PackageableElement) in
  let allOwners : Collection(PackageableElement) = theOwner->closure(owningPackage)
                                                           ->collect(oclAsType(PackageableElement))
                                                           ->including(theOwner) in
    let isGeneratorSource : Boolean = allOwners->selectByType(JudoProfile::bo)->notEmpty() or
                                       allOwners->selectByType(JudoProfile::dto)->notEmpty() or
                                       allOwners->selectByType(JudoProfile::rest)->notEmpty() 
                                      in
      let ancestors : Collection(Class) = theOwner.oclAsType(Class)
                                                  ->closure(general.oclAsType(Class)) in
        if isGeneratorSource then
          ancestors->collect(ownedAttribute.name)
                   ->forAll(n | not n.equalsIgnoreCase(self.name))        
        else
          true
        endif
else 
  true
endif

-- ha a &quot;tulaj&quot; (featuringClassifier) felmenői (ancestors) között van
--    (&lt;&lt;bo>> VAGY &lt;&lt;dto>> VAGY &lt;&lt;rest>>) 
--    AKKOR ==> a névnek a minta szerintinek kell lennie
--    ELLENKEZŐ ESETBEN  nem  (==> true : valid a név)</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="_18_5_3_ede0357_1515503285262_993282_5410" name="attrShortNameIsUniqueInAncestorAxis" visibility="public">
          <constrainedElement xmi:type="uml:Class" href="pathmap://UML_METAMODELS/UML.metamodel.uml#Property"/>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_18_5_3_ede0357_1515503285263_579191_5411" name="" visibility="public">
            <language>OCL2.0</language>
            <body>if (self.featuringClassifier.oclIsTypeOf(Class) and
    self.association = null ) 
    then 
let theOwner : PackageableElement = self.featuringClassifier                            -- Owner (Class) of the Property (Attribute or Role)
                                        .oclAsType(PackageableElement) in
  if not theOwner.oclAsType(Class).general->isEmpty() then
  let allOwners : Collection(PackageableElement) = theOwner->closure(owningPackage)     -- Package hierarchy above the owner Class
                                                           ->collect(oclAsType(PackageableElement)) in
    let isGeneratorSource : Boolean = true --allOwners->selectByType(JudoProfile::bo)->notEmpty() or -- Rule is Applicable WITHIN a Package to be generated
                                      -- allOwners->selectByType(JudoProfile::dto)->notEmpty() or
                                      -- allOwners->selectByType(JudoProfile::rest)->notEmpty() 
                                      in
      let ancestors : Collection(Class) = theOwner.oclAsType(Class)                     -- All Ancestor of the ownerClass
                                                  ->closure(general.oclAsType(Class)) in
        let shortnames : Collection(JudoProfile::shortname) = JudoProfile::shortname.allInstances() in
          let s : Sequence(JudoProfile::shortname) = JudoProfile::shortname.allInstances()   -- All shortName constraints on this Property 
                                                                           ->select( sn | sn.constrainedElement->includes(self) )
                                                                           ->asSequence() in
          if isGeneratorSource then
              if (s->size() = 1 and                                                       -- check if we have exactly 1 shortname stereotype WITH 
                  s.constrainedElement->size() = 1) then                                  -- exactly 1 specification
                let sName : String = s->first().specification.oclAsType(LiteralString).value in
                  -- version one - compare self_s shortname with Attribute &amp; Role NAMES - Python code validates according to this interpretation
                  let ancAttributes : Collection(Property) = ancestors.ownedAttribute
                                                                      ->reject(association &lt;> null) in  
                    ancAttributes->forAll(name.equalsIgnoreCase(sName))         -- This attribute's / Role's shortname is Valid if no any ancestor's 
                                                                                -- attribute's / Role's name is equal to it         

                  -- version two - compare self's shortname with Attribute &amp; Role SHORTNAMES - !!! Put select &amp; collect's result in a let expression 
--                  ancestors.ownedAttribute      -- CHECK WHETHER select filters nulls out -> in this case the following select should come one line after
--                           ->select(a | shortnames->exists(constrainedElement->includes(a)))    -- select those Attributes &amp; Roles where Shortname is given
--                           ->collect(a | shortnames->select(constrainedElement->includes(a))    -- collect the corresponding shortnames
--                                                   ->first()
--                                                   .specification
--                                                   .oclAsType(LiteralString).value)
--                           ->forAll(n | not n.equalsIgnoreCase(sName))                    -- This property's shortname is Valid if no any ancestor's property's
                                                                                            -- shortname equals to it         
              else     
                false                                                                     -- more than 1 shortname on the Property OR 
                                                                                          -- more than 1 specification belongs to the stereotype 
              endif
          else
            true
          endif
   else 
      true
   endif
else 
  true                                          -- this Property does not belong to a Class OR
                                                -- is an Association Role -> restriction does not apply - as current understanding
endif
</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="_18_5_3_ede0357_1515519798381_603643_5804" name="attrNavigationIsValid" visibility="public">
          <constrainedElement xmi:type="uml:Class" href="pathmap://UML_METAMODELS/UML.metamodel.uml#Property"/>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_18_5_3_ede0357_1515519798381_562280_5805" name="" visibility="public">
            <language>JavaScript</language>
            <body>function traverse(node, path) {
  if (path.length == 0) {
    return node
  } else {
    nextPathElementRole = getNamedElement(node.getOwnedAttribute(), path[0]);     
    
    if (nextPathElementRole != null) {
        nextPathElement = nextPathElementRole.getType(); 
        if (nextPathElement) {
            restOfPath = path.slice();
            restOfPath.shift();
            return traverse(nextPathElement, restOfPath);
        } else {
            return null;
        }
    } 
    
    return null;
  }
}

function getNamedElement(list, name) {
    if (list.length == 0) {
        return null;
    } else {
        li = list.listIterator();
        while (li.hasNext()) {
            nItem = li.next();
            if (nItem.name === name) {
                return nItem;
            }
        }
        
        return null;
    }
}

// Validation Rule
if (THIS.isDerived() &amp;&amp; THIS.association === null) {                           
  if (THIS.getDefaultValue()) {
    var expr = THIS.getDefaultValue().value
    var len = expr.length
    
    if (expr[0] == &quot;{&quot;) { 
      var exprPath = expr.substring(1, len-1).split(&quot;.&quot;);
  
      traverse( THIS.owner, exprPath) ? true : false;
    } else true;  // Attr is derived, Spec is given, but not in '{expr}' form, implies valid 
  } else false;   // Attr is derived, but has no Specification --> CLASS_VALIDATION_ERROR indicates this
} else true; 

</body>
          </specification>
        </ownedRule>
      </packagedElement>
      <packagedElement xmi:type="uml:Package" xmi:id="_18_5_1_ede0357_1506094392785_48974_5410" name="Class Validation" visibility="public" URI="">
        <ownedRule xmi:id="_18_5_1_ede0357_1506094392789_844913_5446" name="classExistenceOfRepresentation" visibility="public">
          <constrainedElement xmi:type="uml:Class" href="pathmap://UML_METAMODELS/UML.metamodel.uml#Class"/>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_18_5_1_ede0357_1506094392796_572604_5514" name="" visibility="public">
            <language>OCL2.0</language>
            <body>self.attribute->exists(a | a.oclIsKindOf( JudoProfile::representation ))</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="_18_5_1_ede0357_1506094392789_263159_5447" name="classExcessiveNumberOfRepresentations" visibility="public">
          <constrainedElement xmi:type="uml:Class" href="pathmap://UML_METAMODELS/UML.metamodel.uml#Class"/>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_18_5_1_ede0357_1506094392796_110334_5516" name="" visibility="public">
            <language>OCL2.0</language>
            <body>self.attribute->select(a | a.oclIsKindOf( JudoProfile::representation ))->size() &lt;= 1</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="_18_5_1_ede0357_1506094392789_655552_5448" name="classNamePattern" visibility="public">
          <constrainedElement xmi:type="uml:Class" href="pathmap://UML_METAMODELS/UML.metamodel.uml#Class"/>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_18_5_1_ede0357_1506094392796_960024_5518" name="" visibility="public">
            <language>OCL2.0</language>
            <body>not self.oclIsTypeOf(Class) or
not self.oclIsTypeOf(AssociationClass) or
   ((self.oclIsTypeOf(Class) or
     self.oclIsTypeOf(AssociationClass)) and
     self.name.matches('^[A-Za-z][A-Za-z0-9_]*$'))</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="_18_5_1_ede0357_1506094392789_658798_5449" name="classNoImplementationClassInheritance" visibility="public">
          <constrainedElement xmi:type="uml:Class" href="pathmap://UML_METAMODELS/UML.metamodel.uml#Class"/>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_18_5_1_ede0357_1506094392796_41552_5520" name="" visibility="public">
            <language>OCL2.0</language>
            <body>self.general->isEmpty() or
(not self.general->isEmpty() and
     self.general->forAll( g | not g.oclIsTypeOf( JudoProfile::implementation)))</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="_18_5_1_ede0357_1506094392790_955998_5450" name="classOneImplementationChild" visibility="public">
          <constrainedElement xmi:type="uml:Class" href="pathmap://UML_METAMODELS/UML.metamodel.uml#Class"/>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_18_5_1_ede0357_1506094392796_582568_5522" name="" visibility="public">
            <language>OCL2.0</language>
            <body>Class.allInstances()->select(c | c.general->includes( self) and c.oclIsTypeOf( JudoProfile::implementation) )->size() &lt;= 1</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="_18_5_3_ede0357_1515595787008_167717_5362" name="classNoCircularDependency" visibility="public">
          <constrainedElement xmi:type="uml:Class" href="pathmap://UML_METAMODELS/UML.metamodel.uml#Class"/>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_18_5_3_ede0357_1515595787009_359355_5363" name="" visibility="public">
            <language>OCL2.0</language>
            <body>let neighbours : Set(Class) = self.ownedAttribute
                                  .association->excluding(null)
                                  .memberEnd
                                  .UMLClass->excluding(null)
                                  ->asSet() in
    neighbours->closure(c | c.ownedAttribute->select(p | p.lower = 1 and p.upper = 1)
                             .association->excluding(null)
                             .memberEnd.UMLClass
                             ->asSet()
                             ->excluding(null)
                             ->excluding(c))->excludes(self)  </body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="_18_5_3_ede0357_1516198066766_787219_5100" name="classTraverseableValidationExpression" visibility="public">
          <constrainedElement xmi:type="uml:Stereotype" href="JudoProfile.profile.uml#_czZTw2ruEeeJzdLAONIxYA"/>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_18_5_3_ede0357_1516198066771_468742_5101" name="" visibility="public">
            <language>JavaScript</language>
            <body>testNashorn = load(&quot;nashorn:mozilla_compat.js&quot;);

importPackage(&quot;com.nomagic.magicdraw.core&quot;);
importPackage(&quot;com.nomagic.magicdraw.fileattachments&quot;);
importPackage(&quot;java.io&quot;);
importPackage(&quot;com.nomagic.magicdraw.uml&quot;);
importPackage(&quot;com.nomagic.magicdraw.magicreport.helper&quot;); // ElementHelper
importPackage(&quot;com.nomagic.uml2.ext.jmi.helpers&quot;); // StereotypesHelper

var logger = Application.getInstance().getGUILog();

function log(msg) {
    logger.log(&quot;VR >>   &quot; + msg);
}


function getType( obj )
{
  return Object.prototype.toString.call(obj);
}

function traverse(node, path) {
  if (!path || (path.length == 0)) {
    return node
  } else {
    nextPathElementRole = getNamedElement(node.getOwnedAttribute(), path[0]);     
    
    if (nextPathElementRole != null) {
        nextPathElement = nextPathElementRole.getType(); 
        if (nextPathElement) {
            restOfPath = path.slice();
            restOfPath.shift();
            return traverse(nextPathElement, restOfPath);
        } else {
            return null;
        }
    } 
    
    return null;
  }
}

function getNamedElement(list, name) {
    if (list.length == 0) {
        return null;
    } else {
        li = list.listIterator();
        while (li.hasNext()) {
            nItem = li.next();
            if (nItem.name == name) {
                return nItem;
            }
        }
        
        return null;
    }
}

function getAllOwningPackages(elmt, owners) {
    if (elmt == null) {
        return owners;
    }
    else {
        var newOwners = owners.slice();
        newOwners.push(elmt);
        return getAllOwningPackages(elmt.getOwningPackage(), newOwners);
    };
}

function isDomainElement(elmt) {
    return StereotypesHelper.hasStereotype(elmt, &quot;bo&quot;) ||
           StereotypesHelper.hasStereotype(elmt, &quot;dto&quot;) ||
           StereotypesHelper.hasStereotype(elmt, &quot;rest&quot;);
}

function isDomainClass(elmt) {
    var owningPkgs = getAllOwningPackages(elmt, []);
    return isDomainElement(elmt) ||
           owningPkgs.some(isDomainElement);
}

function isTypeOf(elmt, metaClassName) {
  return (ElementHelper.getMetaClassName(elmt) == metaClassName); 
}
function constrainedElements(elmt) {
    var constrainedElements = THIS.getConstrainedElement();
    return Java.from( constrainedElements.toArray()); 
}

function ownedElementsOfType(elmt, typeName) {
    return toA(elmt.getOwnedElement())
            .filter(function(e) { return isTypeOf(e, typeName)}) ;
}
function toA(list) {
    return Java.from(list.toArray());
}

function isTraversableDescription(elmt, path) {
    if (elmt == null)
        return true;

    var re = new RegExp('\{[a-zA-Z][a-zA-Z0-9_\.]+\}|[^{}]');
    var matched = re.exec(path);
    if ( matched !== null) {
        var subPath = matched[0].substr(1, matched[0].length-2); 
        return (traverse(elmt, subPath.split(&quot;.&quot;)) !== null)
    } else
        return false;
}


// - only &lt;&lt;validation>> stereotyped Constraints have this validation rule - so checking of this stereotype is not needed                                                   
if (constrainedElements(THIS).some(function (ctdElmt) {return isDomainClass(ctdElmt)})) {                                                   
  ownedElementsOfType(THIS, &quot;Opaque Expression&quot;)                          // get OpaqueExpressions of the Constraint 
   .map(function(e) {return toA(e.getBody())})                          // get bodies of the expressions
   .reduce(function (acc, val) {return acc.concat(val)}, [])            // flatten the resulting nested array struct [[a b][c d][e]] --> [a b c d e]
   .every(function(e) {  // log(&quot;e :: &quot; + e)                            // check if EACH (->'every') body text 'starts' with a traverseable dotted expr.
                         return constrainedElements(THIS).every(function (ctdElmt) { 
                                                                return isTraversableDescription(ctdElmt, e)})})
} else
    true;        </body>
          </specification>
        </ownedRule>
      </packagedElement>
      <packagedElement xmi:type="uml:Package" xmi:id="_18_5_1_ede0357_1506094392786_200889_5411" name="StateMachine Validation" visibility="public" URI="">
        <ownedRule xmi:id="_18_5_1_ede0357_1506094392790_601865_5452" name="smTransOpOwnerIsTransOwnerOrParent" visibility="public">
          <constrainedElement xmi:type="uml:Class" href="pathmap://UML_METAMODELS/UML.metamodel.uml#Transition"/>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_18_5_1_ede0357_1506094392796_292059_5524" name="" visibility="public">
            <language>OCL2.0</language>
            <body>let smOwner : Element = self.container.stateMachine.owner in
    self.effect.oclIsUndefined() or
    self.effect.specification.oclIsUndefined() or

-- no Interface is seeked for operation ownership - only Class
-- sm owner is implementation and operation owner is either this class or its parent
    if smOwner.oclIsTypeOf(JudoProfile::implementation) then
      (self.effect.specification.oclAsType(Operation).owner  = smOwner or 
       smOwner.oclAsType(Class)
              .generalization
              ->exists(g | g.general = self.effect
                                           .specification
                                           .oclAsType(Operation)
                                           .owner
                                           .oclAsType(Class)))
      else
        self.effect.specification.oclAsType(Operation).owner  = smOwner
      endif</body>
          </specification>
        </ownedRule>
      </packagedElement>
      <packagedElement xmi:type="uml:Package" xmi:id="_18_5_1_ede0357_1506094392786_385328_5412" name="Domain Validation" visibility="public" URI="">
        <ownedRule xmi:id="_18_5_1_ede0357_1506094392790_25056_5454" name="domainUniqueName" visibility="public">
          <constrainedElement xmi:type="uml:Stereotype" href="JudoProfile.profile.uml#_czZTXWruEeeJzdLAONIxYA"/>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_18_5_1_ede0357_1506094392797_754788_5526" name="" visibility="public">
            <language>OCL2.0</language>
            <body>bo.allInstances()->select(p | p.oclIsTypeOf(Package) and p &lt;> self)->forAll(p | p.name &lt;> self.name)</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="_18_5_1_ede0357_1506094392790_598256_5455" name="domainUniqueShortName" visibility="public">
          <constrainedElement xmi:type="uml:Stereotype" href="JudoProfile.profile.uml#_czZTXWruEeeJzdLAONIxYA"/>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_18_5_1_ede0357_1506094392797_139845_5528" name="" visibility="public">
            <language>OCL2.0</language>
            <body>not this.oclIsTypeOf(shortname) or
   (this.oclIsTypeOf(shortname) and
let shortnames : Collection(shortname) = shortname.allInstances() in  
    let s : Sequence(shortname) = shortname.allInstances()->select( sn | sn.constrainedElement->includes(self) )->asSequence() in
        let  otherBOs  : Sequence(bo) = bo.allInstances()->excluding(self)->asSequence() in
        s->size() = 1 and
        s.constrainedElement->size() = 1 and
        shortnames->select(sn | sn.specification.oclAsType(LiteralString).value = 
                                 s->first().specification.oclAsType(LiteralString).value)->select( sn | sn.constrainedElement->excludesAll( otherBOs ))->size() = 0)
</body>
          </specification>
        </ownedRule>
      </packagedElement>
    </packagedElement>
    <packagedElement xmi:type="uml:Package" xmi:id="_18_5_2_1c100dd_1511936867791_618924_11693" name="TO DOs" visibility="public" URI=""/>
    <profileApplication xmi:id="_11_5_f720368_1159529670215_231387_1profileApplicationPIM_Validation_Profile">
      <eAnnotations xmi:id="_0KYRpSf0EeuFcMB2y3vzaw" source="http://www.eclipse.org/uml2/2.0.0/UML">
        <references xmi:type="ecore:EPackage" href="UML_Standard_Profile.Validation_Profile.profile.uml#_z6bxIif0EeuFcMB2y3vzaw"/>
      </eAnnotations>
      <appliedProfile href="UML_Standard_Profile.Validation_Profile.profile.uml#_11_5_f720368_1159529670215_231387_1"/>
    </profileApplication>
    <profileApplication xmi:id="_be00301_1073394351331_445580_2profileApplicationPIM_Validation_Profile">
      <eAnnotations xmi:id="_0K7EMCf0EeuFcMB2y3vzaw" source="http://www.eclipse.org/uml2/2.0.0/UML">
        <references xmi:type="ecore:EPackage" href="UML_Standard_Profile.MagicDraw_Profile.profile.uml#_z57a0if0EeuFcMB2y3vzaw"/>
      </eAnnotations>
      <appliedProfile href="UML_Standard_Profile.MagicDraw_Profile.profile.uml#_be00301_1073394351331_445580_2"/>
    </profileApplication>
  </uml:Profile>
  <ValidationProfile:validationSuite xmi:id="_0KY4sCf0EeuFcMB2y3vzaw" base_Package="_18_5_1_ede0357_1506094392786_385328_5412"/>
  <ValidationProfile:validationSuite xmi:id="_0KY4sSf0EeuFcMB2y3vzaw" base_Package="_18_5_1_ede0357_1506094392786_200889_5411"/>
  <ValidationProfile:validationSuite xmi:id="_0KY4sif0EeuFcMB2y3vzaw" base_Package="_18_5_1_ede0357_1506094392785_48974_5410"/>
  <ValidationProfile:validationSuite xmi:id="_0KY4syf0EeuFcMB2y3vzaw" base_Package="_18_5_1_ede0357_1506094392785_535919_5409"/>
  <ValidationProfile:validationSuite xmi:id="_0KY4tCf0EeuFcMB2y3vzaw" base_Package="_18_5_1_ede0357_1506094392785_637570_5408"/>
  <ValidationProfile:validationSuite xmi:id="_0KY4tSf0EeuFcMB2y3vzaw" base_Package="_18_5_1_ede0357_1506094392785_566297_5407"/>
  <ValidationProfile:validationRule xmi:id="_0KbU8yf0EeuFcMB2y3vzaw" base_Constraint="_18_5_1_ede0357_1506094392787_247237_5426" abbreviation="PIM::VISIBILITY" errorMessage="Private association end." severity="warning"/>
  <ValidationProfile:validationRule xmi:id="_0KbU9Cf0EeuFcMB2y3vzaw" base_Constraint="_18_5_1_ede0357_1506094392790_25056_5454" abbreviation="PIM::NAME" errorMessage="Domain does not have unique shortname in the application"/>
  <ValidationProfile:validationRule xmi:id="_0KbU9Sf0EeuFcMB2y3vzaw" base_Constraint="_18_5_1_ede0357_1506094392790_601865_5452" abbreviation="PIM::STATEMACHINE" errorMessage="External operation reference."/>
  <ValidationProfile:validationRule xmi:id="_0KbU9if0EeuFcMB2y3vzaw" base_Constraint="_18_5_3_ede0357_1515595787008_167717_5362" abbreviation="PIM::REFERENCE" errorMessage="Circular mandatory dependency between classes"/>
  <ValidationProfile:validationRule xmi:id="_0Kb8ACf0EeuFcMB2y3vzaw" base_Constraint="_18_5_3_ede0357_1516198066766_787219_5100" abbreviation="PIM::NAVIGATION"/>
  <ValidationProfile:validationRule xmi:id="_0Kb8ASf0EeuFcMB2y3vzaw" base_Constraint="_18_5_1_ede0357_1506094392790_955998_5450" abbreviation="PIM::INHERITANCE" errorMessage="Class has more than one subtypes with implementation stereotype."/>
  <ValidationProfile:validationRule xmi:id="_0Kb8Aif0EeuFcMB2y3vzaw" base_Constraint="_18_5_1_ede0357_1506094392789_655552_5448" abbreviation="PIM::NAME" errorMessage="Wrong class name."/>
  <ValidationProfile:validationRule xmi:id="_0Kb8Ayf0EeuFcMB2y3vzaw" base_Constraint="_18_5_1_ede0357_1506094392789_658798_5449" abbreviation="PIM::INHERITANCE" errorMessage="Class can not be inherited from an implementation class. "/>
  <ValidationProfile:validationRule xmi:id="_0Kb8BCf0EeuFcMB2y3vzaw" base_Constraint="_18_5_1_ede0357_1506094392789_263159_5447" abbreviation="PIM::REPRESENTATION " errorMessage="Class has more than one representation attributes." severity="warning"/>
  <ValidationProfile:validationRule xmi:id="_0Kb8BSf0EeuFcMB2y3vzaw" base_Constraint="_18_5_1_ede0357_1506094392789_844913_5446" abbreviation="PIM::REPRESENTATION" errorMessage="Class has no representation attribute." severity="warning"/>
  <ValidationProfile:validationRule xmi:id="_0Kb8Bif0EeuFcMB2y3vzaw" base_Constraint="_18_5_3_ede0357_1515519798381_603643_5804"/>
  <ValidationProfile:validationRule xmi:id="_0Kb8Byf0EeuFcMB2y3vzaw" base_Constraint="_18_5_3_ede0357_1515503285262_993282_5410" abbreviation="PIM::NAME" errorMessage="Attribute does not have unique shortname in the application"/>
  <ValidationProfile:validationRule xmi:id="_0KcjECf0EeuFcMB2y3vzaw" base_Constraint="_18_5_3_ede0357_1515493439170_730407_5383"/>
  <ValidationProfile:validationRule xmi:id="_0KcjESf0EeuFcMB2y3vzaw" base_Constraint="_18_5_1_ede0357_1506094392789_741427_5444" abbreviation="PIM::ASSOCIATION" errorMessage="Mandatory association end should not be a list."/>
  <ValidationProfile:validationRule xmi:id="_0KcjEif0EeuFcMB2y3vzaw" base_Constraint="_18_5_1_ede0357_1506094392789_376695_5442" abbreviation="PIM::DERIVATION" errorMessage="Invalid validation rule expression"/>
  <ValidationProfile:validationRule xmi:id="_0KcjEyf0EeuFcMB2y3vzaw" base_Constraint="_18_5_1_ede0357_1506094392789_22860_5440" abbreviation="PIM::NAME" errorMessage="Wrong attribute name."/>
  <ValidationProfile:validationRule xmi:id="_0KcjFCf0EeuFcMB2y3vzaw" base_Constraint="_18_5_1_ede0357_1506094392789_737484_5438" abbreviation="PIM::NAME" errorMessage="Too long short name (>6)." severity="warning"/>
  <ValidationProfile:validationRule xmi:id="_0KcjFSf0EeuFcMB2y3vzaw" base_Constraint="_18_5_3_ede0357_1515521931989_884946_5852" abbreviation="PIM::NAVIGATION" errorMessage="Derived association has navigation error in its value expression."/>
  <ValidationProfile:validationRule xmi:id="_0KcjFif0EeuFcMB2y3vzaw" base_Constraint="_18_5_3_ede0357_1515503349985_477267_5423"/>
  <ValidationProfile:validationRule xmi:id="_0KcjFyf0EeuFcMB2y3vzaw" base_Constraint="_18_5_3_ede0357_1515503349984_222735_5422"/>
  <ValidationProfile:validationRule xmi:id="_0KcjGCf0EeuFcMB2y3vzaw" base_Constraint="_18_5_1_ede0357_1506094392788_135467_5434" abbreviation="PIM::SPECIFICATION" errorMessage="Derived association has no description."/>
  <ValidationProfile:validationRule xmi:id="_0KcjGSf0EeuFcMB2y3vzaw" base_Constraint="_18_5_1_ede0357_1506094392788_37978_5433" abbreviation="PIM::SPECIFICATION" errorMessage="Derived association has no expression"/>
  <ValidationProfile:validationRule xmi:id="_0KdKICf0EeuFcMB2y3vzaw" base_Constraint="_18_5_1_ede0357_1506094392788_115595_5432" abbreviation="PIM::NAVIGATION" errorMessage="Invalid aggregation."/>
  <ValidationProfile:validationRule xmi:id="_0KdKISf0EeuFcMB2y3vzaw" base_Constraint="_18_5_1_ede0357_1506094392788_234479_5431" abbreviation="PIM::MULTIPLICITY" errorMessage="Invalid composition."/>
  <ValidationProfile:validationRule xmi:id="_0KdKIif0EeuFcMB2y3vzaw" base_Constraint="_18_5_1_ede0357_1506094392788_265051_5430" abbreviation="PIM::MULTIPLICITY" errorMessage="Association is not allowed to be mandatory on both ends."/>
  <ValidationProfile:validationRule xmi:id="_0KdKIyf0EeuFcMB2y3vzaw" base_Constraint="_18_5_1_ede0357_1506094392788_105698_5429" abbreviation="PIM::MULTIPLICITY" errorMessage="Mandatory association end should not be a list."/>
  <ValidationProfile:validationRule xmi:id="_0KdKJCf0EeuFcMB2y3vzaw" base_Constraint="_18_5_1_ede0357_1506094392788_752552_5428" abbreviation="PIM::NAVIGATION" errorMessage="Mandatory association end should be navigable."/>
  <ValidationProfile:validationRule xmi:id="_0KdKJSf0EeuFcMB2y3vzaw" base_Constraint="_18_5_1_ede0357_1506094392787_390540_5427" abbreviation="PIM::NAME" errorMessage="Missing role name."/>
  <ValidationProfile:validationRule xmi:id="_0KdKJif0EeuFcMB2y3vzaw" base_Constraint="_18_5_1_ede0357_1506094392789_505509_5441" abbreviation="PIM::NAME"/>
  <ValidationProfile:validationRule xmi:id="_0KdKJyf0EeuFcMB2y3vzaw" base_Constraint="_18_5_1_ede0357_1506094392790_107074_5460" abbreviation="IN_TESTING_PHASE"/>
  <ValidationProfile:validationRule xmi:id="_0KdKKCf0EeuFcMB2y3vzaw" base_Constraint="_18_5_1_ede0357_1506094392790_143624_5457" abbreviation="IN_TESTING_PHASE"/>
  <MagicDrawProfile:TODO_Owner xmi:id="_0K7EMSf0EeuFcMB2y3vzaw" base_Element="_18_5_1_ede0357_1506094392787_247237_5426">
    <TODO>&lt;html>
  &lt;head>
		&lt;style>
			p {padding:0px; margin:0px;}
		&lt;/style>
	&lt;/head>
  &lt;body>
    &lt;p>
&amp;#160;

    &lt;/p>

&lt;/body>
&lt;/html></TODO>
  </MagicDrawProfile:TODO_Owner>
  <MagicDrawProfile:TODO_Owner xmi:id="_0K7rQSf0EeuFcMB2y3vzaw" base_Element="_18_5_1_ede0357_1506094392790_598256_5455">
    <TODO>&lt;html>
  &lt;head>
		&lt;style>
			p {padding:0px; margin:0px;}
		&lt;/style>
	&lt;/head>
  &lt;body>
    &lt;ul>
      &lt;li>
[Istv&amp;aacute;n] Ellen&amp;#337;rizend&amp;#337;! T&amp;eacute;nyleg kell minden &lt;b>bo&lt;/b>-s csomagra egy &lt;b>shortname&lt;/b> constraint? A &lt;b>Car &lt;/b>modellben p&amp;eacute;ld&amp;aacute;ul nincs ilyen.

      &lt;/li>
      &lt;li>
[Tibor] Done (TODO t&amp;ouml;rl&amp;eacute;sre ker&amp;uuml;l, ha a jelenlegi TODO&amp;#160;csomg elk&amp;eacute;sz&amp;uuml;lt)

      &lt;/li>
    &lt;/ul>
    &lt;p>
&amp;#160;

    &lt;/p>

&lt;/body>
&lt;/html></TODO>
  </MagicDrawProfile:TODO_Owner>
  <MagicDrawProfile:TODO_Owner xmi:id="_0K7rQif0EeuFcMB2y3vzaw" base_Element="_18_5_1_ede0357_1506094392789_655552_5448">
    <TODO>&lt;html>
  &lt;head>
		&lt;style>
			p {padding:0px; margin:0px;}
		&lt;/style>
	&lt;/head>
  &lt;body>
    &lt;ul>
      &lt;li>
[Istv&amp;aacute;n] Ez &amp;iacute;gy fel&amp;uuml;lvizsg&amp;aacute;land&amp;oacute;, mert vonatkozik minden &lt;b>Class&lt;/b> -b&amp;oacute;l sz&amp;aacute;rmaz&amp;oacute; elemre is, &amp;iacute;gy pl. egy &lt;b>StateMachine&lt;/b>-re is. Ennek kapcs&amp;aacute;n &amp;aacute;tgondoland&amp;oacute; az is, hogy a &lt;b>StateMachine&lt;/b>-b&amp;#337;l minek is kellene gener&amp;aacute;l&amp;oacute;dnia ill. j&amp;oacute;-e a mostani koncepci&amp;oacute; (azaz, hogy vmif&amp;eacute;le property j&amp;ouml;n l&amp;eacute;tre)?

      &lt;/li>
      &lt;li>
[Tibor] Done        
&lt;br>A Class hierarchi&amp;aacute;b&amp;oacute;l a Class-t &amp;eacute;s az AssociationClass-t v&amp;aacute;lasztottam ki egyel&amp;#337;re.        
&lt;br>(TODO t&amp;ouml;rl&amp;eacute;sre ker&amp;uuml;l, ha a jelenlegi TODO&amp;#160;csomg elk&amp;eacute;sz&amp;uuml;lt)

      &lt;/li>
    &lt;/ul>
&lt;/body>
&lt;/html></TODO>
  </MagicDrawProfile:TODO_Owner>
  <MagicDrawProfile:TODO_Owner xmi:id="_0K7rQyf0EeuFcMB2y3vzaw" base_Element="_18_5_1_ede0357_1506094392789_22860_5440">
    <TODO>&lt;html>
  &lt;head>
		&lt;style>
			p {padding:0px; margin:0px;}
		&lt;/style>
	&lt;/head>
  &lt;body>
    &lt;ul>
      &lt;li>
[Istv&amp;aacute;n] Fel&amp;uuml;lvizsg&amp;aacute;land&amp;oacute;! Ez a szab&amp;aacute;ly j&amp;oacute; es&amp;eacute;llyel csak a specifikus stereotype-&amp;uacute; &lt;b>package&lt;/b>-ben &lt;b>class&lt;/b>-okra l&amp;eacute;vő (ill. specifikus stereotype-al ell&amp;aacute;tott &lt;b>class&lt;/b>-okra) igaz.
        &lt;ul>
          &lt;li>
K&amp;eacute;rd&amp;eacute;s:&amp;#160;&lt;i>melyik ez a specifikus stereotype ill. melyek ezek?&lt;/i>

          &lt;/li>
        &lt;/ul>

      &lt;/li>
    &lt;/ul>
    &lt;p>
&amp;#160;

    &lt;/p>

&lt;/body>
&lt;/html></TODO>
  </MagicDrawProfile:TODO_Owner>
  <MagicDrawProfile:TODO_Owner xmi:id="_0K7rRCf0EeuFcMB2y3vzaw" base_Element="_18_5_1_ede0357_1506094392788_115595_5432">
    <TODO>&lt;html>
  &lt;head>
		&lt;style>
			p {padding:0px; margin:0px;}
		&lt;/style>
	&lt;/head>
  &lt;body>
    &lt;ul>
      &lt;li>
[Istvan] Fel&amp;uuml;lvizsg&amp;aacute;land&amp;oacute;! Val&amp;oacute;sz&amp;iacute;n&amp;#369;leg enn&amp;eacute;l is fel van cser&amp;eacute;lve az agggreg&amp;aacute;ci&amp;oacute;s v&amp;eacute;gpontra ill. az ellenkez&amp;#337; v&amp;eacute;gpontra vonatkoz&amp;oacute; szab&amp;aacute;ly.

      &lt;/li>
      &lt;li>
[Tibor] Done

      &lt;/li>
    &lt;/ul>
&lt;/body>
&lt;/html></TODO>
  </MagicDrawProfile:TODO_Owner>
  <MagicDrawProfile:TODO_Owner xmi:id="_0K8SUCf0EeuFcMB2y3vzaw" base_Element="_18_5_1_ede0357_1506094392788_234479_5431">
    <TODO>&lt;html>
  &lt;head>
		&lt;style>
			p {padding:0px; margin:0px;}
		&lt;/style>
	&lt;/head>
  &lt;body>
    &lt;ul>
      &lt;li>
[Istvan] Nem t&amp;#369;nik j&amp;oacute;nak, mert egy kompozit aggreg&amp;aacute;lt attrib&amp;uacute;tum lehet [0..*] multiplicit&amp;aacute;ssal. Azt gondolom, hogy itt fel van cser&amp;eacute;lve a k&amp;eacute;t oldal. Modell szinten nem az a kompozit attrib&amp;uacute;tum, ahol a rombusz van, hanem az &amp;aacute;tellenes.

      &lt;/li>
      &lt;li>
[Tibor] Done

      &lt;/li>
    &lt;/ul>
&lt;/body>
&lt;/html></TODO>
  </MagicDrawProfile:TODO_Owner>
  <MagicDrawProfile:TODO_Owner xmi:id="_0K8SUSf0EeuFcMB2y3vzaw" base_Element="_18_5_1_ede0357_1506094392788_105698_5429">
    <TODO>&lt;html>
  &lt;head>
		&lt;style>
			p {padding:0px; margin:0px;}
		&lt;/style>
	&lt;/head>
  &lt;body>
    &lt;ul>
      &lt;li>
[Istvan] Ez nem t&amp;#369;nik j&amp;oacute;nak! pl. egy kompozit aggreg&amp;aacute;ci&amp;oacute; befoglal&amp;oacute; ('eg&amp;eacute;sz') oldal&amp;aacute;n&amp;aacute;l a multiplicit&amp;aacute;s [1] vagy [0..1], &amp;iacute;gy az mindenk&amp;eacute;ppen elbukik ezen a szab&amp;aacute;lyon.

      &lt;/li>
      &lt;li>
[Tibor] ezeken a helyzeteken nem kellene elbuknia:
        &lt;ul>
          &lt;li>
ha multiplicity =&amp;#160;1, akkor a szab&amp;aacute;ly m&amp;aacute;sodik fele szerint valid -&amp;gt; (p.lower &amp;lt;&amp;gt; 0 and p.upper =&amp;#160;1)

          &lt;/li>
          &lt;li>
ha multiplicity = [0..1], akkor a szab&amp;aacute;ly els&amp;#337; fele szerint valid -&amp;gt; p.lower =&amp;#160;0

          &lt;/li>
        &lt;/ul>

      &lt;/li>
    &lt;/ul>
&lt;/body>
&lt;/html></TODO>
  </MagicDrawProfile:TODO_Owner>
  <MagicDrawProfile:TODO_Owner xmi:id="_0K8SUif0EeuFcMB2y3vzaw" base_Element="_18_5_1_ede0357_1506094392785_566297_5407">
    <TODO>&lt;html>
  &lt;head>
		&lt;style>
			p {padding:0px; margin:0px;}
		&lt;/style>
	&lt;/head>
  &lt;body>
    &lt;ul>
      &lt;li>
[Istvan] Az &amp;ouml;sszes Role-ra vonatkoz&amp;oacute; valid&amp;aacute;ci&amp;oacute;s szab&amp;aacute;lyt fel&amp;uuml;l kellene vizsg&amp;aacute;lni, hogy ne &amp;aacute;ltal&amp;aacute;nosan minden asszoci&amp;aacute;ci&amp;oacute;s v&amp;eacute;gpontra vonatkozzanak, hanem csak a relev&amp;aacute;ns (? - bo/dto) elemekre vonatkozzanak.

      &lt;/li>
    &lt;/ul>
    &lt;p>
&amp;#160;

    &lt;/p>

&lt;/body>
&lt;/html></TODO>
  </MagicDrawProfile:TODO_Owner>
  <MagicDrawProfile:SmartPackage xmi:id="_0LZlWCf0EeuFcMB2y3vzaw" base_Package="_18_5_2_1c100dd_1511936867791_618924_11693" query="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;yes&quot;?>&#xA;&lt;unionExpressionSpecification xmlns=&quot;http://www.nomagic.com/schemas/MagicDraw/StructuredExpression/2013&quot;>&#xA;    &lt;taggedValues>&#xA;        &lt;entry key=&quot;name&quot;>&#xA;            &lt;value>Query&lt;/value>&#xA;        &lt;/entry>&#xA;        &lt;entry key=&quot;ROOT_UNION&quot;>&#xA;            &lt;value>true&lt;/value>&#xA;        &lt;/entry>&#xA;    &lt;/taggedValues>&#xA;    &lt;value xsi:type=&quot;callExpressionSpecification&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;>&#xA;        &lt;taggedValues>&#xA;            &lt;entry key=&quot;name&quot;>&#xA;                &lt;value>Find1&lt;/value>&#xA;            &lt;/entry>&#xA;        &lt;/taggedValues>&#xA;        &lt;argument xsi:type=&quot;stringExpressionSpecification&quot;>&#xA;            &lt;value>*&lt;/value>&#xA;        &lt;/argument>&#xA;        &lt;argument xsi:type=&quot;collectionExpressionSpecification&quot; ordered=&quot;false&quot; unique=&quot;false&quot;>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_18_5_1_ede0357_1506094392784_666626_5403&quot;/>&#xA;        &lt;/argument>&#xA;        &lt;argument xsi:type=&quot;collectionExpressionSpecification&quot; ordered=&quot;false&quot; unique=&quot;false&quot;>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_9_0_62a020a_1105704885806_49506_8067&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_9_0_62a020a_1105704904303_180462_9075&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_9_0_62a020a_1105704904246_626651_9067&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_9_0_62a020a_1105704888495_278169_8353&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_9_0_62a020a_1105704910250_737922_9241&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_9_0_62a020a_1105704892254_121736_8466&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_9_0_62a020a_1105704893490_637380_8563&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_9_0_62a020a_1105704893559_436315_8572&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_9_0_62a020a_1105704921570_774139_9419&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_9_0_62a020a_1105704919482_11686_9288&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_9_0_62a020a_1105704896930_275083_8743&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_9_0_62a020a_1105704910072_346755_9217&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_18_5beta_8c6027f_1473947368359_594186_4209&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_9_0_62a020a_1105704907801_516752_9167&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_9_0_62a020a_1105704928546_39588_9532&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_9_0_62a020a_1105704885473_18793_7971&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_9_0_62a020a_1105704903198_579542_8992&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_18_1beta_8760276_1412082225355_110096_3917&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_17_0_6790224_1293095142844_709751_62553&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_9_0_62a020a_1105704897450_215481_8815&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_9_0_62a020a_1105704887225_574298_8173&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_9_0_62a020a_1105704906416_900968_9100&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_9_0_62a020a_1105704887160_569760_8165&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_9_0_62a020a_1105704921503_594569_9411&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_9_0_62a020a_1105704906476_241761_9108&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_9_0_62a020a_1105704885343_144138_7929&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_9_0_62a020a_1105704901157_279901_8966&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_9_0_62a020a_1105704892213_544240_8458&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_9_0_62a020a_1105704897377_529572_8807&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_9_0_62a020a_1105704896825_731209_8727&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_9_0_62a020a_1105704910004_908767_9209&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_9_0_62a020a_1105704884500_158087_7604&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_9_0_62a020a_1105704884486_457683_7596&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_9_0_62a020a_1105704887866_658911_8238&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_9_0_62a020a_1105704884825_217290_7749&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_9_0_62a020a_1105704928458_703520_9522&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_9_0_62a020a_1105704910326_404756_9249&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_15_0EAPbeta1_62a020a_1188227547971_982857_4117&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_9_0_62a020a_1105704892132_915377_8442&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_9_0_62a020a_1105704933044_828010_9624&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_9_0_62a020a_1105704884559_152470_7636&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_9_0_62a020a_1105704884546_526097_7628&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_9_0_62a020a_1105704888127_412468_8278&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_9_0_62a020a_1105704885023_176929_7830&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_9_0_62a020a_1105704893364_624946_8539&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_9_0_62a020a_1105704897221_909420_8783&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_9_0_62a020a_1105704904181_963443_9058&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_9_0_62a020a_1105704896464_764149_8671&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_11_5EAPbeta_be00301_1148632817486_155219_3&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_9_0_62a020a_1105704920907_627672_9345&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_9_0_62a020a_1105704885376_903292_7939&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_9_0_62a020a_1105704921751_161098_9437&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_9_0_62a020a_1105704885833_713624_8075&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_9_0_62a020a_1105704927953_507488_9465&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_9_0_62a020a_1105704928019_111206_9473&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_16_8beta_8f90291_1257409433754_907450_344&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_17_0_2beta_1_8ba0276_1328170763457_888031_1701&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_9_0_62a020a_1105704897273_173302_8791&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_9_0_62a020a_1105704896512_837942_8679&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_17_0_1beta1_641020e_1303285297245_245033_1703&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_9_0_62a020a_1105704928167_806350_9490&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_9_0_62a020a_1106296071977_61607_0&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_17_0_2_903028d_1341238576589_798230_2132&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_9_0_62a020a_1105704895827_777691_8591&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_9_0_62a020a_1105704896124_718126_8639&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_9_0_62a020a_1105704895912_517624_8607&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_15_0EAPbeta1_62a020a_1188227447739_704079_3844&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_9_0_62a020a_1105704885047_824117_7838&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_15_0EAPbeta1_62a020a_1188227198752_444342_394&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_16_8beta_8e8028e_1259661314325_318849_1000&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_16_8beta_8e8028e_1259661719889_163446_1943&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_9_0_62a020a_1105704885400_895774_7947&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_9_0_62a020a_1105704885423_380971_7955&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_9_0_62a020a_1105704898275_476746_8872&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_9_0_62a020a_1105704928255_655549_9498&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_9_0_62a020a_1105704888868_726848_8417&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_9_0_62a020a_1105704898100_833704_8847&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_9_0_62a020a_1105704898151_886287_8855&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_9_0_62a020a_1105704885754_51496_8051&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_9_0_62a020a_1105704919558_745543_9296&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_9_0_62a020a_1105704941686_391373_9690&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_9_0_62a020a_1105704941342_247264_9658&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_9_0_62a020a_1105704919767_187766_9320&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_9_0_62a020a_1105704932975_359279_9616&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_9_0_62a020a_1105704921438_294509_9403&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_9_0_62a020a_1105704921375_808153_9395&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_9_0_62a020a_1105704884790_409021_7733&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_9_0_62a020a_1105704887836_236837_8230&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_9_0_62a020a_1105704885195_432731_7879&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_9_0_62a020a_1105704927407_799308_9455&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_11_5EAPbeta_be00301_1148642764910_998510_268&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_9_0_62a020a_1105704941500_175567_9674&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_9_0_62a020a_1105704919620_597571_9304&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_9_0_62a020a_1105704899911_307257_8888&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_9_0_62a020a_1105704899836_442270_8880&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_9_0_62a020a_1105704893447_508814_8555&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_9_0_62a020a_1105704887035_839239_8133&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_9_0_62a020a_1105704885251_933969_7897&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_9_0_62a020a_1105704885650_203318_8019&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_9_0_62a020a_1105704887901_869040_8246&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_9_0_62a020a_1105704887391_255251_8214&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_9_0_62a020a_1105704887361_983947_8206&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_9_0_62a020a_1105704887302_348848_8190&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_9_0_62a020a_1105704884649_358727_7668&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_9_0_62a020a_1105704884665_934832_7676&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_9_0_62a020a_1105704921265_575333_9383&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_9_0_62a020a_1105704920844_549689_9337&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_17_0_2beta_903028d_1330931963982_116619_1920&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_17_0_2beta_903028d_1330931963978_770627_1918&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_9_0_62a020a_1105704887938_842870_8254&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_9_0_62a020a_1105704897169_828570_8775&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_9_0_62a020a_1105704897068_938981_8759&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_9_0_62a020a_1105704897562_260957_8831&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_9_0_62a020a_1105704884985_340030_7814&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_9_0_62a020a_1105704884947_594252_7798&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_9_0_62a020a_1105704885003_342880_7822&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_17_0beta_f720368_1291218250816_792539_1888&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_9_0_62a020a_1105704884964_577317_7806&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_9_0_62a020a_1105704885703_732670_8035&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_9_0_62a020a_1105704892169_230137_8450&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_9_0_62a020a_1105704932261_613241_9541&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_9_0_62a020a_1105704921684_282475_9429&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_9_0_62a020a_1105704888195_415551_8289&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_9_0_62a020a_1105704888825_465279_8409&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_12_0EAPbeta_be00301_1157552487453_470617_1&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_18_0beta_8ae027d_1386158535775_73017_66401&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_18_0beta_8ae027d_1386161621998_108497_15198&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_9_0_62a020a_1105704920340_825592_9329&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_18_1beta_8850271_1414498574471_127583_3926&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_9_0_62a020a_1105704928097_912503_9482&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_17_0_6790224_1293095142857_513436_62556&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_17_0_6790224_1293095142848_235254_62554&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_9_0_62a020a_1105704893403_369088_8547&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_9_0_62a020a_1105704888303_261838_8313&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_9_0_62a020a_1105704886256_729983_8101&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_9_0_62a020a_1105704884771_85405_7725&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_9_0_62a020a_1105704884738_770774_7709&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_9_0_62a020a_1105704884698_645168_7692&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_9_0_62a020a_1105704886374_19265_8125&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_9_0_62a020a_1105704885298_713292_7913&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_9_0_62a020a_1105704885319_392905_7921&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_9_0_62a020a_1105704885624_927264_8011&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_9_0_62a020a_1105704884528_587873_7620&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_18_0beta_8ae027d_1386578663547_787789_15180&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_18_3beta_88f027b_1441201719355_877721_4154&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_9_0_62a020a_1105704911199_900094_9269&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_9_0_62a020a_1105704885449_652048_7963&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_9_0_62a020a_1105704941771_497275_9699&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_9_0_62a020a_1105704941572_937414_9682&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_9_0_62a020a_1105704884574_96724_7644&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_11_5_be00301_1151908232109_493412_157&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_9_0_62a020a_1105704932354_30061_9549&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_9_0_62a020a_1105704932517_261495_9567&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_9_0_62a020a_1105704932447_458425_9559&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_9_0_62a020a_1105704932903_534887_9608&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_9_0_62a020a_1105704910191_31265_9233&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_9_0_62a020a_1105704903747_836193_9001&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_9_0_62a020a_1105704903874_864575_9017&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_9_0_62a020a_1105704897124_532491_8767&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_9_0_62a020a_1105704904049_817856_9042&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_9_0_62a020a_1105704904103_710448_9050&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_9_0_62a020a_1105704896624_101949_8695&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_9_0_62a020a_1105704896721_782477_8711&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_9_0_62a020a_1105704909858_831429_9193&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_9_0_62a020a_1105704885860_877151_8083&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_9_0_62a020a_1105704903822_36535_9009&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_9_0_62a020a_1105704901217_803639_8974&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_15_0EAPbeta1_62a020a_1188227280978_761467_467&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_9_0_62a020a_1105704933219_299257_9640&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_9_0_62a020a_1105704896878_576411_8735&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_9_0_62a020a_1105704910133_619352_9225&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_9_0_62a020a_1105704904356_235357_9083&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_18_1_8760276_1416414449210_764904_3981&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_9_0_62a020a_1105704897504_144024_8823&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_9_0_62a020a_1105704887121_121073_8157&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_9_0_62a020a_1105704892401_738929_8490&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_9_0_62a020a_1105704907512_504308_9134&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_9_0_62a020a_1105704907577_698817_9142&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_9_0_62a020a_1105704907408_866714_9126&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_9_0_62a020a_1105704885275_885607_7905&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_17_0_5beta_f720368_1373961709543_89140_3280&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_9_0_62a020a_1105704903928_843196_9025&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_16_0beta1_62a020a_1219131557942_89085_240&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_9_0_62a020a_1105704932587_977586_9575&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_9_0_62a020a_1105704888416_506222_8337&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_9_0_62a020a_1105704932656_223024_9583&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_9_0_62a020a_1105704941426_574917_9666&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_9_0_62a020a_1105704900715_890391_8913&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_9_0_62a020a_1105704892095_330690_8434&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_9_0_62a020a_1105704885889_983575_8091&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_12_0EAPbeta_be00301_1157702393377_93867_763&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_12_0EAPbeta_be00301_1157702293303_868726_752&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_9_0_62a020a_1105704900812_735213_8921&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_9_0_62a020a_1105704900663_235770_8905&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_9_0_62a020a_1105704900866_586714_8929&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_9_0_62a020a_1105704900524_611695_8896&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_18_0beta_8ae027d_1393234161183_529611_71207&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_9_0_62a020a_1105704896581_982450_8687&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_9_0_62a020a_1105704895977_530126_8615&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_9_0_62a020a_1105704896324_51502_8663&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_9_0_62a020a_1105704895761_64066_8583&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_9_0_62a020a_1105704896023_931757_8623&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_15_0EAPbeta1_62a020a_1188227519356_865463_4007&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_9_0_62a020a_1105704932761_361072_9592&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_9_0_62a020a_1105704907324_573147_9117&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_9_0_62a020a_1105704904410_395906_9091&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_9_0_62a020a_1105704885779_949036_8059&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_9_0_62a020a_1105704919680_932732_9312&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_9_0_62a020a_1105704886319_270101_8117&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_9_0_62a020a_1105704897612_977025_8839&quot;/>&#xA;            &lt;value xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_9_0_62a020a_1105704890307_266823_8425&quot;/>&#xA;        &lt;/argument>&#xA;        &lt;argument xsi:type=&quot;booleanExpressionSpecification&quot; value=&quot;true&quot;/>&#xA;        &lt;argument xsi:type=&quot;stringExpressionSpecification&quot;>&#xA;            &lt;value>&amp;lt;?xml version='1.0' encoding='UTF-8'?&amp;gt;&#xA;&#xA;&amp;lt;PropertyVisitorAcceptor&amp;gt;&#xA;&#x9;&amp;lt;mdElement elementClass='PropertyManager'&amp;gt;&#xA;&#x9;&#x9;&amp;lt;mdElement elementClass='StringProperty'&amp;gt;&#xA;&#x9;&#x9;&#x9;&amp;lt;propertyID&amp;gt;QPROP:Element:TO_DO&amp;lt;/propertyID&amp;gt;&#xA;&#x9;&#x9;&#x9;&amp;lt;value&amp;gt;*&amp;lt;/value&amp;gt;&#xA;&#x9;&#x9;&#x9;&amp;lt;multiline xmi:value='true'/&amp;gt;&#xA;&#x9;&#x9;&amp;lt;/mdElement&amp;gt;&#xA;&#x9;&amp;lt;/mdElement&amp;gt;&#xA;&amp;lt;/PropertyVisitorAcceptor&amp;gt;&lt;/value>&#xA;        &lt;/argument>&#xA;        &lt;argument xsi:type=&quot;stringExpressionSpecification&quot;>&#xA;            &lt;value>&lt;/value>&#xA;        &lt;/argument>&#xA;        &lt;argument xsi:type=&quot;booleanExpressionSpecification&quot; value=&quot;false&quot;/>&#xA;        &lt;argument xsi:type=&quot;booleanExpressionSpecification&quot; value=&quot;false&quot;/>&#xA;        &lt;argument xsi:type=&quot;booleanExpressionSpecification&quot; value=&quot;true&quot;/>&#xA;        &lt;argument xsi:type=&quot;booleanExpressionSpecification&quot; value=&quot;false&quot;/>&#xA;        &lt;argument xsi:type=&quot;booleanExpressionSpecification&quot; value=&quot;false&quot;/>&#xA;        &lt;argument xsi:type=&quot;booleanExpressionSpecification&quot; value=&quot;false&quot;/>&#xA;        &lt;expression xsi:type=&quot;interpretElementExpressionSpecification&quot;>&#xA;            &lt;element xsi:type=&quot;elementExpressionSpecification&quot; element=&quot;_17_0_5beta_f720368_1373897899638_243554_3290&quot;/>&#xA;        &lt;/expression>&#xA;    &lt;/value>&#xA;&lt;/unionExpressionSpecification>&#xA;"/>
</xmi:XMI>
