@cached
operation JAVA!JvmMethod isQuery () : Boolean {
	return self.kind = JAVA!JvmMethodKind#QUERY;
}

@cached
operation JAVA!JvmMethod isQueryCount () : Boolean {
	return self.kind = JAVA!JvmMethodKind#QUERY_COUNT;
}

@cached
operation JAVA!JvmMethod isCustom () : Boolean {
	return self.kind = JAVA!JvmMethodKind#CUSTOM;
}

@cached
operation JAVA!JvmMethod isCustomBulk () : Boolean {
	return self.kind = JAVA!JvmMethodKind#CUSTOM_BULK;
}

@cached
operation JAVA!JvmMethod isGuardDecide () : Boolean {
	return self.kind = JAVA!JvmMethodKind#SM_DECIDE;
}

@cached
operation JAVA!JvmMethod isTransitionExecutingMethod () : Boolean {
	return self.origin.transitions.size() > 0;
}

@cached
operation JAVA!JvmMethod isReturnVoid () : Boolean {
	return self.type.isVoid();
}

@cached
operation JAVA!JvmMethod parametersSignature () : String {
	return self.parameters.collect(p | p.type.fqName() + " " + p.name).concat(", ");
}

@cached
operation JAVA!JvmMethod parametersSignatureWithFinalModifier () : String {
	return self.parameters.collect(p | "final " + p.type.fqName() + " " + p.name).concat(", ");
}

@cached
operation JAVA!JvmMethod parameterNameSequence () : String {
	return self.parameters.collect(p | p.name).concat(", ");
}

@cached
operation JAVA!JvmMethod parameterTypeSequence () : String {
	return self.parameters.collect(p | p.type.javaClassName() + ".class").concat(", ");
}

@cached
operation JAVA!JvmMethod getFromStatesInStateMachine (sm : JAVA!JvmStateMachine) : Set {
	return self.origin.transitions.select(t | t.ownerStateMachine = sm).fromState.asSet();
}

operation JAVA!JvmMethod parameterSequenceReplacedForCall (toBeReplaced : String, replacement : String) : String {
	var origSeq = self.parameters.collect(p | p.name);
	var ret = origSeq;
	var index = origSeq.indexOf(toBeReplaced);
	if (index > -1) {
		ret = origSeq.excluding(toBeReplaced);
		ret.add(index, replacement);
	}
	return ret.concat(", ");
}

operation JAVA!JvmMethod addIdParam() : Any {
	var idParam = new JAVA!JvmMethodParameter;
	idParam.type = idType();
	idParam.name = "id";
	idParam.uuid = uuid3(self.uuid, idParam.name);
	idParam.representsJudoId = true;
	self.parameters.add(0, idParam);
}

operation JAVA!JvmMethod addPaginationParam() : Any {
	var param = new JAVA!JvmMethodParameter;
	param.type = paginationClass(COORDINATES.get(self.ownerClass.coordinate).get(COORDINATE_GROUP));
	param.name = "pagination";
	param.uuid = uuid3(self.uuid, param.name);
	self.parameters.add(param);
}

operation JAVA!JvmMethod addFilterParam() : Any {
    var param = new JAVA!JvmMethodParameter;
    param.type = filterClass(COORDINATES.get(self.ownerClass.coordinate).get(COORDINATE_GROUP));
    param.name = "filter";
    param.uuid = uuid3(self.uuid, param.name);
    self.parameters.add(param);
}

operation JAVA!JvmMethod addIdsParam(addToFront : Boolean) : Any {
	var idsParam = new JAVA!JvmMethodParameter;
	idsParam.type = createJvmList(idType());
	idsParam.name = "ids";
	idsParam.uuid = uuid3(self.uuid, idsParam.name);
	idsParam.representsJudoId = true;
	if(addToFront) {
	   self.parameters.add(0, idsParam);
	} else {
	   self.parameters.add(idsParam);
	}
}

operation JAVA!JvmMethod addCustomParam(type : JAVA!JvmType, name : String) : Any {
    var param = new JAVA!JvmMethodParameter;
    param.type = type;
    param.name = name;
    param.uuid = uuid3(self.uuid, param.name);
    self.parameters.add(param);
}