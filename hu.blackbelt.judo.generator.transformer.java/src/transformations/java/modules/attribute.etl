import "../../../operations/_importAll.eol";
import "element.etl";

@abstract
rule JAttribute
	transform s : PSM!JAttribute
	to t : JAVA!JvmAttribute 
	extends JElement { 
}

rule OriginAttribute
	transform s : PSM!JAttribute
	to t : JAVA!JvmAttribute 
	extends JAttribute { 
		t.fillFrom(s, "OriginClass");
		t.uuid = s.uuid;
}

rule PoAttribute
	transform s : PSM!JAttribute
	to t : JAVA!JvmAttribute 
	extends JAttribute { 
		t.fillFrom(s, "PoClass");
}

rule BoAttribute
	transform s : PSM!JAttribute
	to t : JAVA!JvmAttribute 
	extends JAttribute { 
		t.fillFrom(s, "BoClass");
}

rule BoBuilderAttribute
	transform s : PSM!JAttribute
	to t : JAVA!JvmAttribute 
	extends JAttribute { 
		t.fillFrom(s, "BoBuilderClass");
}

rule BoBqlAttribute
	transform s : PSM!JAttribute
	to t : JAVA!JvmAttribute 
	extends JAttribute {
		t.fillFrom(s, "BoBqlClass");
}

rule BoBqlFrameworkAttribute
	transform s : PSM!JAttribute
	to t : JAVA!JvmAttribute 
	extends JAttribute { 
	guard : s.ownerClass.framework
		t.fillFrom(s, "BoBqlFrameworkClass");
}

rule DtoAttribute
	transform s : PSM!JAttribute
	to t : JAVA!JvmAttribute
	extends JAttribute {
		t.fillFrom(s, "DtoClass");
}

rule RestDtoAttribute
	transform s : PSM!JAttribute
	to t : JAVA!JvmAttribute
	extends JAttribute {
		t.fillFrom(s, "RestDtoClass");
}

rule DtoBuilderAttribute
	transform s : PSM!JAttribute
	to t : JAVA!JvmAttribute
	extends JAttribute {
		t.fillFrom(s, "DtoBuilderClass");
}

rule RestDtoBuilderAttribute
    transform s : PSM!JAttribute
    to t : JAVA!JvmAttribute
    extends JAttribute {
        t.fillFrom(s, "RestDtoBuilderClass");
}

rule DtoAccessorAttribute
    transform s : PSM!JAttribute
    to t : JAVA!JvmAttribute
    extends JAttribute {
        t.fillFrom(s, "DtoAccessorClass");
}

rule DtoOperationAttribute
    transform s : PSM!JAttribute
    to t : JAVA!JvmAttribute
    extends JAttribute {
        t.fillFrom(s, "DtoOperationClass");
}

rule RestOperationAttribute
    transform s : PSM!JAttribute
    to t : JAVA!JvmAttribute
    extends JAttribute {
        t.fillFrom(s, "RestOperationImplClass");
}

rule FilterRestDtoAttribute
    transform s : PSM!JAttribute
    to t : JAVA!JvmAttribute
    extends JAttribute {
        t.fillFrom(s, "FilterRestDtoClass");
}

rule AbstractRestTestClientAttribute
    transform s : PSM!JAttribute
    to t : JAVA!JvmAttribute
    extends JAttribute {
        t.fillFrom(s, "AbstractRestTestClientClass");
}

rule RestTestWrapperC
    transform s : PSM!JAttribute
    to t : JAVA!JvmAttribute
    extends JAttribute {
        t.fillFrom(s, "RestTestWrapperCClass");
}

rule RestTestWrapperT
    transform s : PSM!JAttribute
    to t : JAVA!JvmAttribute
    extends JAttribute {
        t.fillFrom(s, "RestTestWrapperTClass");
}

rule RestTestWrapperM
    transform s : PSM!JAttribute
    to t : JAVA!JvmAttribute
    extends JAttribute {
        t.fillFrom(s, "RestTestWrapperMClass");
}

operation JAVA!JvmAttribute fillFrom (source : PSM!JAttribute, correspondingRule : String) : Any {
	self.ownerClass = source.ownerClass.equivalent(correspondingRule);
	self.uuid = generateUuid(self.ownerClass.uuid, source.name, ".");
	self.unique = source.unique;
	self.mandatory = source.mandatory;
	self.technical = source.technical;
	self.regexp = source.regexp;
    self.placeholder = source.placeholder;
    self.representsId = source.representsId;
    if (self.placeholder.isUndefined()) {
        self.placeholder = "";
    }
    self.derived = source.derived;

	self.type = source.type.equivalent(correspondingRule);
	if (self.type.isUndefined()) {
		self.type = source.type.findJavaPrimitive();
	}

	if (source.value.isDefined() and not source.derived) {
		if (source.calculated) {
			self.calculationScript = source.value;
		} else {
			self.defaultValueExpression = source.value;
		}
	}
}