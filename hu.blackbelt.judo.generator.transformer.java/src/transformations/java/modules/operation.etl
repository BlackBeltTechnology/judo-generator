import "../../../operations/_importAll.eol";
import "element.etl";
import "type.etl";

@abstract
rule JOperation 
	transform s : PSM!JOperation
	to t : JAVA!JvmMethod
	extends JElement {
		
}

@primary
rule OriginOperation 
	transform s : PSM!JOperation
	to t : JAVA!JvmMethod
	extends JOperation {
		t.fillFrom(s, "OriginClass", "OriginClass");
		t.uuid = s.uuid;
}

rule BoOperation 
	transform s : PSM!JOperation
	to t : JAVA!JvmMethod
	extends JOperation {
		t.fillFrom(s, "BoClass", "BoClass");
}

rule BoServiceOperation 
	transform s : PSM!JOperation
	to t : JAVA!JvmMethod
	extends JOperation {
	guard : not s.ownerClass.framework
		t.fillFrom(s, "BoService", "BoClass");
}

rule BoServiceAbstractOperation 
	transform s : PSM!JOperation
	to t : JAVA!JvmMethod
	extends JOperation {
	guard : not s.ownerClass.framework
		t.fillFrom(s, "BoServiceAbstract", "BoClass");
}

rule BoServiceWrapperOperation 
	transform s : PSM!JOperation
	to t : JAVA!JvmMethod
	extends JOperation {
	guard : not s.ownerClass.framework
		t.fillFrom(s, "BoServiceWrapper", "BoClass");
}

rule BoFrameworkServiceOperation 
	transform s : PSM!JOperation
	to t : JAVA!JvmMethod
	extends JOperation {
	guard : s.ownerClass.framework
		t.fillFrom(s, "BoFrameworkService", "BoInterface");
}

rule BoFrameworkServiceDefaultOperation 
	transform s : PSM!JOperation
	to t : JAVA!JvmMethod
	extends JOperation {
	guard : s.ownerClass.framework
		t.fillFrom(s, "BoFrameworkServiceDefault", "BoInterface");
}

rule BoFrameworkServiceWrapperOperation 
	transform s : PSM!JOperation
	to t : JAVA!JvmMethod
	extends JOperation {
	guard : s.ownerClass.framework
		t.fillFrom(s, "BoFrameworkServiceWrapper", "BoInterface");
}


rule DtoOperation
    transform s : PSM!JOperation
    to t : JAVA!JvmMethod
    extends JOperation {
        t.fillFrom(s, "DtoOperationInterface", "DtoClass");
}

rule RestDtoOperation
    transform s : PSM!JOperation
    to t : JAVA!JvmMethod
    extends JOperation {
        t.fillFrom(s, "RestOperationClass", "RestDtoClass");
}

rule DtoImplOperation
    transform s : PSM!JOperation
    to t : JAVA!JvmMethod
    extends JOperation {
        t.fillFrom(s, "DtoOperationClass", "DtoClass");
}

rule RestDtoImplOperation
    transform s : PSM!JOperation
    to t : JAVA!JvmMethod
    extends JOperation {
        t.fillFrom(s, "RestOperationImplClass", "RestDtoClass");
}

rule AbstractRestTestClientOperation
    transform s : PSM!JOperation
    to t : JAVA!JvmMethod
    extends JOperation {
        t.fillFrom(s, "AbstractRestTestClientClass", "RestDtoClass");
}

rule RestTestWrapperTOperation
    transform s : PSM!JOperation
    to t : JAVA!JvmMethod
    extends JOperation {
        t.fillFrom(s, "RestTestWrapperTClass", "RestDtoClass");
}

rule RestTestWrapperMOperation
    transform s : PSM!JOperation
    to t : JAVA!JvmMethod
    extends JOperation {
        t.fillFrom(s, "RestTestWrapperMClass", "RestDtoClass");
}

rule RestTestWrapperSOperation
    transform s : PSM!JOperation
    to t : JAVA!JvmMethod
    extends JOperation {
        t.fillFrom(s, "RestTestWrapperSClass", "RestDtoClass");
}

operation JAVA!JvmMethod fillFrom (source : PSM!JOperation, ownerClassRuleName : String, returnTypeRuleName : String) : Any {
	self.uuid = uuid3(source.uuid, ownerClassRuleName);
	self.ownerClass = source.ownerClass.equivalent(ownerClassRuleName);
	self.origin ::= source;
	self.kind = source.kind.toJava();
	self.classBased = source.classBased;
	var out = source.parameters.select(p | not p.input).first();
	if (out.isDefined() and out.type.isDefined()) {
		self.type = out.type.transformType(returnTypeRuleName, out.upper = -1);
	} else {
		self.type = voidType();
	}
}