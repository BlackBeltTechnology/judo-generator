import "../../../operations/_importAll.eol";
import "element.etl";
import "type.etl";

@abstract
rule JParameter 
	transform s : PSM!JParameter
	to t : JAVA!JvmMethodParameter
	extends JElement {
}

rule OriginParameter 
	transform s : PSM!JParameter
	to t : JAVA!JvmMethodParameter
	extends JParameter {
	guard : s.input
		t.fillFrom(s, "OriginOperation", "OriginClass");
}

rule BoParameter 
	transform s : PSM!JParameter
	to t : JAVA!JvmMethodParameter
	extends JParameter {
	guard : s.input
		t.fillFrom(s, "BoOperation", "BoClass");
}

rule BoServiceParameter 
	transform s : PSM!JParameter
	to t : JAVA!JvmMethodParameter
	extends JParameter {
	guard : s.input and not s.ownerOperation.ownerClass.framework
		t.fillFrom(s, "BoServiceOperation", "BoClass");
}

rule BoFrameworkServiceParameter 
	transform s : PSM!JParameter
	to t : JAVA!JvmMethodParameter
	extends JParameter {
	guard : s.input and s.ownerOperation.ownerClass.framework
		t.fillFrom(s, "BoFrameworkServiceOperation", "BoInterface");
}

rule BoServiceAbstractParameter 
	transform s : PSM!JParameter
	to t : JAVA!JvmMethodParameter
	extends JParameter {
	guard : s.input and not s.ownerOperation.ownerClass.framework
		t.fillFrom(s, "BoServiceAbstractOperation", "BoClass");
}

rule BoServiceWrapperParameter 
	transform s : PSM!JParameter
	to t : JAVA!JvmMethodParameter
	extends JParameter {
	guard : s.input and not s.ownerOperation.ownerClass.framework
		t.fillFrom(s, "BoServiceWrapperOperation", "BoClass");
}

rule BoFrameworkServiceWrapperParameter 
	transform s : PSM!JParameter
	to t : JAVA!JvmMethodParameter
	extends JParameter {
	guard : s.input and s.ownerOperation.ownerClass.framework
		t.fillFrom(s, "BoFrameworkServiceWrapperOperation", "BoInterface");
}

rule BoFrameworkServiceDefaultParameter 
	transform s : PSM!JParameter
	to t : JAVA!JvmMethodParameter
	extends JParameter {
	guard : s.input and s.ownerOperation.ownerClass.framework
		t.fillFrom(s, "BoFrameworkServiceDefaultOperation", "BoInterface");
}

rule DtoParameter
    transform s : PSM!JParameter
    to t : JAVA!JvmMethodParameter
    extends JParameter {
    guard : s.input
        t.fillFrom(s, "DtoOperation", "DtoClass");
}

rule RestDtoParameter
    transform s : PSM!JParameter
    to t : JAVA!JvmMethodParameter
    extends JParameter {
    guard : s.input
        t.fillFrom(s, "RestDtoOperation", "RestDtoClass");
    }

rule DtoImplParameter
    transform s : PSM!JParameter
    to t : JAVA!JvmMethodParameter
    extends JParameter {
    guard : s.input
        t.fillFrom(s, "DtoImplOperation", "DtoClass");
}

rule RestDtoImplParameter
    transform s : PSM!JParameter
    to t : JAVA!JvmMethodParameter
    extends JParameter {
    guard : s.input
        t.fillFrom(s, "RestDtoImplOperation", "RestDtoClass");
}

rule AbstractRestTestClientParameter
    transform s : PSM!JParameter
    to t : JAVA!JvmMethodParameter
    extends JParameter {
    guard : s.input
        t.fillFrom(s, "AbstractRestTestClientOperation", "RestDtoClass");
}

rule RestTestWrapperTParameter
    transform s : PSM!JParameter
    to t : JAVA!JvmMethodParameter
    extends JParameter {
    guard : s.input
        t.fillFrom(s, "RestTestWrapperTOperation", "RestDtoClass");
}

rule RestTestWrapperMParameter
    transform s : PSM!JParameter
    to t : JAVA!JvmMethodParameter
    extends JParameter {
    guard : s.input
        t.fillFrom(s, "RestTestWrapperMOperation", "RestDtoClass");
}

rule RestTestWrapperSParameter
    transform s : PSM!JParameter
    to t : JAVA!JvmMethodParameter
    extends JParameter {
    guard : s.input
        t.fillFrom(s, "RestTestWrapperSOperation", "RestDtoClass");
}

operation JAVA!JvmMethodParameter fillFrom (source : PSM!JParameter, ownerOperationRuleName : String, typeRuleName : String) : Any {
	self.ownerMethod = source.ownerOperation.equivalent(ownerOperationRuleName);
	self.uuid = generateUuid(self.ownerMethod.uuid, self.name, ".");
	if (source.type.isDefined()) {
		var isCollection = source.upper == -1;
		if (source.ownerOperation.kind == PSM!JOperationKind#QUERY and not Set{JAVA!JvmJudoCoordinate#ABSTRACT_REST_TEST_CLIENT, JAVA!JvmJudoCoordinate#REST_TEST_WRAPPER_S}.contains(self.ownerMethod.ownerClass.coordinate)) {
			if (source.type.isTypeOf(PSM!JPrimitive)){
				self.type = source.type.transformType(typeRuleName, isCollection);
			} else {
				if (isCollection) {
					self.type = createJvmList(idType());
				} else {
					self.type = idType();
				}
			}
		} else {
			self.type = source.type.transformType(typeRuleName, isCollection);
		}
	} else {
		self.type = voidType();
	}
	
	
}