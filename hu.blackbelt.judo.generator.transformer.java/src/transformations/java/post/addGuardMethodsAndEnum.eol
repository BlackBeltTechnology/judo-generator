operation addGuardMethodsAndEnum () : Any {
	for (state in JAVA!JvmState.all.select(s | s.outgoingTransitions.size() > 1)) {
		var groupedByMethod = state.getOutgoingTransitionsGroupedByExecutingMethod();
		for (key in groupedByMethod.keySet()) {
			var val = groupedByMethod.get(key);
			if (val.size() > 1) {
				var method = JAVA!JvmMethod.all.selectOne(m | m.uuid = key);
				var oClass = state.ownerStateMachine.ownerClass;
				var enum = new JAVA!JvmEnum;
				
				enum.name = method.name.firstToUpperCase() + state.name.firstToUpperCase();
				
				enum.name.println("ENUM NAME ITTTT: ");
				
				enum.uuid = generateUuid(oClass.uuid, enum.name, ".");
				enum.package = oClass.package;
				var decideMethod = new JAVA!JvmMethod;
				decideMethod.name = "decide" + enum.name;
				decideMethod.uuid = generateUuid(oClass.uuid, decideMethod.name, ".");
				decideMethod.ownerClass = oClass.boServiceAbstract();
				decideMethod.type = enum;
				decideMethod.kind = JAVA!JvmMethodKind#SM_DECIDE;
				for (param in method.parameters) {
				    var p = new JAVA!JvmMethodParameter;
                    p.type = param.type;
                    p.name = param.name;
                    p.uuid = generateUuid(decideMethod.uuid, p.name, ".");
                    decideMethod.parameters.add(p);
				}
				
				createInstanceBasedMethodWithProperIdTypeFor(decideMethod, JAVA!JvmMethodKind#SM_DECIDE);
				decideMethod.addIdParam();

				for (tr in val) {
					var literal = new JAVA!JvmLiteral;
					literal.name = tr.guard.text.toUpperCase();
					literal.uuid = generateUuid(enum.uuid, literal.name, ".");
					literal.ownerEnum = enum;
					tr.guard.literal = literal;
					tr.guard.implementingMethod = decideMethod;
				}
			}
		}
	}
}