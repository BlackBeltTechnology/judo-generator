operation addAndModifyMethods () : Any {
	var allMethods = JAVA!JvmMethod.all.asSet();
	for (method in allMethods) {
		if (method.kind = JAVA!JvmMethodKind#CUSTOM) {
			if (not method.classBased) {
				createBulkMethodFor(method);
				method.addIdParam();
			}
		} else if (method.kind = JAVA!JvmMethodKind#QUERY) {
			if (method.type.isCollection()) {
				createQueryCountMethodFor(method);
				if(not Set{JAVA!JvmJudoCoordinate#ABSTRACT_REST_TEST_CLIENT, JAVA!JvmJudoCoordinate#REST_TEST_WRAPPER_S}.includes(method.ownerClass.coordinate)) {
				    method.addPaginationParam();
				    method.addFilterParam();
				}
			}
		}
	}

	for (interface in JAVA!JvmInterface.allOfType.select(i | i.coordinate = JAVA!JvmJudoCoordinate#DTO_OPERATION)) {
	    interface.createDtoOperationMethods();
    }

    for (interface in JAVA!JvmInterface.allOfType.select(i | i.coordinate = JAVA!JvmJudoCoordinate#REST_OPERATION)) {
        interface.createRestDtoOperationMethods();
    }
}

operation createQueryCountMethodFor (method : JAVA!JvmMethod) : Any {
	var countMethod = new JAVA!JvmMethod;
	countMethod.name = method.name + "Count";
	countMethod.uuid = generateUuid(method.uuid, countMethod.name, ".");
	countMethod.origin = method.origin;
	countMethod.ownerClass = method.ownerClass;
	countMethod.type = intType();
	countMethod.kind = JAVA!JvmMethodKind#QUERY_COUNT;
	countMethod.classBased = method.classBased;
	var allParams = method.parameters.asSequence();
	for (param in allParams) {
		var countParam = new JAVA!JvmMethodParameter;
		countParam.name = param.name;
		countParam.uuid = generateUuid(param.uuid, "Count", "_");
		countParam.type = param.type;
		countParam.ownerMethod = countMethod;
	}
}

operation createBulkMethodFor (method : JAVA!JvmMethod) : Any {
	var bulkMethod = new JAVA!JvmMethod;
	bulkMethod.name = method.name;
	bulkMethod.classBased = method.classBased;
	bulkMethod.origin = method.origin;
	bulkMethod.uuid = generateUuid(method.uuid, "Bulk", "_");
	bulkMethod.ownerClass = method.ownerClass;
	bulkMethod.type = createJvmList(method.type);
	bulkMethod.kind = JAVA!JvmMethodKind#CUSTOM_BULK;
	bulkMethod.bulk = true;
	var allParams = method.parameters.asSequence();
	for (param in allParams) {
		var bulkParam = new JAVA!JvmMethodParameter;
		bulkParam.name = param.name;
		bulkParam.uuid = generateUuid(bulkMethod.uuid, param.name, ".");
		bulkParam.type = param.type;
		bulkParam.ownerMethod = bulkMethod;
	}
	bulkMethod.addIdsParam(bulkMethod.ownerClass.coordinate <> JAVA!JvmJudoCoordinate#ABSTRACT_REST_TEST_CLIENT);
}

operation JAVA!JvmInterface createDtoOperationMethods () {
    for (ref in self.origin.allReferences().select(r | r.navigable)) {
        var returnType;
        var listType;
        if(ref.type.isCollection()) {
            returnType = createJvmList(ref.type.bare().dto());
            listType = returnType;
        } else {
            returnType = ref.type.dto();
            listType = createJvmList(returnType);
        }

        var countTraverseMethod = createMethodFor(self, ref, longType(), "countTraverse", JAVA!JvmMethodKind#COUNT_TRAVERSE);
        countTraverseMethod.addIdParam();
        countTraverseMethod.addFilterParam();

        var traverseMethod = createMethodFor(self, ref, returnType, "traverse", JAVA!JvmMethodKind#TRAVERSE);
        traverseMethod.addIdParam();
        traverseMethod.addFilterParam();
        traverseMethod.addPaginationParam();

        if (not ref.derived) {
            var countAvailableMethod = createMethodFor(self, ref, longType(), "countAvailable", JAVA!JvmMethodKind#COUNT_AVAILABLE);
            countAvailableMethod.addIdParam();
            countAvailableMethod.addFilterParam();

            var availableMethod = createMethodFor(self, ref, listType, "available", JAVA!JvmMethodKind#AVAILABLE);
            availableMethod.addIdParam();
            availableMethod.addFilterParam();
            availableMethod.addPaginationParam();

            var attachMethod = createMethodFor(self, ref, returnType, "attach", JAVA!JvmMethodKind#ATTACH);
            attachMethod.addIdParam();
            attachMethod.addCustomParam(returnType, ref.name);

            var detachMethod = createMethodFor(self, ref, returnType, "detach", JAVA!JvmMethodKind#DETACH);
            detachMethod.addIdParam();
            detachMethod.addCustomParam(returnType, ref.name);
        }
    }
}

operation JAVA!JvmInterface createRestDtoOperationMethods () {
    for (ref in self.origin.allReferences().select(r | r.navigable)) {
        var returnType;
        if(ref.type.isCollection()) {
            returnType = createJvmList(ref.type.bare().restDto());
        } else {
            returnType = ref.type.restDto();
        }

        var traverseMethod = createMethodFor(self, ref, responseType(), "traverse", JAVA!JvmMethodKind#TRAVERSE);
        traverseMethod.addIdParam();
        traverseMethod.addCustomParam(self.filterRestDto(), "filter");
        traverseMethod.addPaginationParam();

        var traverseExportMethod = createMethodFor(self, ref, responseType(), "", JAVA!JvmMethodKind#TRAVERSE_EXPORT);
        traverseExportMethod.name = "traverse" + ref.name.firstToUpperCase() + "Export";
        traverseExportMethod.uuid = generateUuid(self.uuid, traverseExportMethod.name, ".");
        traverseExportMethod.addIdParam();
        traverseExportMethod.addCustomParam(self.filterRestDto(), "filter");

        if (not ref.derived) {
            var availableMethod = createMethodFor(self, ref, responseType(), "available", JAVA!JvmMethodKind#AVAILABLE);
            availableMethod.addIdParam();
            availableMethod.addCustomParam(self.filterRestDto(), "filter");
            availableMethod.addPaginationParam();

            var availableAllMethod = createMethodFor(self, ref, responseType(), "availableAll", JAVA!JvmMethodKind#AVAILABLE_ALL);
            availableAllMethod.addCustomParam(self.filterRestDto(), "filter");
            availableAllMethod.addPaginationParam();

            var attachMethod = createMethodFor(self, ref, returnType, "attach", JAVA!JvmMethodKind#ATTACH);
            attachMethod.addIdParam();
            attachMethod.addCustomParam(returnType, ref.name);

            var detachMethod = createMethodFor(self, ref, returnType, "detach", JAVA!JvmMethodKind#DETACH);
            detachMethod.addIdParam();
            detachMethod.addCustomParam(returnType, ref.name);
        }
    }
}

operation createMethodFor (ownerClass : JAVA!JvmInterface, ref : JAVA!JvmReference, returnType : JAVA!JvmType, mNamePrefix : String, kind : Any) : JAVA!JvmMethod {
    var newMethod = new JAVA!JvmMethod;
    newMethod.name = mNamePrefix + ref.name.firstToUpperCase();
    newMethod.uuid = generateUuid(ownerClass.uuid, newMethod.name, ".");
    newMethod.originReference = ref;
    newMethod.ownerClass = ownerClass;
    newMethod.type = returnType;
    newMethod.kind = kind;
    newMethod.classBased = false;
    return newMethod;
}