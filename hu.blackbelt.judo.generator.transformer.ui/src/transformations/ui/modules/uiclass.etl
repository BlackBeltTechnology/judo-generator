import "../../../operations/_importAll.eol";

rule UIClass
	transform jclass : PSM!JClass
	to uiclass : UI!UIClass {
	//inherited from Identifiable
	uiclass.uuid = jclass.uuid;
	uiclass.name = jclass.name;
	
	//Attributes
	uiclass.abstract = jclass.abstract;
	uiclass.enumClass = jclass.representsEnum;
	uiclass.singleton = jclass.businessSingleton;
	if (jclass.visibility = PSM!JVisibility#PROTECTED or jclass.visibility = PSM!JVisibility#PRIVATE or jclass.visibility = PSM!JVisibility#PACKAGE) {
		uiclass.readonly = true;
	} else {
		uiclass.readonly = false;
	}
	
	//References
	uiclass.representation = jclass.representation.equivalent("UIBaseComponentType");
	uiclass.super = jclass.supertype.equivalent("UIClass");
	
	//create Actions
	var inherited : Boolean = false;
	var currentClass : PSM!JClass = jclass;
	while (true) {
		for (op : PSM!JOperation in currentClass.operations) {
			if (op.visibility = PSM!JVisibility#PUBLIC) {
				var action : UI!UIAction = op.equivalent("UIAction");
				action.inherited = inherited;
				uiclass.actions.add(action);
			}	
		}
			
		if (currentClass.supertype.isDefined()) {
			currentClass = currentClass.supertype;
			inherited = true;
		}	else {
			break;
		}
	}

	//create ComponentTypes
	inherited = false;
	currentClass = jclass;
	while (true) {
		for (attr : PSM!JAttribute in currentClass.attributes) {
			var attribute : UI!UIBaseComponentType = attr.equivalent("UIBaseComponentType");
			attribute.inherited = inherited;
			if (uiclass.representation.isDefined() and uiclass.representation.uuid = attribute.uuid) {
				attribute.representation = true;
			}
			uiclass.attributes.add(attribute);
			}
		for (role : PSM!JRole in currentClass.roles) {
			var reference : UI!UIReferenceComponentType = role.equivalent();
			reference.inherited = inherited;
			uiclass.attributes.add(reference);
		}
		
		if (currentClass.supertype.isDefined()) {
			currentClass = currentClass.supertype;
			inherited = true;
		}	else {
			break;
		}
		
	}

	//create Views
	var classView = createClassView(uiclass, uiclass.name, uiclass.uuid + '_oview_default', true);
	var listView = createListView(uiclass, uiclass.name, uiclass.uuid + '_lview_default', objectView, true);
	uiclass.classViews.add(objectView);
	uiclass.listViews.add(listView);
	for (al in jclass.aliases) {
		classView = createClassView(uiclass, al.name, uiclass.uuid + '_oview_' + al.name, false);
		listView =  createListView(uiclass, al.name, uiclass.uuid + '_lview_' + al.name, classView, false);
		uiclass.classViews.add(classView);
		uiclass.listViews.add(listView);
	}
		
}
	
	
operation createClassView(ownerClass: UI!UIClass, name: String, uuid: String, isDefault: Boolean) : UI!UIClassView {
	var classView : UI!UIClassView = new UI!UIClassView();
	classView.uuid = uuid;
	classView.name = name;
	classView.isDefault = isDefault;
	classView.pageSize = 1;
	classView.columns = 2;
	
	var position = 1;
	
	for (attribute in ownerClass.attributes) {
		if ((attribute.isTypeOf(UI!UIReferenceComponentType) and attribute.navigable and not attribute.private) 
													or (not attribute.isTypeOf(UI!UIReference) and not attribute.private)) {
			var viewFieldSet : UI!UIViewFieldSet = new UI!UIViewFieldSet();
			viewFieldSet.name = attribute.name;
			viewFieldSet.uuid = objectView.id + "_viewfieldset_" + attribute.name;
			viewFieldSet.position = position;
			
			var viewField : UI!UIViewField = new UI!UIViewField();
			viewField.name = attribute.name;
			viewField.uuid = attribute.id + name;
			viewField.componentType = attribute;
			viewField.searchable = true;
			viewField.position = 1;
			
			position++;
			viewFieldSet.viewFields.add(viewField);
			classView.viewFieldSets.add(viewFieldSet);
		}
	}
	
	return classView;
}

operation createListView(ownerClass: UI!UIClass, name: String, uuid: String, classView: UI!UIClassView, isDefault: Boolean) : UI!UIListView {
	var listView = new UI!UIListView();
	listView.uuid = uuid;
	listView.name = name;
	listView.isDefault = isDefault;
	listView.pageSize = 20;
	listView.detailView = objectView;
	
	return listView;
}